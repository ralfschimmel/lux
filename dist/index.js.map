{"version":3,"file":"index.js","sources":["../src/utils/normalize-port.js","../src/constants.js","../src/utils/promisify.js","../src/utils/exec.js","../src/utils/k.js","../src/utils/try-catch.js","../src/packages/fs/utils/is-js-file.js","../src/packages/freezeable/constants.js","../src/utils/is-object.js","../src/packages/freezeable/utils/freeze.js","../src/packages/freezeable/utils/is-frozen.js","../src/packages/freezeable/map/index.js","../src/packages/freezeable/set/index.js","../src/packages/fs/watcher/initialize.js","../src/packages/fs/watcher/index.js","../src/packages/fs/utils/create-path-remover.js","../src/utils/noop.js","../src/packages/fs/utils/rmrf.js","../src/packages/fs/utils/exists.js","../src/packages/fs/utils/parse-path.js","../src/packages/fs/index.js","../src/packages/template/utils/insert-values.js","../src/packages/template/index.js","../src/packages/compiler/utils/handle-warning.js","../src/packages/compiler/utils/is-external.js","../src/utils/chain.js","../src/utils/underscore.js","../src/utils/compose.js","../src/packages/compiler/utils/format-name.js","../src/packages/compiler/utils/create-manifest.js","../src/packages/compiler/utils/read-babel-config.js","../src/packages/compiler/utils/create-boot-script.js","../src/packages/compiler/index.js","../src/packages/cli/commands/build.js","../src/packages/cli/utils/driver-for.js","../src/packages/cli/templates/application.js","../src/packages/cli/templates/config.js","../src/packages/cli/templates/routes.js","../src/packages/cli/utils/indent.js","../src/packages/cli/templates/database.js","../src/packages/cli/templates/seed.js","../src/packages/cli/templates/package-json.js","../src/packages/cli/templates/babelrc.js","../src/packages/cli/templates/eslintrc.js","../src/packages/cli/templates/readme.js","../src/packages/cli/templates/license.js","../src/packages/cli/templates/gitignore.js","../src/packages/cli/utils/create-prompt.js","../src/packages/cli/generator/constants.js","../src/packages/database/constants.js","../src/packages/logger/constants.js","../src/utils/entries.js","../src/utils/set-type.js","../src/utils/omit.js","../src/packages/logger/writer/constants.js","../src/utils/stringify.js","../src/packages/logger/writer/utils/format-message.js","../src/packages/logger/writer/index.js","../src/packages/logger/utils/line.js","../src/packages/logger/request-logger/templates.js","../src/packages/logger/request-logger/utils/filter-params.js","../src/packages/logger/request-logger/utils/log-text.js","../src/packages/logger/request-logger/utils/log-json.js","../src/packages/logger/request-logger/index.js","../src/packages/logger/utils/sql.js","../src/packages/logger/index.js","../src/packages/database/errors/invalid-driver-error.js","../src/packages/database/errors/model-missing-error.js","../src/packages/database/errors/migrations-pending-error.js","../src/errors/utils/create-server-error.js","../src/packages/database/errors/unique-constraint-error.js","../src/packages/database/errors/config-missing-error.js","../src/packages/database/query/errors/record-not-found-error.js","../src/packages/database/query/runner/utils/build-results.js","../src/packages/database/query/runner/index.js","../src/packages/database/relationship/utils/getters.js","../src/packages/database/relationship/utils/unassociate.js","../src/packages/database/relationship/utils/inverse-setters.js","../src/packages/database/relationship/utils/setters.js","../src/packages/database/relationship/utils/update-relationship.js","../src/utils/proxy.js","../src/packages/database/transaction/index.js","../src/utils/diff.js","../src/packages/database/model/utils/persistence.js","../src/packages/database/attribute/index.js","../src/packages/database/model/initialize-class.js","../src/packages/database/model/index.js","../src/packages/request/index.js","../src/packages/adapter/utils/query.js","../src/packages/adapter/utils/method.js","../src/packages/adapter/utils/headers.js","../src/packages/adapter/http/request/index.js","../src/packages/response/index.js","../src/packages/adapter/http/response/index.js","../src/packages/adapter/http/index.js","../src/packages/adapter/mock/request/index.js","../src/packages/adapter/mock/response/index.js","../src/packages/adapter/mock/index.js","../src/packages/config/index.js","../src/utils/merge.js","../src/packages/loader/utils/format-key.js","../src/packages/loader/utils/bundle-for.js","../src/packages/loader/resolver/index.js","../src/packages/loader/builder/index.js","../src/packages/loader/index.js","../src/packages/database/utils/connect.js","../src/packages/database/utils/create-migrations.js","../src/packages/database/utils/pending-migrations.js","../src/packages/database/initialize.js","../src/packages/database/utils/normalize-model-name.js","../src/packages/database/migration/utils/generate-timestamp.js","../src/packages/database/migration/index.js","../src/packages/database/index.js","../src/packages/cli/templates/model.js","../src/packages/cli/templates/serializer.js","../src/packages/cli/templates/controller.js","../src/packages/cli/templates/empty-migration.js","../src/packages/cli/templates/model-migration.js","../src/packages/cli/templates/middleware.js","../src/packages/cli/templates/util.js","../src/packages/cli/generator/utils/log.js","../src/packages/cli/generator/utils/create-generator.js","../src/packages/cli/generator/utils/migration-conflict.js","../src/packages/cli/generator/utils/generate-type.js","../src/packages/cli/generator/utils/generator-for.js","../src/packages/cli/generator/index.js","../src/packages/cli/commands/generate.js","../src/packages/cli/commands/create.js","../src/utils/github.js","../src/packages/cli/constants.js","../src/packages/cli/errors/database-config-missing.js","../src/packages/cli/commands/dbcreate.js","../src/packages/cli/commands/dbdrop.js","../src/packages/cli/commands/dbmigrate.js","../src/packages/cli/commands/dbrollback.js","../src/packages/cli/commands/dbseed.js","../src/packages/cli/commands/destroy.js","../src/packages/cli/commands/repl.js","../src/utils/range.js","../src/packages/pm/cluster/index.js","../src/packages/pm/index.js","../src/packages/cli/commands/serve.js","../src/packages/cli/commands/test.js"],"sourcesContent":["/* @flow */\n\n/**\n * @private\n */\nexport default function normalizePort(port: ?(void | string | number)): number {\n  switch (typeof port) {\n    case 'string':\n      return Number.parseInt(port, 10)\n\n    case 'number':\n      return Math.abs(port)\n\n    default:\n      return 4000\n  }\n}\n","/* @flow */\n\nimport * as os from 'os'\nimport { worker, isWorker } from 'cluster'\n\nimport normalizePort from './utils/normalize-port'\n\nconst { env: ENV } = process\n\nfunction getPID(): number {\n  let { pid } = process\n\n  if (isWorker && typeof worker.pid === 'number') {\n    pid = worker.pid\n  }\n\n  return pid\n}\n\nexport const CWD: string = process.cwd()\nexport const PID: number = getPID()\nexport const PORT: number = normalizePort(ENV.PORT)\nexport const NODE_ENV: string = ENV.NODE_ENV || 'development'\nexport const DATABASE_URL: void | ?string = ENV.DATABASE_URL\nexport const LUX_CONSOLE: boolean = Boolean(ENV.LUX_CONSOLE)\nexport const PLATFORM: string = os.platform()\nexport const CIRCLECI: boolean = Boolean(ENV.CIRCLECI)\nexport const APPVEYOR: boolean = Boolean(ENV.APPVEYOR)\nexport const HAS_BODY: RegExp = /^(?:POST|PATCH)$/\n\nexport const METHODS: Set<string> = new Set([\n  'GET',\n  'HEAD',\n  'POST',\n  'PATCH',\n  'DELETE',\n  'OPTIONS',\n])\n\nexport const STATUS_CODES: Map<number, string> = (\n  new Map([\n    [100, 'Continue'],\n    [101, 'Switching Protocols'],\n    [102, 'Processing'],\n    [200, 'OK'],\n    [201, 'Created'],\n    [202, 'Accepted'],\n    [203, 'Non-Authoritative Information'],\n    [204, 'No Content'],\n    [205, 'Reset Content'],\n    [206, 'Partial Content'],\n    [207, 'Multi-Status'],\n    [208, 'Already Reported'],\n    [226, 'IM Used'],\n    [300, 'Multiple Choices'],\n    [301, 'Moved Permanently'],\n    [302, 'Found'],\n    [303, 'See Other'],\n    [304, 'Not Modified'],\n    [305, 'Use Proxy'],\n    [307, 'Temporary Redirect'],\n    [308, 'Permanent Redirect'],\n    [400, 'Bad Request'],\n    [401, 'Unauthorized'],\n    [402, 'Payment Required'],\n    [403, 'Forbidden'],\n    [404, 'Not Found'],\n    [405, 'Method Not Allowed'],\n    [406, 'Not Acceptable'],\n    [407, 'Proxy Authentication Required'],\n    [408, 'Request Timeout'],\n    [409, 'Conflict'],\n    [410, 'Gone'],\n    [411, 'Length Required'],\n    [412, 'Precondition Failed'],\n    [413, 'Payload Too Large'],\n    [414, 'URI Too Long'],\n    [415, 'Unsupported Media Type'],\n    [416, 'Range Not Satisfiable'],\n    [417, 'Expectation Failed'],\n    [418, 'I\\'m a teapot'],\n    [421, 'Misdirected Request'],\n    [422, 'Unprocessable Entity'],\n    [423, 'Locked'],\n    [424, 'Failed Dependency'],\n    [425, 'Unordered Collection'],\n    [426, 'Upgrade Required'],\n    [428, 'Precondition Required'],\n    [429, 'Too Many Requests'],\n    [431, 'Request Header Fields Too Large'],\n    [451, 'Unavailable For Legal Reasons'],\n    [500, 'Internal Server Error'],\n    [501, 'Not Implemented'],\n    [502, 'Bad Gateway'],\n    [503, 'Service Unavailable'],\n    [504, 'Gateway Timeout'],\n    [505, 'HTTP Version Not Supported'],\n    [506, 'Variant Also Negotiates'],\n    [507, 'Insufficient Storage'],\n    [508, 'Loop Detected'],\n    [509, 'Bandwidth Limit Exceeded'],\n    [510, 'Not Extended'],\n    [511, 'Network Authentication Required'],\n  ])\n)\n","/* @flow */\n\ntype Target = (...args: Array<any>) => Promise<any>\n\n/**\n * Convert a function that implements a callback based interface into a function\n * that implements a Promise based interface.\n */\nfunction promisify(source: Function, context?: ?Object): Target {\n  return (...args: Array<any>) => (\n    new Promise((resolve, reject) => {\n      source.apply(context, [...args, (err, ...result) => {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result.length > 1 ? result : result[0])\n      }])\n    })\n  )\n}\n\nexport default promisify\n","/* @flow */\n\nimport * as cp from 'child_process'\n\nimport promisify from './promisify'\n\ntype Options = {\n  cwd?: string;\n  env?: Object;\n  uid?: number;\n  gid?: number;\n  shell?: string;\n  timeout?: number;\n  encoding?: string;\n  maxBuffer?: number;\n  killSignal?: string;\n}\n\n/**\n * @private\n */\nconst exec: (command: string, options?: Options) => Promise<Buffer> = (\n  promisify(cp.exec)\n)\n\nexport default exec\n","/* @flow */\n\n/**\n * A utility function that always returns `this` based on it's current\n * context.\n *\n * A common use case for the K function is a default parameter for optional\n * callback functions or general function arguments.\n *\n * @private\n */\nexport default function K(): any {\n  return this\n}\n","/* @flow */\n\nimport K from './k'\n\n/**\n * A utility function used for wrapping async code that would otherwise need a\n * try-catch block.\n *\n * V8 deoptimizes functions when running into try-catch catch due to the\n * unpredictable nature of the code. The `tryCatch` utility function is a way\n * to \"have your cake and eat it too\". Since the inner function (`fn`) will not\n * become deoptimized by V8 for including a standard try-catch block, we don't\n * have to sacrifice as much perf for error handling expensive computations.\n *\n * The `tryCatch` utility is also very useful when you want to perform a noop\n * when an error is thrown as the catch argument (`rescue`) is optional unlike\n * a traditional try-catch block.\n *\n * @example\n * tryCatch(() => {\n *   const n = Math.floor(Math.random() * 6);\n *\n *   if (n >= 4) {\n *     throw new Error('You lose!');\n *   } else {\n *     return Promise.resolve(n);\n *   }\n * }, err => {\n *   console.error(err);\n * }).then(luckyNumber => {\n *   console.log(`Your lucky number is ${luckyNumber}.`);\n * });\n *\n * @private\n */\nexport default async function tryCatch<T, F:() => Promise<T>>(\n  fn: F,\n  rescue: Function = K\n): Promise<void | T> {\n  let result\n\n  try {\n    result = await fn()\n  } catch (err) {\n    result = await rescue(err)\n  }\n\n  return result\n}\n\n/**\n * A syncronous implementation of the `tryCatch` utility.\n *\n * @example\n * const luckyNumber = tryCatchSync(() => {\n *   const n = Math.floor(Math.random() * 6);\n *\n *   if (n >= 4) {\n *     throw new Error('You lose!');\n *   } else {\n *     return n;\n *   }\n * }, err => {\n *   console.error(err);\n * });\n *\n * if (luckyNumber) {\n *   console.log(`Your lucky number is ${luckyNumber}.`);\n * }\n *\n * @private\n */\nexport function tryCatchSync<T, F:() => T>(\n  fn: F,\n  rescue: Function = K\n): void | T {\n  let result\n\n  try {\n    result = fn()\n  } catch (err) {\n    result = rescue(err)\n  }\n\n  return result\n}\n","/* @flow */\n\nimport { extname } from 'path'\n\n/**\n * @private\n */\nexport default function isJSFile(target: string): boolean {\n  return extname(target) === '.js'\n}\n","/* @flow */\n\nexport const FREEZER = new WeakSet()\n","/* @flow */\n\n/**\n * Determine wether or not a value is an Object.\n *\n * @example\n * const a = null;\n * const b = [];\n * const c = {};\n *\n * console.log(typeof a, typeof b, typeof c);\n * // => 'object', 'object', 'object' 👎\n *\n * console.log(isObject(a), isObject(b), isObject(c));\n * // => false, false, true 👍\n *\n * @private\n */\nexport default function isObject(value: mixed): boolean {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n","/* @flow */\n\nimport { FREEZER } from '../constants'\nimport insert from '../../../utils/insert'\nimport isObject from '../../../utils/is-object'\n\n/**\n * @private\n */\nexport default function freeze<T>(value: T): T {\n  FREEZER.add(value)\n  return value\n}\n\n/**\n * @private\n */\nexport function freezeArray<T>(target: Array<T>): Array<T> {\n  const result = insert(new Array(target.length), target)\n\n  return Object.freeze(result)\n}\n\n/**\n * @private\n */\nexport function freezeValue<T: any>(value: T): T {\n  if (value && typeof value.freeze === 'function') {\n    return Object.freeze(value).freeze(true)\n  } else if (isObject(value)) {\n    return Object.freeze(value)\n  }\n\n  return value\n}\n\n/**\n * @private\n */\nexport function freezeProps<T>(\n  target: T,\n  makePublic: boolean,\n  ...props: Array<string>\n): T {\n  Object.defineProperties(target, props.reduce((obj, key) => ({\n    ...obj,\n    [key]: {\n      value: Reflect.get(target, key),\n      writable: false,\n      enumerable: makePublic,\n      configurable: false,\n    }\n  }), {}))\n\n  return target\n}\n\n/**\n * @private\n */\nexport function deepFreezeProps<T>(\n  target: T,\n  makePublic: boolean,\n  ...props: Array<string>\n): T {\n  Object.defineProperties(target, props.reduce((obj, key) => {\n    let value = Reflect.get(target, key)\n\n    if (Array.isArray(value)) {\n      value = freezeArray(value)\n    } else {\n      value = freezeValue(value)\n    }\n\n    return {\n      ...obj,\n      [key]: {\n        value,\n        writable: false,\n        enumerable: makePublic,\n        configurable: false,\n      }\n    }\n  }, {}))\n\n  return target\n}\n","/* @flow */\n\nimport { FREEZER } from '../constants'\n\n/**\n * @private\n */\nexport default function isFrozen<T>(value: T): boolean {\n  return FREEZER.has(value)\n}\n","/* @flow */\n\nimport freeze from '../utils/freeze'\nimport isFrozen from '../utils/is-frozen'\n\n/**\n * @private\n */\nclass FreezeableMap<K, V> extends Map<K, V> {\n  set(key: K, value: V): FreezeableMap<K, V> {\n    if (!this.isFrozen()) {\n      super.set(key, value)\n    }\n\n    return this\n  }\n\n  clear(): void {\n    if (!this.isFrozen()) {\n      super.clear()\n    }\n  }\n\n  delete(key: K): boolean {\n    return this.isFrozen() ? false : super.delete(key)\n  }\n\n  freeze(deep?: boolean): FreezeableMap<K, V> {\n    if (deep) {\n      this.forEach(Object.freeze)\n    }\n\n    return freeze(this)\n  }\n\n  isFrozen(): boolean {\n    return isFrozen(this)\n  }\n}\n\nexport default FreezeableMap\n","/* @flow */\n\nimport freeze from '../utils/freeze'\nimport isFrozen from '../utils/is-frozen'\n\n/**\n * @private\n */\nclass FreezeableSet<T> extends Set<T> {\n  add(value: T): FreezeableSet<T> {\n    if (!this.isFrozen()) {\n      super.add(value)\n    }\n\n    return this\n  }\n\n  clear(): void {\n    if (!this.isFrozen()) {\n      super.clear()\n    }\n  }\n\n  delete(value: T): boolean {\n    return this.isFrozen() ? false : super.delete(value)\n  }\n\n  freeze(deep?: boolean): FreezeableSet<T> {\n    if (deep) {\n      this.forEach(Object.freeze)\n    }\n\n    return freeze(this)\n  }\n\n  isFrozen(): boolean {\n    return isFrozen(this)\n  }\n}\n\nexport default FreezeableSet\n","/* @flow */\n\nimport { join as joinPath } from 'path'\nimport { watch as nativeWatch } from 'fs'\nimport type { FSWatcher } from 'fs' // eslint-disable-line no-duplicate-imports\n\nimport { Client as Watchman } from 'fb-watchman'\n\nimport exec from '../../../utils/exec'\nimport tryCatch from '../../../utils/try-catch'\nimport isJSFile from '../utils/is-js-file'\nimport { freezeProps } from '../../freezeable'\n\n// eslint-disable-next-line no-unused-vars\nimport type Watcher, { Client } from './index'\n\nconst SUBSCRIPTION_NAME = 'lux-watcher'\n\n/**\n * @private\n */\nfunction fallback(instance: Watcher, path: string): FSWatcher {\n  return nativeWatch(path, {\n    recursive: true\n  }, (type, name) => {\n    if (isJSFile(name)) {\n      instance.emit('change', [{ name, type }])\n    }\n  })\n}\n\n/**\n * @private\n */\nfunction setupWatchmen(instance: Watcher, path: string): Promise<Client> {\n  return new Promise((resolve, reject) => {\n    const client = new Watchman()\n\n    client.capabilityCheck({}, (capabilityErr) => {\n      if (capabilityErr) {\n        reject(capabilityErr)\n        return\n      }\n\n      client.command(['watch-project', path], (watchErr, {\n        watch,\n        relative_path: relativePath\n      } = {}) => {\n        if (watchErr) {\n          reject(watchErr)\n          return\n        }\n\n        client.command(['clock', watch], (clockErr, { clock: since }) => {\n          if (clockErr) {\n            reject(clockErr)\n            return\n          }\n\n          client.command(['subscribe', watch, SUBSCRIPTION_NAME, {\n            since,\n            relative_root: relativePath, // eslint-disable-line camelcase\n\n            fields: [\n              'name',\n              'size',\n              'exists',\n              'type'\n            ],\n\n            expression: [\n              'allof', [\n                'match',\n                '*.js'\n              ]\n            ]\n          }], (subscribeErr) => {\n            if (subscribeErr) {\n              reject(subscribeErr)\n              return\n            }\n\n            client.on('subscription', ({\n              files,\n              subscription\n            }: {\n              files: Array<string>,\n              subscription: string\n            }): void => {\n              if (subscription === SUBSCRIPTION_NAME) {\n                instance.emit('change', files)\n              }\n            })\n\n            resolve(client)\n          })\n        })\n      })\n    })\n  })\n}\n\n/**\n * @private\n */\nexport default async function initialize<T: Watcher>(\n  instance: T,\n  path: string,\n  useWatchman: boolean\n): Promise<T> {\n  const appPath = joinPath(path, 'app')\n  let client\n\n  if (useWatchman) {\n    await tryCatch(async () => {\n      await exec('which watchman')\n      client = await setupWatchmen(instance, appPath)\n    })\n  }\n\n  Object.assign(instance, {\n    path: appPath,\n    client: client || fallback(instance, appPath)\n  })\n\n  freezeProps(instance, true,\n    'path',\n    'client'\n  )\n\n  return instance\n}\n","/* @flow */\n\nimport EventEmitter from 'events'\nimport type { FSWatcher } from 'fs'\n\nimport { Client as Watchman } from 'fb-watchman'\n\nimport initialize from './initialize'\n\nexport type Client =\n  | FSWatcher\n  | Watchman\n\n/**\n * @private\n */\nclass Watcher extends EventEmitter {\n  path: string;\n\n  client: Client;\n\n  constructor(path: string, useWatchman: boolean = true): Promise<Watcher> {\n    super()\n    return initialize(this, path, useWatchman)\n  }\n\n  destroy() {\n    const { client } = this\n\n    if (client instanceof Watchman) {\n      client.end()\n    } else {\n      client.close()\n    }\n  }\n}\n\nexport default Watcher\n","/* @flow */\n\nimport { PLATFORM } from '../../../constants'\n\n/**\n * @private\n */\nfunction createPathRemover(path: string): (src: string) => string {\n  let pattern = new RegExp(`${path}(/)?(.+)`)\n\n  if (PLATFORM.startsWith('win')) {\n    const sep = '\\\\\\\\'\n\n    pattern = new RegExp(`${path.replace(/\\\\/g, sep)}(${sep})?(.+)`)\n  }\n\n  return source => source.replace(pattern, '$2')\n}\n\nexport default createPathRemover\n","/* @flow */\n\nexport default function noop(): void {\n  return undefined\n}\n","/* @flow */\n\nimport * as path from 'path'\n\nimport noop from '../../../utils/noop'\nimport { stat, rmdir, readdir, unlink } from '../index'\n\n/**\n * @private\n */\nasync function rmrf(target: string): Promise<boolean> {\n  const stats = await stat(target).catch(noop)\n\n  if (stats) {\n    if (stats.isDirectory()) {\n      const files = await readdir(target)\n\n      await Promise.all(\n        files.map(file => rmrf(path.join(target, file)))\n      )\n\n      await rmdir(target).catch(noop)\n    } else {\n      await unlink(target)\n    }\n  }\n\n  return true\n}\n\nexport default rmrf\n","/* @flow */\n\nimport { stat, readdir } from '../index'\n\n/**\n * @private\n */\nasync function exists(path: string | RegExp, dir?: string): Promise<boolean> {\n  if (path instanceof RegExp) {\n    const pattern = path\n    let files = []\n\n    if (dir) {\n      files = await readdir(dir)\n    }\n\n    return files.some(file => pattern.test(file))\n  }\n\n  return stat(path).then(\n    () => true,\n    () => false\n  )\n}\n\nexport default exists\n","/* @flow */\n\nimport * as path from 'path'\n\nimport { CWD } from '../../../constants'\n\ntype ParsedPath = {\n  absolute: string;\n  ext: string;\n  dir: string;\n  base: string;\n  name: string;\n  relative: string;\n  root: string;\n}\n\n/**\n * @private\n */\nexport default function parsePath(\n  cwd?: string = CWD,\n  dir?: string = '',\n  name?: string = ''\n): ParsedPath {\n  const parsed = path.parse(path.join(cwd, dir, ...name.split(path.sep)))\n\n  return {\n    ...parsed,\n    absolute: path.join(parsed.dir, parsed.base),\n    relative: path.join(\n      parsed.dir.substr(parsed.dir.indexOf(dir)),\n      parsed.base\n    ),\n  }\n}\n","/* @flow */\n\nimport * as fs from 'fs'\nimport * as path from 'path'\n// eslint-disable-next-line\nimport type { Stats } from 'fs';\n\nimport promisify from '../../utils/promisify'\n\nimport Watcher from './watcher'\nimport createPathRemover from './utils/create-path-remover'\n\nexport { default as rmrf } from './utils/rmrf'\nexport { default as exists } from './utils/exists'\nexport { default as isJSFile } from './utils/is-js-file'\nexport { default as parsePath } from './utils/parse-path'\n\n/**\n * @private\n */\nexport const stat: (path: string) => Promise<Stats> = (\n  promisify(fs.stat)\n)\n\n/**\n * @private\n */\nexport const mkdir: (path: string, mode?: number) => Promise<void> = (\n  promisify(fs.mkdir)\n)\n\n/**\n * @private\n */\nexport const rmdir: (path: string) => Promise<void> = (\n  promisify(fs.rmdir)\n)\n\n/**\n * @private\n */\nexport const unlink: (path: string) => Promise<void> = (\n  promisify(fs.unlink)\n)\n\n/**\n * @private\n */\nexport const readdir: (path: string) => Promise<Array<string>> = (\n  promisify(fs.readdir)\n)\n\n/**\n * @private\n */\nexport const readFile: (path: string) => Promise<Buffer> = (\n  promisify(fs.readFile)\n)\n\n/**\n * @private\n */\nexport const writeFile: (path: string, data: Buffer) => Promise<void> = (\n  promisify(fs.writeFile)\n)\n\n/**\n * @private\n */\nexport const appendFile: (path: string, data: Buffer) => Promise<void> = (\n  promisify(fs.appendFile)\n)\n\n/**\n * @private\n */\nexport function watch(watchPath: string): Promise<Watcher> {\n  return new Watcher(watchPath)\n}\n\n/**\n * @private\n */\nexport function mkdirRec(dirPath: string, mode: number = 511): Promise<void> {\n  const parent = path.resolve(dirPath, '..')\n\n  return stat(parent)\n    .catch(() => mkdirRec(parent, mode))\n    .then(() => mkdir(dirPath, mode))\n    .catch(err => {\n      if (err.code !== 'EEXIST') {\n        return Promise.reject(err)\n      }\n      return Promise.resolve()\n    })\n}\n\n/**\n * @private\n */\nexport function readdirRec(dirPath: string): Promise<Array<string>> {\n  const stripPath = createPathRemover(dirPath)\n\n  return readdir(dirPath)\n    .then(files => Promise.all(\n      files.map(file => {\n        const filePath = path.join(dirPath, file)\n\n        return Promise.all([filePath, stat(filePath)])\n      })\n    ))\n    .then(files => Promise.all(\n      files.map(([file, stats]) => Promise.all([\n        file,\n        stats.isDirectory() ? readdirRec(file) : []\n      ]))\n    ))\n    .then(files => files.reduce((arr, [file, children]) => {\n      const basename = stripPath(file)\n\n      return [\n        ...arr,\n        basename,\n        ...children.map(child => path.join(basename, stripPath(child)))\n      ]\n    }, []))\n}\n","/* @flow */\n\n/**\n * @private\n */\nexport default function insertValues(\n  strings: Array<string>,\n  ...values: Array<mixed>\n) {\n  if (values.length) {\n    return strings.reduce((result, part, idx): string => {\n      let value = values[idx]\n\n      if (value && typeof value.toString === 'function') {\n        value = value.toString()\n      } else {\n        value = ''\n      }\n\n      return result + part + value\n    }, '')\n  }\n\n  return strings.join('')\n}\n","/* @flow */\n\nimport insertValues from './utils/insert-values'\n\nconst bodyPattern = /^\\n([\\s\\S]+)\\s{2}$/gm\nconst trailingWhitespace = /\\s+$/\n\n/**\n * @private\n */\nexport default function template(\n  strings: Array<string>,\n  ...values: Array<mixed>\n): string {\n  const compiled = insertValues(strings, ...values)\n  let [body] = compiled.match(bodyPattern) || []\n  let indentLevel = /^\\s{0,4}(.+)$/g\n\n  if (!body) {\n    body = compiled\n    indentLevel = /^\\s{0,2}(.+)$/g\n  }\n\n  return body.split('\\n')\n    .slice(1)\n    .map(line => {\n      let str = line.replace(indentLevel, '$1')\n\n      if (trailingWhitespace.test(str)) {\n        str = str.replace(trailingWhitespace, '')\n      }\n\n      return str\n    })\n    .join('\\n')\n}\n\nexport { default as insertValues } from './utils/insert-values'\n","/* @flow */\n\n/**\n * @private\n */\ntype CompilerWarning = {\n  code: string;\n  message: string;\n}\n\n/**\n * @private\n */\nexport default function handleWarning(warning: CompilerWarning): void {\n  if (warning.code === 'UNUSED_EXTERNAL_IMPORT') {\n    return\n  }\n  // eslint-disable-next-line no-console\n  console.warn(warning.message)\n}\n","/* @flow */\n\nimport * as path from 'path'\n\n/**\n * @private\n */\nexport default function isExternal(dir: string): (id: string) => boolean {\n  return (id: string): boolean => !(\n    id.startsWith('.')\n    || id.endsWith('lux-framework')\n    || id.startsWith('/') // Absolute path on Unix\n    || /^[A-Z]:[\\\\/]/.test(id) // Absolute path on Windows\n    || id.startsWith('app')\n    || id.startsWith(path.join(dir, 'app'))\n    || id.startsWith(path.join(dir, 'dist'))\n    || id === 'LUX_LOCAL'\n    || id === 'babelHelpers'\n    || id === '\\u0000babelHelpers'\n  )\n}\n","/* @flow */\n\nimport type { Chain } from '../interfaces'\n\n/**\n * @private\n */\nexport default function chain<T>(source: T): Chain<T> {\n  return {\n    pipe<U>(handler: (value: T) => U): Chain<U> {\n      return chain(handler(source))\n    },\n\n    value(): T {\n      return source\n    },\n\n    construct<U, V: Class<U>>(constructor: V): Chain<U> {\n      return chain(Reflect.construct(constructor, [source]))\n    }\n  }\n}\n","/* @flow */\n\nimport { underscore as _ } from 'inflection'\n\n/**\n * @private\n */\nexport default function underscore(\n  source: string = '',\n  upper: boolean = false\n): string {\n  return _(source, upper).replace(/-/g, '_')\n}\n","/* @flow */\n\n/**\n * @private\n */\nexport function tap<T>(input: T): T {\n  console.log(input) // eslint-disable-line no-console\n  return input\n}\n\n/**\n * @private\n */\nexport function compose<T, U>(\n  main: (input: any) => U,\n  ...etc: Array<Function>\n): (input: T) => U {\n  return input => main(etc.reduceRight(\n    (value, fn) => fn(value),\n    input\n  ))\n}\n\n/**\n * @private\n */\nexport function composeAsync<T, U>(\n  main: (input: any) => Promise<U>,\n  ...etc: Array<Function>\n): (input: T | Promise<T>) => Promise<U> {\n  return input => etc.reduceRight(\n    (value, fn) => Promise.resolve(value).then(fn),\n    Promise.resolve(input)\n  ).then(main)\n}\n","/* @flow */\n\nimport { posix, dirname, basename } from 'path'\n\nimport { camelize } from 'inflection'\n\nimport underscore from '../../../utils/underscore'\nimport { compose } from '../../../utils/compose'\n\nconst DOUBLE_COLON = /::/g\n\n/**\n * @private\n */\nconst formatName: (source: string) => string = compose(\n  (name: string) => name.replace(DOUBLE_COLON, '$'),\n  camelize,\n  underscore,\n  (name: string) => posix.join(\n    dirname(name),\n    basename(name, '.js')\n  )\n)\n\nexport default formatName\n","/* @flow */\n\nimport { sep, posix, basename, join as joinPath } from 'path'\n\nimport { camelize, capitalize, pluralize } from 'inflection'\n\nimport { mkdir, writeFile, appendFile } from '../../fs'\nimport chain from '../../../utils/chain'\nimport tryCatch from '../../../utils/try-catch'\nimport underscore from '../../../utils/underscore'\nimport { compose } from '../../../utils/compose'\n\nimport formatName from './format-name'\n\n/**\n * @private\n */\nfunction createExportStatement(\n  name: string,\n  path: string,\n  isDefault: boolean = true\n): Buffer {\n  const normalized = posix.join(...path.split(sep))\n  let data\n\n  if (isDefault) {\n    data = `export {\\n  default as ${name}\\n} from '../${normalized}';\\n\\n`\n  } else {\n    data = `export {\\n  ${name}\\n} from '../${normalized}';\\n\\n`\n  }\n\n  return Buffer.from(data)\n}\n\n/**\n * @private\n */\nfunction createWriter(file: string) {\n  const writerFor = (\n    type: string,\n    handleWrite: void | (value: string) => Promise<void>\n  ) => (value: Array<string>) => {\n    const formatSymbol = compose(str => str + capitalize(type), formatName)\n\n    return Promise.all(\n      value.map(item => {\n        if (handleWrite) {\n          return handleWrite(item)\n        }\n\n        const path = joinPath('app', pluralize(type), item)\n        const symbol = formatSymbol(item)\n\n        return appendFile(file, createExportStatement(symbol, path))\n      })\n    )\n  }\n\n  return {\n    controllers: writerFor('controller'),\n    serializers: writerFor('serializer'),\n\n    models: writerFor('model', async item => {\n      const path = joinPath('app', 'models', item)\n      const name = formatName(item)\n\n      return appendFile(file, createExportStatement(name, path))\n    }),\n\n    migrations: writerFor('migration', async (item) => {\n      const path = joinPath('db', 'migrate', item)\n      const name = chain(item)\n        .pipe(str => basename(str, '.js'))\n        .pipe(underscore)\n        .pipe(str => str.substr(17))\n        .pipe(str => camelize(str, true))\n        .value()\n\n      await appendFile(file, createExportStatement(\n        `up as ${name}Up`,\n        path,\n        false\n      ))\n\n      await appendFile(file, createExportStatement(\n        `down as ${name}Down`,\n        path,\n        false\n      ))\n    })\n  }\n}\n\n/**\n * @private\n */\nexport default async function createManifest(\n  dir: string,\n  assets: Map<string, Array<string> | string>,\n  { useStrict }: { useStrict: boolean }\n): Promise<void> {\n  const dist = joinPath(dir, 'dist')\n  const file = joinPath(dist, 'index.js')\n  const writer = createWriter(file)\n\n  await tryCatch(() => mkdir(dist))\n  await writeFile(file, Buffer.from(useStrict ? '\\'use strict\\';\\n\\n' : ''))\n\n  await Promise.all(\n    Array\n      .from(assets)\n      .map(([key, value]) => {\n        const write = Reflect.get(writer, key)\n\n        if (write) {\n          return write(value)\n        } else if (!write && typeof value === 'string') {\n          return appendFile(file, createExportStatement(key, value))\n        }\n\n        return Promise.resolve()\n      })\n  )\n}\n","/* @flow */\n\nimport * as path from 'path'\n\nimport { readFile } from '../../fs'\n\ntype BabelConfig = {\n  presets?: Array<string>;\n  plugins?: Array<string>;\n}\n\nasync function readBabelConfig(root: string): Promise<BabelConfig> {\n  let data = await readFile(path.join(root, '.babelrc'))\n\n  data = data.toString('utf8')\n  return JSON.parse(data)\n}\n\nexport default readBabelConfig\n","/* @flow */\n\nimport * as path from 'path'\n\nimport template from '../../template'\nimport { writeFile } from '../../fs'\n\n/**\n * @private\n */\nexport default async function createBootScript(dir: string, {\n  useStrict\n}: {\n  useStrict: boolean;\n}): Promise<void> {\n  let data = template`\n    const http = require('http');\n\n    const bundle = require('./bundle');\n\n    const { env: { PORT } } = process;\n    const hasIPC = typeof process.send === 'function';\n    const config = Object.assign({}, bundle.config, {\n      path: process.cwd(),\n      database: bundle.database,\n    });\n\n    let server;\n\n    module.exports = new bundle.Application(config)\n      .then(app => {\n        if (hasIPC) {\n          process.send('ready');\n        } else {\n          process.emit('ready');\n        }\n\n        if (app.adapter.type === 'http') {\n          server = http.createServer((request, response) => {\n            app.exec(request, response);\n          });\n          server.listen(PORT);\n        }\n\n        return app\n          .on('error', err => {\n            setImmediate(() => {\n              app.logger.error(err);\n            });\n          })\n          .on('request:error', (request, response, err) => {\n            setImmediate(() => {\n              app.logger.error(err);\n            });\n          })\n          .on('request:complete', (request, response) => {\n            setImmediate(() => {\n              app.logger.info(\\`\\${request.method} \\${response.statusCode} \\`);\n            });\n          });\n      })\n      .catch(err => {\n        if (hasIPC) {\n          process.send({\n            error: err ? err.stack : void 0,\n            message: 'error'\n          });\n        } else {\n          process.emit('error', err);\n        }\n      });\n  `\n\n  if (useStrict) {\n    data = `'use strict';\\n\\n${data}`\n  }\n\n  await writeFile(path.join(dir, 'dist', 'boot.js'), Buffer.from(data))\n}\n","/* @flow */\n\nimport * as os from 'os'\nimport * as path from 'path'\n\nimport lux from 'rollup-plugin-lux'\nimport json from 'rollup-plugin-json'\nimport alias from 'rollup-plugin-alias'\nimport babel from 'rollup-plugin-babel'\nimport eslint from 'rollup-plugin-eslint'\nimport resolve from 'rollup-plugin-node-resolve'\nimport { rollup } from 'rollup'\n\nimport { rmrf, readdir, readdirRec, isJSFile } from '../fs'\nimport template from '../template'\nimport { NODE_ENV } from '../../constants'\n\nimport onwarn from './utils/handle-warning'\nimport isExternal from './utils/is-external'\nimport createManifest from './utils/create-manifest'\nimport readBabelConfig from './utils/read-babel-config'\nimport createBootScript from './utils/create-boot-script'\n\n/**\n * @private\n */\ntype Options = {\n  local?: string;\n  useStrict?: boolean;\n}\n\nlet cache\n\n/**\n * @private\n */\nexport async function compile(\n  dir: string,\n  env: string,\n  opts: Options = {}\n): Promise<void> {\n  const { useStrict = false } = opts\n  const local = opts.local || path.join(__dirname, '..', 'src', 'index.js')\n  const entry = path.join(dir, 'dist', 'index.js')\n  const external = isExternal(dir)\n  let banner\n\n  const assets = await Promise.all([\n    readdir(path.join(dir, 'app', 'models')),\n    readdir(path.join(dir, 'db', 'migrate')),\n    readdirRec(path.join(dir, 'app', 'controllers')),\n    readdirRec(path.join(dir, 'app', 'serializers'))\n  ]).then(types => {\n    let [\n      models,\n      migrations,\n      controllers,\n      serializers\n    ] = types\n\n    models = models.filter(isJSFile)\n    migrations = migrations.filter(isJSFile)\n    controllers = controllers.filter(isJSFile)\n    serializers = serializers.filter(isJSFile)\n\n    return new Map([\n      ['Application', path.join('app', 'index.js')],\n      ['config', path.join('config', 'environments', `${env}.js`)],\n      ['controllers', controllers],\n      ['database', path.join('config', 'database.js')],\n      ['migrations', migrations],\n      ['models', models],\n      ['routes', path.join('app', 'routes.js')],\n      ['seed', path.join('db', 'seed.js')],\n      ['serializers', serializers]\n    ])\n  })\n\n  await Promise.all([\n    createManifest(dir, assets, {\n      useStrict\n    }),\n    createBootScript(dir, {\n      useStrict\n    })\n  ])\n\n  const aliases = {\n    app: path.posix.join('/', ...dir.split(path.sep), 'app'),\n    LUX_LOCAL: path.posix.join('/', ...local.split(path.sep))\n  }\n\n  if (os.platform() === 'win32') {\n    const [volume] = dir\n    const prefix = `${volume}:/`\n\n    Object.assign(aliases, {\n      app: aliases.app.replace(prefix, ''),\n      LUX_LOCAL: aliases.LUX_LOCAL.replace(prefix, '')\n    })\n  }\n\n  const bundle = await rollup({\n    entry,\n    onwarn,\n    external,\n    cache,\n    plugins: [\n      alias({\n        resolve: ['.js'],\n        ...aliases\n      }),\n      json(),\n      resolve(),\n      eslint({\n        cwd: dir,\n        parser: 'babel-eslint',\n        useEslintrc: false,\n        include: [\n          path.join(dir, 'app', '**'),\n        ],\n        exclude: [\n          path.join(dir, 'package.json'),\n          path.join(local, '..', '**')\n        ]\n      }),\n      babel({\n        ...(await readBabelConfig(dir)),\n        babelrc: false,\n      }),\n      lux(path.resolve(path.sep, dir, 'app'))\n    ]\n  })\n\n  if (NODE_ENV === 'development') {\n    cache = bundle\n  }\n\n  await rmrf(entry)\n\n  banner = template`\n    const srcmap = require('source-map-support').install({\n      environment: 'node'\n    });\n  `\n\n  if (useStrict) {\n    banner = `'use strict';\\n\\n${banner}`\n  }\n\n  return bundle.write({\n    banner,\n    dest: path.join(dir, 'dist', 'bundle.js'),\n    format: 'cjs',\n    sourceMap: true,\n    useStrict: false\n  })\n}\n\nexport { default as onwarn } from './utils/handle-warning'\n","import Ora from 'ora'\n\nimport { CWD, NODE_ENV } from '../../../constants'\nimport { compile } from '../../compiler'\n\nexport async function build(useStrict: boolean = false): Promise<void> {\n  const spinner = new Ora({\n    text: 'Building your application...',\n    spinner: 'dots'\n  })\n\n  spinner.start()\n\n  await compile(CWD, NODE_ENV, {\n    useStrict\n  })\n\n  spinner.stop()\n}\n","const drivers = new Map([\n  ['postgres', 'pg'],\n  ['sqlite', 'sqlite3'],\n  ['mysql', 'mysql2'],\n  ['mariadb', 'mariasql'],\n  ['oracle', 'oracle']\n])\n\nexport default function driverFor(database = 'sqlite') {\n  return drivers.get(database) || 'sqlite3'\n}\n","/* @flow */\n\nimport { classify } from 'inflection'\n\nimport template from '../../template'\nimport chain from '../../../utils/chain'\nimport underscore from '../../../utils/underscore'\n\n/**\n * @private\n */\nexport default (name: string): string => {\n  const normalized = chain(name)\n    .pipe(underscore)\n    .pipe(classify)\n    .value()\n\n  return template`\n    import { Application } from 'lux-framework';\n\n    class ${normalized} extends Application {\n\n    }\n\n    export default ${normalized};\n  `\n}\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (name: string, env: string): string => {\n  const isTestENV = env === 'test'\n  const isProdENV = env === 'production'\n\n  return template`\n    export default {\n      logging: {\n        level: ${isProdENV ? '\\'INFO\\'' : '\\'DEBUG\\''},\n        format: ${isProdENV ? '\\'json\\'' : '\\'text\\''},\n        enabled: ${(!isTestENV).toString()},\n\n        filter: {\n          params: []\n        }\n      }\n    };\n  `\n}\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  export default function routes() {\n\n  }\n`\n","/* @flow */\n\nexport default function indent(amount: number = 1): string {\n  return ' '.repeat(amount)\n}\n","/* @flow */\n\nimport indent from '../utils/indent'\nimport underscore from '../../../utils/underscore'\n\n/**\n * @private\n */\nexport default (name: string, driver: string): string => {\n  const schemaName = underscore(name)\n  let driverName = driver\n  let template = 'export default {\\n'\n  let username\n\n  if (!driverName) {\n    driverName = 'sqlite3'\n  }\n\n  if (driverName === 'pg') {\n    username = 'postgres'\n  } else if (driverName !== 'pg' && driverName !== 'sqlite3') {\n    username = 'root'\n  }\n\n  ['development', 'test', 'production'].forEach(environment => {\n    template += (`${indent(2)}${environment}: {\\n`)\n\n    if (driverName !== 'sqlite3') {\n      template += (`${indent(4)}pool: 5,\\n`)\n    }\n\n    template += (`${indent(4)}driver: '${driverName}',\\n`)\n\n    if (username) {\n      template += (`${indent(4)}username: '${username}',\\n`)\n    }\n\n    switch (environment) {\n      case 'development':\n        template += (`${indent(4)}database: '${schemaName}_dev'\\n`)\n        break\n\n      case 'test':\n        template += (`${indent(4)}database: '${schemaName}_test'\\n`)\n        break\n\n      case 'production':\n        template += (`${indent(4)}database: '${schemaName}_prod'\\n`)\n        break\n\n      default:\n        template += (`${indent(4)}database: '${schemaName}_${environment}'\\n`)\n        break\n    }\n\n    template += (`${indent(2)}}`)\n\n    if (environment !== 'production') {\n      template += ',\\n\\n'\n    }\n  })\n\n  template += '\\n};\\n'\n\n  return template\n}\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  export default async function seed() {\n\n  }\n`\n","/* @flow */\n\nimport { version, devDependencies } from '../../../../package.json'\nimport template from '../../template'\n\nconst LUX_VERSION: string = version\nconst BABEL_PRESET_VERSION: string = devDependencies['babel-preset-lux']\n\n/**\n * @private\n */\nexport default (name: string): string => template`\n  {\n    \"name\": \"${name}\",\n    \"version\": \"0.0.1\",\n    \"description\": \"\",\n    \"scripts\": {\n      \"start\": \"lux serve\",\n      \"test\": \"lux test\"\n    },\n    \"author\": \"\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"babel-core\": \"6.17.0\",\n      \"babel-preset-lux\": \"${BABEL_PRESET_VERSION}\",\n      \"knex\": \"0.12.6\",\n      \"lux-framework\": \"${LUX_VERSION}\"\n    },\n    \"engines\": {\n      \"node\": \">= 6.0\"\n    }\n  }\n`\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  {\n    \"presets\": [\"lux\"]\n  }\n`\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  {\n    \"parser\": \"babel-eslint\",\n    \"extends\": \"eslint:recommended\",\n    \"env\": {\n      \"node\": true\n    },\n    \"globals\": {\n      \"Map\": true,\n      \"Set\": true,\n      \"Proxy\": true,\n      \"Promise\": true,\n      \"Reflect\": true,\n      \"WeakMap\": true,\n      \"WeakSet\": true,\n      \"Iterable\": true\n    }\n  }\n`\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (name: string): string => template`\n  # ${name}\n\n  ## Installation\n\n  *   \\`git clone https://github.com/<this-repository>\\`\n  *   \\`cd ${name}\\`\n  *   \\`npm install\\`\n\n  ## Running / Development\n\n  *   \\`lux serve\\`\n\n  ## Testing\n\n  *   \\`lux test\\`\n\n  ## Further Reading / Useful Links\n  *   [Lux](https://github.com/postlight/lux/)\n  *   [Chai](http://chaijs.com/) / [Mocha](http://mochajs.org/)\n`\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  The MIT License (MIT)\n\n  Copyright (c) 2016\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n`\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  # See http://help.github.com/ignore-files/ for more about ignoring files.\n\n  # dependencies\n  /node_modules\n\n  # build\n  /dist\n\n  # logs\n  /log\n  npm-debug.log\n\n  # misc\n  *.DS_Store\n`\n","/* @flow */\n\nimport { createInterface } from 'readline'\n\nconst YES = /^y(es)?$/i\n\nexport default function createPrompt() {\n  const prompt = createInterface({\n    input: process.stdin,\n    output: process.stdout\n  })\n\n  prompt.setPrompt('')\n\n  return {\n    question(text: string): Promise<boolean> {\n      return new Promise(resolve => {\n        prompt.question(text, answer => {\n          resolve(YES.test(answer))\n        })\n      })\n    },\n\n    close(): void {\n      prompt.close()\n    }\n  }\n}\n","/* @flow */\n\nimport { dim } from 'chalk'\n\nimport template from '../../template'\n\n/**\n * TODO: Update the 'routes.js' file when generating a resource within a\n *       namespace.\n */\nexport const NAMESPACED_RESOURCE_MESSAGE = template`\n\n  🎉  It looks like the resource you generated is within a namespace!\n\n  Lux will only update your 'routes.js' file if you generate a resource at the\\\n  root namespace (i.e 'lux generate resource users').\n\n  In order to access the resource you have created, remember to manually update\\\n  your 'routes.js' file.\n\n    Example:\n\n    export default function routes() {\n      ${dim('// this resource will be accessible at /users')}\n      this.resource('users');\n\n      this.namespace('admin', function () {\n        ${dim('// this resource will be accessible at /admin/users')}\n        this.resource('users');\n      });\n    }\n\n`\n","/* @flow */\n\nexport const UNIQUE_CONSTRAINT = /UNIQUE\\sCONSTRAINT/ig\n\nexport const VALID_DRIVERS = [\n  'pg',\n  'sqlite3',\n  'mssql',\n  'mysql',\n  'mysql2',\n  'mariasql',\n  'strong-oracle',\n  'oracle'\n]\n\nexport const TYPE_ALIASES = new Map([\n  ['enu', 'array'],\n  ['enum', 'array'],\n\n  ['json', 'object'],\n  ['jsonb', 'object'],\n\n  ['binary', 'buffer'],\n\n  ['bool', 'boolean'],\n  ['boolean', 'boolean'],\n\n  ['time', 'date'],\n  ['date', 'date'],\n  ['datetime', 'date'],\n\n  ['text', 'string'],\n  ['uuid', 'string'],\n  ['string', 'string'],\n  ['varchar', 'string'],\n\n  ['int', 'number'],\n  ['float', 'number'],\n  ['integer', 'number'],\n  ['decimal', 'number'],\n  ['floating', 'number'],\n  ['bigInteger', 'number']\n])\n","/* @flow */\n\nimport { FreezeableMap, FreezeableSet } from '../freezeable'\n\nimport type { Level, Format } from './index'\n\nexport const DEBUG = 'DEBUG'\nexport const INFO = 'INFO'\nexport const WARN = 'WARN'\nexport const ERROR = 'ERROR'\n\nexport const FORMATS: FreezeableSet<Format> = (\n  new FreezeableSet(['text', 'json'])\n)\n\nFORMATS.freeze()\n\nexport const LEVELS: FreezeableMap<Level, number> = (\n  new FreezeableMap([\n    [DEBUG, 0],\n    [INFO, 1],\n    [WARN, 2],\n    [ERROR, 3],\n  ])\n)\n\nLEVELS.freeze()\n","/* @flow */\n\nconst METHOD_MISSING = typeof Object.entries !== 'function'\n\n/**\n * @private\n */\nexport default function entries(source: Object): Array<[string, any]> {\n  if (METHOD_MISSING) {\n    const keys = Object.keys(source)\n    const result = new Array(keys.length)\n\n    return keys.reduce((prev, key, idx) => {\n      const next = prev\n      const entry = new Array(2)\n\n      entry[0] = key\n      entry[1] = source[key]\n\n      // $FlowIgnore\n      next[idx] = entry\n\n      return next\n    }, result)\n  }\n\n  return Object.entries(source)\n}\n","/* @flow */\n\n/**\n * Use this util as a brute force way of tricking flow into understanding intent\n * to extend or combine a type in a polymorphic function.\n *\n * In essence, this function allows you to declare your types for a high order\n * function that wraps the inner logic of this function without flow throwing\n * any type errors. This allows you to properly set the return value of the\n * high order function to whatever you like so consumers of the high order\n * function can still benifit from type inference and safety as long as the\n * return value type declaration is 100% accurate.\n *\n * WARNING:\n * This function should rarely be used as it requires a good understanding of\n * the flow type system to ensure that the function this util wraps is still\n * type safe.\n *\n * @private\n */\nexport default function setType(fn: () => any): any {\n  return fn()\n}\n","/* @flow */\n\nimport entries from './entries'\nimport setType from './set-type'\n\n/**\n * @private\n */\nexport default function omit<T: Object>(src: T, ...omitted: Array<string>): T {\n  return setType(() => entries(src)\n    .filter(([key]) => omitted.indexOf(key) < 0)\n    .reduce((result, [key, value]: [string, mixed]) => ({\n      ...result,\n      [key]: value\n    }), {}))\n}\n","/* @flow */\n\nimport ansiRegex from 'ansi-regex'\n\nexport const ANSI = ansiRegex()\nexport const STDOUT = /^(DEBUG|INFO)$/\nexport const STDERR = /^(WARN|ERROR)$/\n","/* @flow */\n\nimport isObject from './is-object'\n\n/**\n * @private\n */\nexport default function stringify(value?: ?mixed, spaces?: number): string {\n  switch (typeof value) {\n    case 'string':\n      return value\n\n    case 'number':\n      return String(value)\n\n    case 'undefined':\n      return 'undefined'\n\n    default:\n      return JSON.stringify(value, null, spaces)\n  }\n}\n\n/**\n * @private\n */\nexport function circular(value?: ?mixed, spaces?: number): string {\n  const cache = new WeakSet()\n\n  switch (typeof value) {\n    case 'string':\n      return value\n\n    case 'number':\n      return String(value)\n\n    case 'undefined':\n      return 'undefined'\n\n    default:\n      return JSON.stringify(value, (key, val) => {\n        if (isObject(val)) {\n          if (cache.has(val)) {\n            return undefined\n          }\n          cache.add(val)\n        }\n        return val\n      }, spaces)\n  }\n}\n","/* @flow */\n\nimport { ANSI } from '../constants'\nimport stringify from '../../../../utils/stringify'\nimport type { Format } from '../../index'\n\nexport default function formatMessage(data?: ?mixed, format: Format): string {\n  if (data instanceof Error) {\n    return data.stack\n  } else if (format === 'json') {\n    return stringify(data).replace(ANSI, '')\n  }\n\n  return stringify(data, 2)\n}\n","/* @flow */\n\nimport { WriteStream } from 'tty'\n\nimport { dim, red, yellow } from 'chalk'\n\nimport { WARN, ERROR } from '../constants'\nimport omit from '../../../utils/omit'\nimport type { Format } from '../index'\n\nimport { STDOUT, STDERR } from './constants'\nimport formatMessage from './utils/format-message'\n\n/**\n * @private\n */\nexport function createWriter(format: Format): (data: any) => void {\n  return function write(data) {\n    const { level, ...etc } = data\n    let { message, timestamp } = etc\n    let output\n\n    if (format === 'json') {\n      output = {}\n\n      if (message && typeof message === 'object' && message.message) {\n        output = {\n          timestamp,\n          level,\n          message: message.message,\n          ...omit(message, 'message')\n        }\n      } else {\n        output = {\n          timestamp,\n          level,\n          message,\n          ...etc\n        }\n      }\n\n      output = formatMessage(output, 'json')\n    } else {\n      let columns = 0\n\n      if (process.stdout instanceof WriteStream) {\n        columns = process.stdout.columns\n      }\n\n      message = formatMessage(message, 'text')\n\n      switch (level) {\n        case WARN:\n          timestamp = yellow(`[${timestamp}]`)\n          break\n\n        case ERROR:\n          timestamp = red(`[${timestamp}]`)\n          break\n\n        default:\n          timestamp = dim(`[${timestamp}]`)\n          break\n      }\n\n      output = `${timestamp} ${message}\\n\\n${dim('-').repeat(columns)}\\n`\n    }\n\n    if (STDOUT.test(level)) {\n      process.stdout.write(`${output}\\n`)\n    } else if (STDERR.test(level)) {\n      process.stderr.write(`${output}\\n`)\n    }\n  }\n}\n","/* @flow */\n\nimport { insertValues } from '../../template'\n\n/**\n * @private\n */\nexport default function line(\n  strings: Array<string>,\n  ...values: Array<mixed>\n): string {\n  return insertValues(strings, ...values)\n    .replace(/(\\r\\n|\\n|\\r|)/gm, '')\n    .replace(/\\s+/g, ' ')\n    .trim()\n}\n","/* @flow */\n\nimport { blue, cyan, magenta, yellow } from 'chalk'\n\nimport line from '../utils/line'\n\n/**\n * @private\n */\nfunction countDigits(num: number) {\n  const digits = Math.floor(Math.log10(num) + 1)\n\n  return digits > 0 && Number.isFinite(digits) ? digits : 1\n}\n\n/**\n * @private\n */\nfunction pad(startTime: number, endTime: number, duration: number) {\n  const maxLength = countDigits(endTime - startTime)\n\n  return ' '.repeat(maxLength - countDigits(duration)) + duration\n}\n\n/**\n * @private\n */\nexport const debugTemplate = ({\n  path,\n  stats,\n  route,\n  method,\n  params,\n  colorStr,\n  startTime,\n  endTime,\n  statusCode,\n  statusMessage,\n  remoteAddress\n}: any) => `\\\n${line`\n  Processed ${cyan(`${method}`)} \"${path}\" from ${remoteAddress}\n  with ${Reflect.apply(colorStr, null, [`${statusCode}`])}\n  ${Reflect.apply(colorStr, null, [`${statusMessage}`])} by ${\n    route\n    ? `${yellow(route.controller.constructor.name)}#${blue(route.action)}`\n    : null\n  }\n`}\n\n${magenta('Params')}\n\n${JSON.stringify(params, null, 2)}\n\n${magenta('Stats')}\n\n${stats.map(stat => {\n  const { type, duration, controller } = stat\n  let { name } = stat\n\n  name = blue(name)\n\n  if (type === 'action') {\n    name = `${yellow(controller)}#${name}`\n  }\n\n  return `${pad(startTime, endTime, duration)} ms ${name}`\n}).join('\\n')}\n${pad(startTime,\n      endTime,\n      stats.reduce((total, { duration }) => total + duration, 0))} ms Total\n${(endTime - startTime).toString()} ms Actual\\\n`\n\n/**\n * @private\n */\nexport const infoTemplate = ({\n  path,\n  method,\n  params,\n  colorStr,\n  startTime,\n  endTime,\n  statusCode,\n  statusMessage,\n  remoteAddress\n}: any) => line`\nProcessed ${cyan(`${method}`)} \"${path}\" ${magenta('Params')} ${\n  JSON.stringify(params)} from ${remoteAddress\n} in ${(endTime - startTime).toString()} ms with ${\n  Reflect.apply(colorStr, null, [`${statusCode}`])\n} ${\n  Reflect.apply(colorStr, null, [`${statusMessage}`])\n}\n`\n","/* @flow */\n\nimport entries from '../../../../utils/entries'\n\n/**\n * @private\n */\nexport default function filterParams(\n  params: Object,\n  ...filtered: Array<string>\n): Object {\n  return entries(params)\n    .map(([key, value]) => [\n      key,\n      filtered.indexOf(key) >= 0 ? '[FILTERED]' : value\n    ])\n    .reduce((result, [key, value]) => ({\n      ...result,\n      [key]: value && typeof value === 'object' && !Array.isArray(value)\n        ? filterParams(value, ...filtered)\n        : value\n    }), {})\n}\n","/* @flow */\n\nimport chalk from 'chalk'\n\nimport { DEBUG } from '../../constants'\nimport { infoTemplate, debugTemplate } from '../templates'\nimport type Logger from '../../index'\nimport type Request from '../../../request'\nimport type Response from '../../../response'\n\nimport filterParams from './filter-params'\n\ntype Options = {\n  request: Request;\n  response: Response;\n  startTime: number;\n}\n\n/**\n * @private\n */\nexport default function logText(logger: Logger, options: Options): void {\n  const { request, response, startTime } = options\n  const endTime = Date.now()\n  const { method, url: { path } } = request\n  const { stats, statusMessage } = response\n  let { params } = request\n  let { statusCode } = response\n  let statusColor\n\n  params = filterParams(params, ...logger.filter.params)\n\n  if (statusCode >= 200 && statusCode < 400) {\n    statusColor = 'green'\n  } else {\n    statusColor = 'red'\n  }\n\n  let colorStr = Reflect.get(chalk, statusColor)\n\n  if (typeof colorStr === 'undefined') {\n    colorStr = (str: string) => str\n  }\n\n  statusCode = String(statusCode)\n\n  const templateData = {\n    path,\n    stats,\n    method,\n    params,\n    colorStr,\n    startTime,\n    endTime,\n    statusCode,\n    statusMessage,\n    remoteAddress: '::1'\n  }\n\n  if (logger.level === DEBUG) {\n    logger.debug(debugTemplate(templateData))\n  } else {\n    logger.info(infoTemplate(templateData))\n  }\n}\n","/* @flow */\n\nimport type Logger from '../../index'\nimport type Request from '../../../request'\nimport type Response from '../../../response'\n\nimport filterParams from './filter-params'\n\nconst MESSAGE = 'Processed Request'\n\ntype Options = {\n  request: Request;\n  response: Response;\n}\n\n/**\n * @private\n */\nexport default function logJSON(logger: Logger, options: Options): void {\n  const { request, response } = options\n  const { method, headers, url: { path } } = request\n  const { statusCode: status } = response\n  const userAgent = headers.get('user-agent')\n  const protocol = 'HTTP/1.1'\n\n  let { params } = request\n  params = filterParams(params, ...logger.filter.params)\n\n  logger.info({\n    message: MESSAGE,\n\n    method,\n    path,\n    params,\n    status,\n    protocol,\n    userAgent,\n    remoteAddress: '::1'\n  })\n}\n","/* @flow */\n\nimport type Request from '../../request'\nimport type Response from '../../response'\nimport type Logger from '../index'\n\nimport logText from './utils/log-text'\nimport logJSON from './utils/log-json'\n\nexport type RequestLogger = (\n  req: Request,\n  res: Response,\n  options: {\n    startTime: number;\n  }\n) => void\n\n/**\n * @private\n */\nexport function createRequestLogger(logger: Logger): RequestLogger {\n  return (req, res, { startTime }) => {\n    if (logger.format === 'json') {\n      logJSON(logger, {\n        startTime,\n        request: req,\n        response: res\n      })\n    } else {\n      logText(logger, {\n        startTime,\n        request: req,\n        response: res\n      })\n    }\n  }\n}\n","/* @flow */\n\nimport { insertValues } from '../../template'\n\nconst PATTERN = /(?:,?`|'|\").+(?:`|'|\"),?/\n\n/**\n * @private\n */\nexport default function sql(\n  strings: Array<string>,\n  ...values: Array<mixed>\n): string {\n  return insertValues(strings, ...values)\n    .split(' ')\n    .map(part => {\n      if (PATTERN.test(part)) {\n        return part\n      }\n\n      return part.toUpperCase()\n    })\n    .join(' ')\n}\n","/* @flow */\n\nimport { LUX_CONSOLE } from '../../constants'\nimport K from '../../utils/k'\n\nimport { LEVELS } from './constants'\nimport { createWriter } from './writer'\nimport { createRequestLogger } from './request-logger'\nimport type { RequestLogger } from './request-logger'\n\nexport type Format = 'text' | 'json'\nexport type LogFunction = (data: string | Object) => void\n\nexport type Level =\n  | 'DEBUG'\n  | 'INFO'\n  | 'WARN'\n  | 'ERROR'\n\nexport type Filter = {\n  params: Array<string>;\n}\n\nexport type Config = {\n  level: Level;\n  format: Format;\n  filter: Filter;\n  enabled: boolean;\n}\n\n/**\n * @class Logger\n * @public\n */\nclass Logger {\n  /**\n   * The level your application should log (DEBUG, INFO, WARN, or ERROR).\n   *\n   * @property level\n   * @type {String}\n   * @public\n   */\n  level: Level;\n\n  /**\n   * The output format of log data (text or json).\n   *\n   * @property format\n   * @type {String}\n   * @public\n   */\n  format: Format;\n\n  /**\n   * Hackers love logs. It's easy to get sensitive user information from log\n   * data if your server has been breached. To prevent leaking sensitive\n   * information in a potential attack, blacklist certain keys that should be\n   * filtered out of the logs.\n   *\n   * ```javascript\n   * // config/environments/development.js\n   * export default {\n   *   logging: {\n   *     level: 'DEBUG',\n   *     format: 'text',\n   *     enabled: true,\n   *     filter: {\n   *       params: ['password']\n   *     }\n   *   }\n   * };\n   * ```\n   *\n   * Now that we've added password to the array of parameters we want to filter\n   * out of the logs, let's try to create a new user.\n   *\n   * ```http\n   * POST /users HTTP/1.1\n   * Content-Type: application/vnd.api+json\n   * Host: 127.0.0.1:4000\n   * Connection: close\n   * User-Agent: Paw/3.0.14 (Macintosh; OS X/10.12.1) GCDHTTPRequest\n   * Content-Length: 188\n   *\n   * {\n   *   \"data\": {\n   *   \"type\": \"users\",\n   *     \"attributes\": {\n   *       \"name\": \"Zachary Golba\",\n   *       \"email\": \"zachary.golba@postlight.com\",\n   *       \"password\": \"vcZxniFYyfnFDcLn%nhe8Vrt\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * The request above will yield the following log message.\n   *\n   * ```text\n   * [2016-12-10T18:28:04.610Z] Processed POST \"/users\" from ::ffff:127.0.0.1\n   * with 201 Created by UsersController#create\n   *\n   * Params\n   *\n   * {\n   *   \"data\": {\n   *     \"type\": \"users\",\n   *     \"attributes\": {\n   *       \"name\": \"Zachary Golba\",\n   *       \"email\": \"zachary.golba@postlight.com\",\n   *       \"password\": \"[FILTERED]\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * It worked! The password value did not leak into the log message.\n   *\n   * @property filter\n   * @type {Object}\n   * @public\n   */\n  filter: Filter;\n\n  /**\n   * A boolean flag that determines whether or not the logger is enabled.\n   *\n   * @property enabled\n   * @type {Boolean}\n   * @public\n   */\n  enabled: boolean;\n\n  /**\n   * Log a message at the DEBUG level.\n   *\n   * ```javascript\n   * logger.debug('Hello World!');\n   * // => [6/4/16 5:46:53 PM] Hello World!\n   * ```\n   *\n   * @method debug\n   * @param {any} data - The data you wish to log.\n   * @return {void}\n   * @public\n   */\n  debug: LogFunction;\n\n  /**\n   * Log a message at the INFO level.\n   *\n   * ```javascript\n   * logger.info('Hello World!');\n   * // => [6/4/16 5:46:53 PM] Hello World!\n   * ```\n   *\n   * @method info\n   * @param {any} data - The data you wish to log.\n   * @return {void}\n   * @public\n   */\n  info: LogFunction;\n\n  /**\n   * Log a message at the WARN level.\n   *\n   * ```javascript\n   * logger.warn('Good Bye World!');\n   * // => [6/4/16 5:46:53 PM] Good Bye World!\n   * ```\n   *\n   * @method warn\n   * @param {any} data - The data you wish to log.\n   * @return {void}\n   * @public\n   */\n  warn: LogFunction;\n\n  /**\n   * Log a message at the ERROR level.\n   *\n   * ```javascript\n   * logger.warn('HELP!');\n   * // => [6/4/16 5:46:53 PM] HELP!\n   * ```\n   *\n   * @method error\n   * @param {any} data - The data you wish to log.\n   * @return {void}\n   * @public\n   */\n  error: LogFunction;\n\n  /**\n   * Internal method used for logging requests.\n   *\n   * @method request\n   * @param {Request} request\n   * @param {Response} response\n   * @param {Object} opts - An options object.\n   * @param {Number} opts.startTime - The timestamp from when the request was\n   * received.\n   * @return {void}\n   * @private\n   */\n  request: RequestLogger;\n\n  constructor({ level, format, filter, enabled }: Config) {\n    let write = K\n    let request = K\n\n    if (!LUX_CONSOLE && enabled) {\n      write = createWriter(format)\n      request = createRequestLogger(this)\n    }\n\n    Object.defineProperties(this, {\n      level: {\n        value: level,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      format: {\n        value: format,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      filter: {\n        value: filter,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      enabled: {\n        value: Boolean(enabled),\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      request: {\n        value: request,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      }\n    })\n\n    const levelNum = LEVELS.get(level) || 0\n\n    LEVELS.forEach((val, key) => {\n      Object.defineProperty(this, key.toLowerCase(), {\n        value: val >= levelNum ? (message: void | ?mixed) => {\n          write({\n            message,\n            level: key,\n            timestamp: this.getTimestamp()\n          })\n        } : K,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n      })\n    })\n  }\n\n  /**\n   * @method getTimestamp\n   * @return {String} The current time as an ISO8601 string.\n   * @private\n   */\n  getTimestamp() {\n    return new Date().toISOString()\n  }\n}\n\nexport default Logger\nexport { default as line } from './utils/line'\nexport { default as sql } from './utils/sql'\n","/* @flow */\n\nimport { green, yellow } from 'chalk'\n\nimport { VALID_DRIVERS } from '../constants'\nimport { line } from '../../logger'\n\n/**\n * @private\n */\nclass InvalidDriverError extends Error {\n  constructor(driver: string) {\n    super(line`\n      Invalid database driver ${yellow(driver)} in ./config/database.js.\n      Please use one of the following database drivers:\n      ${VALID_DRIVERS.map(str => green(str)).join(', ')}.\n    `)\n  }\n}\n\nexport default InvalidDriverError\n","/* @flow */\n\n/**\n * @private\n */\nclass ModelMissingError extends Error {\n  constructor(name: string) {\n    super(`Could not resolve model by name '${name}'`)\n  }\n}\n\nexport default ModelMissingError\n","/* @flow */\n\nimport { green, yellow } from 'chalk'\n\nimport { line } from '../../logger'\n\n/**\n * @private\n */\nclass MigrationsPendingError extends Error {\n  constructor(migrations?: Array<string> = []) {\n    const pending = migrations\n      .map(str => yellow(str.substr(0, str.length - 3)))\n      .join(', ')\n\n    super(line`\n      The following migrations are pending ${pending}.\n      Please run ${green('lux db:migrate')} before starting your application.\n    `)\n  }\n}\n\nexport default MigrationsPendingError\n","/* @flow */\n\ntype ServerError<T: Error> = T & {\n  statusCode: number;\n}\n\n/**\n * @private\n */\nexport default function createServerError<T: Error>(\n  Source: Class<T>,\n  statusCode: number\n): Class<ServerError<T>> {\n  const Target = class extends Source {\n    statusCode: number;\n  }\n\n  Object.defineProperty(Target, 'name', {\n    value: Source.name,\n  })\n\n  Object.defineProperty(Target.prototype, 'statusCode', {\n    value: statusCode,\n  })\n\n  // $FlowIgnore\n  return Target\n}\n","/* @flow */\n\nimport createServerError from '../../../errors/utils/create-server-error'\n\nexport default createServerError(\n  class UniqueConstraintError extends Error {},\n  409\n)\n","/* @flow */\n\nclass ConfigMissingError extends Error {\n  constructor(environment: string) {\n    super(`Database config not found for environment ${environment}.`)\n  }\n}\n\nexport default ConfigMissingError\n","/* @flow */\n\nimport createServerError from '../../../../errors/utils/create-server-error'\nimport stringify from '../../../../utils/stringify'\nimport typeof { Model } from '../../../database'\n\nclass RecordNotFoundError extends Error {\n  constructor({ name, primaryKey }: Model, primaryKeyValue: mixed) {\n    super(\n      `Could not find ${name} with ${primaryKey} ${stringify(primaryKeyValue)}.`\n    )\n  }\n}\n\nexport default createServerError(RecordNotFoundError, 404)\n","/* @flow */\n\nimport { camelize, singularize } from 'inflection'\n\nimport Model from '../../../model'\nimport entries from '../../../../../utils/entries'\nimport underscore from '../../../../../utils/underscore'\nimport promiseHash from '../../../../../utils/promise-hash'\n\n/**\n * @private\n */\nexport default async function buildResults<T: Model>({\n  model,\n  records,\n  relationships\n}: {\n  model: Class<T>,\n  records: Promise<Array<Object>>,\n  relationships: Object\n}): Promise<Array<T>> {\n  const results = await records\n  const pkPattern = new RegExp(`^.+\\\\.${model.primaryKey}$`)\n  let related\n\n  if (!results.length) {\n    return []\n  }\n\n  if (Object.keys(relationships).length) {\n    related = entries(relationships)\n      .reduce((obj, entry) => {\n        const [name, relationship] = entry\n        let foreignKey = camelize(relationship.foreignKey, true)\n\n        if (relationship.through) {\n          const query = relationship.model.select(...relationship.attrs)\n\n          const baseKey = `${relationship.through.tableName}.` +\n            `${singularize(underscore(name))}_id`\n\n          foreignKey = `${relationship.through.tableName}.` +\n            `${relationship.foreignKey}`\n\n          query.snapshots.push(\n            ['select', [\n              `${baseKey} as ${camelize(baseKey.split('.').pop(), true)}`,\n              `${foreignKey} as ${camelize(foreignKey.split('.').pop(), true)}`\n            ]],\n\n            ['innerJoin', [\n              relationship.through.tableName,\n              `${relationship.model.tableName}.` +\n                `${relationship.model.primaryKey}`,\n              '=',\n              baseKey\n            ]],\n\n            ['whereIn', [\n              foreignKey,\n              results.map(({ id }) => id)\n            ]]\n          )\n\n          return {\n            ...obj,\n            [name]: query\n          }\n        }\n\n        return {\n          ...obj,\n          [name]: relationship.model\n            .select(...relationship.attrs)\n            .where({\n              [foreignKey]: results.map(({ id }) => id)\n            })\n        }\n      }, {})\n\n    related = await promiseHash(related)\n  }\n\n  return results.map(record => {\n    if (related) {\n      entries(related)\n        .forEach(([name, relatedResults]: [string, Array<Model>]) => {\n          const relationship = model.relationshipFor(name)\n\n          if (relationship) {\n            let { foreignKey } = relationship\n\n            foreignKey = camelize(foreignKey, true)\n\n            Reflect.set(record, name, relatedResults.filter(({\n              rawColumnData\n            }) => {\n              const fk = Reflect.get(rawColumnData, foreignKey)\n              const pk = Reflect.get(record, model.primaryKey)\n\n              return fk === pk\n            }))\n          }\n        })\n    }\n\n    const instance = Reflect.construct(model, [\n      entries(record)\n        .reduce((r, entry) => {\n          let [key, value] = entry\n\n          if (!value && pkPattern.test(key)) {\n            return r\n          } else if (key.indexOf('.') >= 0) {\n            const [a, b] = key.split('.')\n            let parent: ?Object = r[a]\n\n            if (!parent) {\n              parent = {}\n            }\n\n            key = a\n            value = {\n              ...parent,\n              [b]: value\n            }\n          }\n\n          return {\n            ...r,\n            [key]: value\n          }\n        }, {})\n    ])\n\n    instance.currentChangeSet.persist()\n\n    return instance\n  })\n}\n","/* @flow */\n\nimport { RecordNotFoundError } from '../errors'\nimport { sql } from '../../../logger'\nimport type Query from '../index'\n\nimport { RUNNERS } from './constants'\nimport getFindParam from './utils/get-find-param'\nimport buildResults from './utils/build-results'\n\n/**\n * @private\n */\nexport function createRunner(target: Query<*>, opts: {\n  resolve?: (value: any) => void;\n  reject?: (error: Error) => void;\n}): void {\n  if (opts.resolve && opts.reject) {\n    const { resolve, reject } = opts\n    let didRun = false\n\n    RUNNERS.set(target, async () => {\n      let results\n      const {\n        model,\n        isFind,\n        snapshots,\n        collection,\n        shouldCount,\n        relationships\n      } = target\n\n      if (didRun) {\n        return\n      }\n\n      didRun = true\n\n      if (!shouldCount && !snapshots.some(([name]) => name === 'select')) {\n        target.select(...target.model.attributeNames)\n      }\n\n      const records: any = snapshots.reduce((\n        query,\n        snapshot\n      ) => {\n        let [name, params] = snapshot\n\n        if (!shouldCount && name === 'includeSelect') {\n          name = 'select'\n        }\n\n        const method = Reflect.get(query, name)\n\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n\n        return Reflect.apply(method, query, params)\n      }, model.table())\n\n      if (model.store.debug) {\n        records.on('query', () => {\n          setImmediate(() => model.logger.debug(sql`${records.toString()}`))\n        })\n      }\n\n      if (shouldCount) {\n        let [{ countAll: count }] = await records\n        count = parseInt(count, 10)\n\n        resolve(Number.isFinite(count) ? count : 0)\n      } else {\n        results = await buildResults({\n          model,\n          records,\n          relationships\n        })\n\n        if (collection) {\n          resolve(results)\n        } else {\n          const [result] = results\n\n          if (!result && isFind) {\n            const err = new RecordNotFoundError(model, getFindParam(target))\n\n            reject(err)\n          }\n\n          resolve(result)\n        }\n      }\n    })\n  }\n}\n\nexport function runQuery(target: Query<*>): void {\n  const runner = RUNNERS.get(target)\n\n  if (runner) {\n    runner()\n  }\n}\n","/* @flow */\n\nimport { camelize } from 'inflection'\n\nimport type { Model } from '../../index'\nimport type { Relationship$opts } from '../index'\n\n/**\n * @private\n */\nasync function getHasManyThrough(owner: Model, {\n  model,\n  inverse,\n  through,\n  foreignKey: baseKey\n}: Relationship$opts): Promise<Array<Model>> {\n  const inverseOpts = model.relationshipFor(inverse)\n  let value = []\n\n  if (through && inverseOpts) {\n    const foreignKey = camelize(inverseOpts.foreignKey, true)\n    const records = await through\n      .select(baseKey, foreignKey)\n      .where({\n        [baseKey]: owner.getPrimaryKey()\n      })\n\n    if (records.length) {\n      value = await model.where({\n        [model.primaryKey]: records\n          .map(record => Reflect.get(record, foreignKey))\n          .filter(Boolean)\n      })\n    }\n  }\n\n  return value\n}\n\n/**\n * @private\n */\nexport function getHasOne(owner: Model, {\n  model,\n  foreignKey\n}: Relationship$opts) {\n  return model.first().where({\n    [foreignKey]: owner.getPrimaryKey()\n  })\n}\n\n/**\n * @private\n */\nexport function getHasMany(owner: Model, opts: Relationship$opts) {\n  const { model, through, foreignKey } = opts\n\n  return through ? getHasManyThrough(owner, opts) : model.where({\n    [foreignKey]: owner.getPrimaryKey()\n  })\n}\n\n/**\n * @private\n */\nexport function getBelongsTo(owner: Model, {\n  model,\n  foreignKey\n}: Relationship$opts) {\n  const foreignValue = Reflect.get(owner, foreignKey)\n\n  return foreignValue ? model.find(foreignValue) : Promise.resolve(null)\n}\n","/* @flow */\n\nimport type { Model } from '../../index' // eslint-disable-line no-unused-vars\n\n/**\n * @private\n */\nfunction unassociateOne<T: void | ?Model>(value: T, foreignKey: string): T {\n  if (value) {\n    Reflect.set(value, foreignKey, null)\n  }\n\n  return value\n}\n\n/**\n * @private\n */\nexport default function unassociate<T: Model, U: Array<T>>(\n  value: U,\n  foreignKey: string\n): U | Array<T> {\n  return value.map(record => unassociateOne(record, foreignKey))\n}\n","/* @flow */\n\nimport type { Model } from '../../index'\nimport type { Relationship$opts } from '../index'\n\n/**\n * @private\n */\nexport function setHasManyInverse(owner: Model, value: Array<Model>, {\n  inverse,\n  foreignKey,\n  inverseModel\n}: Relationship$opts & {\n  inverseModel: Class<Model>;\n}) {\n  const primaryKey = Reflect.get(owner, owner.constructor.primaryKey)\n  const { type: inverseType } = inverseModel.relationshipFor(inverse)\n\n  for (const record of value) {\n    let { currentChangeSet: changeSet } = record\n\n    if (owner !== changeSet.get(inverse)) {\n      if (changeSet.isPersisted) {\n        changeSet = changeSet.applyTo(record)\n      }\n\n      changeSet.set(inverse, owner)\n\n      if (inverseType === 'belongsTo') {\n        Reflect.set(record, foreignKey, primaryKey)\n      }\n    }\n  }\n}\n\n/**\n * @private\n */\nexport function setHasOneInverse(owner: Model, value?: ?Model, {\n  inverse,\n  foreignKey,\n  inverseModel\n}: Relationship$opts & {\n  inverseModel: Class<Model>;\n}) {\n  if (value) {\n    const { type: inverseType } = inverseModel.relationshipFor(inverse)\n    let inverseValue = value.currentChangeSet.get(inverse)\n\n    if (inverseType === 'hasMany') {\n      if (!Array.isArray(inverseValue)) {\n        inverseValue = []\n      }\n\n      if (!inverseValue.includes(owner)) {\n        inverseValue.push(owner)\n      }\n    } else if (owner !== inverseValue) {\n      inverseValue = owner\n\n      if (inverseType === 'belongsTo') {\n        Reflect.set(value, foreignKey, inverseValue.getPrimaryKey())\n      }\n    }\n\n    let { currentChangeSet: changeSet } = value\n\n    if (changeSet.isPersisted) {\n      changeSet = changeSet.applyTo(value)\n    }\n\n    changeSet.set(inverse, inverseValue || null)\n  }\n}\n","/* @flow */\n\nimport type { Model } from '../../index'\nimport type { Relationship$opts } from '../index'\n\nimport unassociate from './unassociate'\nimport validateType from './validate-type'\nimport { setHasOneInverse, setHasManyInverse } from './inverse-setters'\n\n/**\n * @private\n */\nexport function setHasMany(owner: Model, key: string, value: Array<Model>, {\n  type,\n  model,\n  inverse,\n  foreignKey\n}: Relationship$opts) {\n  let { currentChangeSet: changeSet } = owner\n\n  if (validateType(model, value)) {\n    let prevValue = changeSet.get(key)\n\n    if (Array.isArray(prevValue)) {\n      prevValue = unassociate(prevValue, foreignKey)\n\n      if (Array.isArray(prevValue)) {\n        prevValue\n          .filter(prev => (\n            !value.find(next => prev.getPrimaryKey() === next.getPrimaryKey())\n          ))\n          .forEach(record => owner.prevAssociations.add(record))\n      }\n    }\n\n    if (changeSet.isPersisted) {\n      changeSet = changeSet.applyTo(owner)\n    }\n\n    changeSet.set(key, value)\n\n    setHasManyInverse(owner, value, {\n      type,\n      model,\n      inverse,\n      foreignKey,\n      inverseModel: model\n    })\n  }\n}\n\n/**\n * @private\n */\nexport function setHasOne(owner: Model, key: string, value?: ?Model, {\n  type,\n  model,\n  inverse,\n  foreignKey\n}: Relationship$opts) {\n  let valueToSet = value\n\n  if (value && typeof value === 'object' && !model.isInstance(value)) {\n    valueToSet = Reflect.construct(model, [valueToSet])\n  }\n\n  let { currentChangeSet: changeSet } = owner\n\n  if (valueToSet) {\n    if (validateType(model, valueToSet)) {\n      if (changeSet.isPersisted) {\n        changeSet = changeSet.applyTo(owner)\n      }\n\n      changeSet.set(key, valueToSet)\n    }\n  } else {\n    if (changeSet.isPersisted) {\n      changeSet = changeSet.applyTo(owner)\n    }\n\n    changeSet.set(key, null)\n  }\n\n  setHasOneInverse(owner, valueToSet, {\n    type,\n    model,\n    inverse,\n    foreignKey,\n    inverseModel: model\n  })\n}\n\n/**\n * @private\n */\nexport function setBelongsTo(owner: Model, key: string, value?: ?Model, {\n  type,\n  model,\n  inverse,\n  foreignKey\n}: Relationship$opts) {\n  setHasOne(owner, key, value, {\n    type,\n    model,\n    inverse,\n    foreignKey\n  })\n\n  if (value) {\n    Reflect.set(owner, foreignKey, Reflect.get(value, model.primaryKey))\n  } else {\n    Reflect.set(owner, foreignKey, null)\n  }\n}\n","/* @flow */\n\n// eslint-disable-next-line no-duplicate-imports\nimport { tableFor } from '../../index'\nimport type { Model } from '../../index'\nimport type { Relationship$opts } from '../interfaces'\n\ntype Params = {\n  record: Model;\n  value: ?Model | Array<Model>;\n  opts: Relationship$opts;\n  trx: Object;\n}\n\nfunction updateHasOne({\n  record,\n  value,\n  opts,\n  trx\n}: Params): Array<Object> {\n  const recordPrimaryKey = record.getPrimaryKey()\n\n  if (value) {\n    if (value instanceof opts.model) {\n      return [\n        tableFor(opts.model, trx)\n          .update(opts.foreignKey, null)\n          .where(\n            `${opts.model.tableName}.${opts.foreignKey}`,\n            recordPrimaryKey\n          )\n          .whereNot(\n            `${opts.model.tableName}.${opts.model.primaryKey}`,\n            value.getPrimaryKey()\n          ),\n        tableFor(opts.model, trx)\n          .update(opts.foreignKey, recordPrimaryKey)\n          .where(\n            `${opts.model.tableName}.${opts.model.primaryKey}`,\n            value.getPrimaryKey()\n          )\n      ]\n    }\n  } else {\n    return [\n      tableFor(opts.model, trx)\n        .update(opts.foreignKey, null)\n        .where(\n          `${opts.model.tableName}.${opts.foreignKey}`,\n          recordPrimaryKey\n        )\n    ]\n  }\n\n  return []\n}\n\nfunction updateHasMany({\n  record,\n  value,\n  opts,\n  trx\n}: Params): Array<Object> {\n  const recordPrimaryKey = record.getPrimaryKey()\n\n  if (Array.isArray(value) && value.length) {\n    return [\n      tableFor(opts.model, trx)\n        .update(opts.foreignKey, null)\n        .where(\n          `${opts.model.tableName}.${opts.foreignKey}`,\n          recordPrimaryKey\n        )\n        .whereNotIn(\n          `${opts.model.tableName}.${opts.model.primaryKey}`,\n          value.map(item => item.getPrimaryKey())\n        ),\n      tableFor(opts.model, trx)\n        .update(opts.foreignKey, recordPrimaryKey)\n        .whereIn(\n          `${opts.model.tableName}.${opts.model.primaryKey}`,\n          value.map(item => item.getPrimaryKey())\n        )\n    ]\n  }\n\n  return [\n    tableFor(opts.model, trx)\n      .update(opts.foreignKey, null)\n      .where(\n        `${opts.model.tableName}.${opts.foreignKey}`,\n        recordPrimaryKey\n      )\n  ]\n}\n\nfunction updateBelongsTo({\n  record,\n  value,\n  opts,\n  trx\n}: Params): Array<Object> {\n  if (value instanceof opts.model) {\n    const inverseOpts = opts.model.relationshipFor(opts.inverse)\n    const foreignKeyValue = value.getPrimaryKey()\n\n    Reflect.set(record, opts.foreignKey, foreignKeyValue)\n\n    if (inverseOpts && inverseOpts.type === 'hasOne') {\n      return [\n        tableFor(record, trx)\n          .update(opts.foreignKey, null)\n          .where(opts.foreignKey, foreignKeyValue)\n          .whereNot(\n            `${record.constructor.tableName}.${record.constructor.primaryKey}`,\n            record.getPrimaryKey()\n          )\n      ]\n    }\n  }\n\n  return []\n}\n\n/**\n * @private\n */\nexport default function updateRelationship(\n  record: Model,\n  name: string,\n  trx: Object\n): Array<Object> {\n  const opts = record.constructor.relationshipFor(name)\n\n  if (!opts) {\n    const {\n      constructor: {\n        name: className\n      }\n    } = record\n\n    throw new Error(`Could not find relationship '${name} on '${className}`)\n  }\n\n  const { dirtyRelationships } = record\n\n  if (!dirtyRelationships.has(name)) {\n    return []\n  }\n\n  const value = dirtyRelationships.get(name)\n\n  switch (opts.type) {\n    case 'hasOne':\n      return updateHasOne({\n        record,\n        value,\n        opts,\n        trx\n      })\n\n    case 'hasMany':\n      return updateHasMany({\n        record,\n        value,\n        opts,\n        trx\n      })\n\n    default:\n      return updateBelongsTo({\n        record,\n        value,\n        opts,\n        trx\n      })\n  }\n}\n","/* @flow */\n\nimport hasOwnProperty from './has-own-property'\n\ntype Proxy$get<T> = (target: T, key: string, receiver: Proxy<T>) => any\n\n/**\n * @private\n */\nexport function trapGet<T>(traps: Object): Proxy$get<T> {\n  return (target, key, receiver) => {\n    if (key === 'unwrap') {\n      return () => target\n    }\n\n    if (hasOwnProperty(traps, key)) {\n      const value = Reflect.get(traps, key)\n\n      if (typeof value === 'function') {\n        return value.bind(receiver, target)\n      }\n\n      return value\n    }\n\n    return Reflect.get(target, key)\n  }\n}\n","/* @flow */\n\nimport { trapGet } from '../../../utils/proxy'\nimport type { Model } from '../index' // eslint-disable-line no-unused-vars\n\nimport type { Transaction$ResultProxy } from './interfaces'\n\n/**\n * @private\n */\nexport function createStaticTransactionProxy<T: Class<Model>>(\n  target: T,\n  trx: Object\n): T {\n  return new Proxy(target, {\n    get: trapGet({\n      create(model: T, props: Object = {}) {\n        return model.create(props, trx)\n      }\n    })\n  })\n}\n\n/**\n * @private\n */\nexport function createInstanceTransactionProxy<T: Model>(\n  target: T,\n  trx: Object\n): T {\n  return new Proxy(target, {\n    get: trapGet({\n      save(model: T) {\n        return model.save(trx)\n      },\n\n      update(model: T, props: Object = {}) {\n        return model.update(props, trx)\n      },\n\n      destroy(model: T) {\n        return model.destroy(trx)\n      }\n    })\n  })\n}\n\n/**\n * @private\n */\nexport function createTransactionResultProxy<T: Model, U: boolean>(\n  record: T,\n  didPersist: U\n): Transaction$ResultProxy<T, U> {\n  return new Proxy(record, {\n    get: trapGet({\n      didPersist\n    })\n  })\n}\n\nexport type { Transaction$ResultProxy } from './interfaces'\n","/* @flow */\n\n/**\n * @private\n */\nexport function map<K, V>(a: Map<K, V>, b: Map<K, V>): Map<K, V> {\n  return [...b].reduce((result, [key, value]) => (\n    a.get(key) !== value ? result.set(key, value) : result\n  ), new Map())\n}\n","/* @flow */\n\nimport { sql } from '../../../logger'\nimport omit from '../../../../utils/omit'\n// eslint-disable-next-line no-duplicate-imports\nimport type Logger from '../../../logger'\nimport type Model from '../index'\n\nimport tableFor from './table-for'\nimport getColumns from './get-columns'\n\n/**\n * @private\n */\nexport function create(record: Model, trx: Object): Array<Object> {\n  const timestamp = new Date()\n\n  Object.assign(record, {\n    createdAt: timestamp,\n    updatedAt: timestamp\n  })\n\n  Object.assign(record.rawColumnData, {\n    createdAt: timestamp,\n    updatedAt: timestamp\n  })\n\n  const { constructor: { primaryKey } } = record\n  const columns = omit(getColumns(record), primaryKey)\n\n  if (record.dirtyAttributes.has(primaryKey)) {\n    columns[primaryKey] = record.getPrimaryKey()\n  }\n\n  return [\n    tableFor(record, trx)\n      .returning(record.constructor.primaryKey)\n      .insert(columns)\n  ]\n}\n\n/**\n * @private\n */\nexport function update(record: Model, trx: Object): Array<Object> {\n  Reflect.set(record, 'updatedAt', new Date())\n\n  return [\n    tableFor(record, trx)\n      .where(record.constructor.primaryKey, record.getPrimaryKey())\n      .update(getColumns(record, [\n        ...record.dirtyAttributes.keys()\n      ]))\n  ]\n}\n\n/**\n * @private\n */\nexport function destroy(record: Model, trx: Object): Array<Object> {\n  return [\n    tableFor(record, trx)\n      .where(record.constructor.primaryKey, record.getPrimaryKey())\n      .del()\n  ]\n}\n\n/**\n * @private\n */\nexport function createRunner(\n  logger: Logger,\n  statements: Array<Object>\n): (query: Array<Object>) => Promise<Array<Object>> {\n  return query => {\n    const promises = query.concat(statements)\n\n    promises.forEach(promise => {\n      promise.on('query', () => {\n        setImmediate(() => {\n          logger.debug(sql`${promise.toString()}`)\n        })\n      })\n    })\n\n    return Promise.all(promises)\n  }\n}\n","/* @flow */\n\nimport createGetter from './utils/create-getter'\nimport createSetter from './utils/create-setter'\nimport createNormalizer from './utils/create-normalizer'\nimport type { Attribute$meta } from './interfaces'\n\n/**\n * @private\n */\nexport function createAttribute(opts: Attribute$meta): Object {\n  const normalize = createNormalizer(opts.type)\n  const meta = {\n    ...opts,\n    normalize,\n    defaultValue: normalize(opts.defaultValue)\n  }\n\n  return {\n    get: createGetter(meta),\n    set: createSetter(meta)\n  }\n}\n\nexport type { Attribute$meta } from './interfaces'\n","/* @flow */\n\nimport { camelize, dasherize, pluralize, singularize } from 'inflection'\n\nimport { line } from '../../logger'\nimport { createAttribute } from '../attribute'\nimport {\n  get as getRelationship,\n  set as setRelationship\n} from '../relationship'\nimport entries from '../../../utils/entries'\nimport underscore from '../../../utils/underscore'\nimport type Database, { Model } from '../index' // eslint-disable-line no-unused-vars, max-len\n\nconst VALID_HOOKS = new Set([\n  'afterCreate',\n  'afterDestroy',\n  'afterSave',\n  'afterUpdate',\n  'afterValidation',\n  'beforeCreate',\n  'beforeDestroy',\n  'beforeSave',\n  'beforeUpdate',\n  'beforeValidation'\n])\n\n/**\n * @private\n */\nfunction initializeProps(prototype, attributes, relationships) {\n  Object.defineProperties(prototype, {\n    ...entries(attributes).reduce((obj, [key, value]) => ({\n      ...obj,\n      [key]: createAttribute({\n        key,\n        ...value\n      })\n    }), {}),\n\n    ...Object.keys(relationships).reduce((obj, key) => ({\n      ...obj,\n      [key]: {\n        get() {\n          return getRelationship(this, key)\n        },\n        set(val) {\n          setRelationship(this, key, val)\n        }\n      }\n    }), {})\n  })\n}\n\n/**\n * @private\n */\nfunction initializeHooks({ model, hooks, logger }) {\n  return Object.freeze(\n    entries(hooks).reduce((obj, [key, value]) => {\n      if (!VALID_HOOKS.has(key)) {\n        logger.warn(line`\n          Invalid hook '${key}' will not be added to Model '${model.name}'.\n          Valid hooks are ${[...VALID_HOOKS].map(h => `'${h}'`).join(', ')}.\n        `)\n\n        return obj\n      }\n\n      return {\n        ...obj,\n        [key]: async (instance, transaction) => {\n          await Reflect.apply(value, model, [instance, transaction])\n        }\n      }\n    }, {})\n  )\n}\n\n/**\n * @private\n */\nfunction initializeValidations(opts) {\n  const { model, logger, attributes } = opts\n  const attributeNames = Object.keys(attributes)\n  let { validates } = opts\n\n  validates = entries(validates)\n    .filter(([key, value]) => {\n      let isValid = attributeNames.indexOf(key) >= 0\n\n      if (!isValid) {\n        logger.warn(line`\n          Invalid validation '${key}' will not be added to Model\n          '${model.name}'. '${key}' is not an attribute of Model\n          '${model.name}'.\n        `)\n      }\n\n      if (typeof value !== 'function') {\n        isValid = false\n\n        logger.warn(line`\n          Invalid validation '${key}' will not be added to Model\n          '${model.name}'. Validations must be a function.\n        `)\n      }\n\n      return isValid\n    })\n    .reduce((obj, [key, value]) => ({\n      ...obj,\n      [key]: value\n    }), {})\n\n  return Object.freeze(validates)\n}\n\n/**\n * @private\n */\nexport default async function initializeClass<T: Class<Model>>({\n  store,\n  table,\n  model\n}: {\n  store: Database,\n  table: $PropertyType<T, 'table'>,\n  model: T\n}): Promise<T> {\n  let { hooks, scopes, validates } = model\n  const { logger } = store\n  const modelName = dasherize(underscore(model.name))\n  const resourceName = pluralize(modelName)\n\n  const attributes = entries(await table().columnInfo())\n    .reduce((obj, [columnName, value]) => ({\n      ...obj,\n      [camelize(columnName, true)]: {\n        ...value,\n        columnName,\n        docName: dasherize(columnName)\n      }\n    }), {})\n\n  const belongsTo = entries(model.belongsTo || {})\n    .reduce((obj, [relatedName, { inverse, model: relatedModel }]) => {\n      const relationship = {}\n\n      Object.defineProperties(relationship, {\n        model: {\n          value: store.modelFor(relatedModel || relatedName),\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        inverse: {\n          value: inverse,\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        type: {\n          value: 'belongsTo',\n          writable: false,\n          enumerable: false,\n          configurable: false\n        },\n\n        foreignKey: {\n          value: `${underscore(relatedName)}_id`,\n          writable: false,\n          enumerable: false,\n          configurable: false\n        }\n      })\n\n      return {\n        ...obj,\n        [relatedName]: relationship\n      }\n    }, {})\n\n  const hasOne = entries(model.hasOne || {})\n    .reduce((obj, [relatedName, { inverse, model: relatedModel }]) => {\n      const relationship = {}\n\n      Object.defineProperties(relationship, {\n        model: {\n          value: store.modelFor(relatedModel || relatedName),\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        inverse: {\n          value: inverse,\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        type: {\n          value: 'hasOne',\n          writable: false,\n          enumerable: false,\n          configurable: false\n        },\n\n        foreignKey: {\n          value: `${underscore(inverse)}_id`,\n          writable: false,\n          enumerable: false,\n          configurable: false\n        }\n      })\n\n      return {\n        ...obj,\n        [relatedName]: relationship\n      }\n    }, {})\n\n  const hasMany = entries(model.hasMany || {})\n    .reduce((hash, [relatedName, opts]) => {\n      const { inverse } = opts\n      const relationship = {}\n      let { through, model: relatedModel } = opts\n      let foreignKey\n\n      if (typeof relatedModel === 'string') {\n        relatedModel = store.modelFor(relatedModel)\n      } else {\n        relatedModel = store.modelFor(relatedName)\n      }\n\n      if (typeof through === 'string') {\n        through = store.modelFor(through)\n        foreignKey = `${singularize(underscore(inverse))}_id`\n      } else {\n        foreignKey = `${underscore(inverse)}_id`\n      }\n\n      Object.defineProperties(relationship, {\n        model: {\n          value: relatedModel,\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        inverse: {\n          value: inverse,\n          writable: false,\n          enumerable: true,\n          configurable: false\n        },\n\n        through: {\n          value: through,\n          writable: false,\n          enumerable: Boolean(through),\n          configurable: false\n        },\n\n        type: {\n          value: 'hasMany',\n          writable: false,\n          enumerable: false,\n          configurable: false\n        },\n\n        foreignKey: {\n          value: foreignKey,\n          writable: false,\n          enumerable: false,\n          configurable: false\n        }\n      })\n\n      return {\n        ...hash,\n        [relatedName]: relationship\n      }\n    }, {})\n\n  Object.freeze(hasOne)\n  Object.freeze(hasMany)\n  Object.freeze(belongsTo)\n\n  const relationships = Object.freeze({\n    ...hasOne,\n    ...hasMany,\n    ...belongsTo\n  })\n\n  if (!hooks) {\n    hooks = {}\n  }\n\n  if (!scopes) {\n    scopes = {}\n  }\n\n  if (!validates) {\n    validates = {}\n  }\n\n  Object.defineProperties(model, {\n    store: {\n      value: store,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    table: {\n      value: table,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    logger: {\n      value: logger,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    attributes: {\n      value: Object.freeze(attributes),\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    attributeNames: {\n      value: Object.freeze(Object.keys(attributes)),\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    hasOne: {\n      value: hasOne,\n      writable: false,\n      enumerable: Boolean(Object.keys(hasOne).length),\n      configurable: false\n    },\n\n    hasMany: {\n      value: hasMany,\n      writable: false,\n      enumerable: Boolean(Object.keys(hasMany).length),\n      configurable: false\n    },\n\n    belongsTo: {\n      value: belongsTo,\n      writable: false,\n      enumerable: Boolean(Object.keys(belongsTo).length),\n      configurable: false\n    },\n\n    relationships: {\n      value: relationships,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    relationshipNames: {\n      value: Object.freeze(Object.keys(relationships)),\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    hooks: {\n      value: initializeHooks({\n        model,\n        hooks,\n        logger\n      }),\n      writable: false,\n      enumerable: Boolean(Object.keys(hooks).length),\n      configurable: false\n    },\n\n    scopes: {\n      value: scopes,\n      writable: false,\n      enumerable: Boolean(Object.keys(scopes).length),\n      configurable: false\n    },\n\n    validates: {\n      value: initializeValidations({\n        model,\n        logger,\n        validates,\n        attributes\n      }),\n      writable: false,\n      enumerable: Boolean(Object.keys(validates).length),\n      configurable: false\n    },\n\n    modelName: {\n      value: modelName,\n      writable: false,\n      enumerable: true,\n      configurable: false\n    },\n\n    resourceName: {\n      value: resourceName,\n      writable: false,\n      enumerable: true,\n      configurable: false\n    },\n\n    initialized: {\n      value: true,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n\n    ...Object.freeze(\n      entries(scopes).reduce((obj, [name, scope]) => ({\n        ...obj,\n        [name]: {\n          value: scope,\n          writable: false,\n          enumerable: false,\n          configurable: false\n        }\n      }), {})\n    )\n  })\n\n  initializeProps(model.prototype, attributes, {\n    ...hasOne,\n    ...hasMany,\n    ...belongsTo\n  })\n\n  Object.defineProperties(model.prototype, {\n    modelName: {\n      value: modelName,\n      writable: false,\n      enumerable: true,\n      configurable: false\n    },\n    resourceName: {\n      value: resourceName,\n      writable: false,\n      enumerable: true,\n      configurable: false\n    },\n    isModelInstance: {\n      value: true,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    }\n  })\n\n  return model\n}\n","/* @flow */\n\nimport { pluralize } from 'inflection'\n\nimport Query from '../query'\nimport ChangeSet from '../change-set'\nimport { updateRelationship } from '../relationship'\nimport {\n  createTransactionResultProxy,\n  createStaticTransactionProxy,\n  createInstanceTransactionProxy\n} from '../transaction'\nimport pick from '../../../utils/pick'\nimport entries from '../../../utils/entries'\nimport underscore from '../../../utils/underscore'\nimport { compose } from '../../../utils/compose'\nimport { map as diffMap } from '../../../utils/diff'\nimport mapToObject from '../../../utils/map-to-object'\nimport type Logger from '../../logger'\nimport type Database from '../../database'\nimport type Serializer from '../../serializer'\n/* eslint-disable no-duplicate-imports */\nimport type { Relationship$opts } from '../relationship'\nimport type { Transaction$ResultProxy } from '../transaction'\n/* eslint-enable no-duplicate-imports */\n\nimport { create, update, destroy, createRunner } from './utils/persistence'\nimport initializeClass from './initialize-class'\nimport validate from './utils/validate'\nimport runHooks from './utils/run-hooks'\nimport type { Model$Hooks } from './interfaces'\n\n/**\n * @class Model\n * @public\n */\nclass Model {\n  /**\n   * The name of the corresponding database table for a `Model` instance's\n   * constructor.\n   *\n   * @property tableName\n   * @type {String}\n   * @public\n   */\n  tableName: string;\n\n  /**\n   * The canonical name of a `Model`'s constructor.\n   *\n   * @property modelName\n   * @type {String}\n   * @public\n   */\n  modelName: string;\n\n  /**\n   * The name of the API resource a `Model` instance's constructor represents.\n   *\n   * @property resourceName\n   * @type {String}\n   * @public\n   */\n  resourceName: string;\n\n  /**\n   * A timestamp representing when the Model instance was created.\n   *\n   * @property createdAt\n   * @type {Date}\n   * @public\n   */\n  createdAt: Date;\n\n  /**\n   * A timestamp representing the last time the Model instance was updated.\n   *\n   * @property updatedAt\n   * @type {Date}\n   * @public\n   */\n  updatedAt: Date;\n\n  /**\n   * @property initialized\n   * @type {Boolean}\n   * @private\n   */\n  initialized: boolean;\n\n  /**\n   * @property rawColumnData\n   * @type {Object}\n   * @private\n   */\n  rawColumnData: Object;\n\n  /**\n   * @property isModelInstance\n   * @type {Boolean}\n   * @private\n   */\n  isModelInstance: boolean;\n\n  /**\n   * @property prevAssociations\n   * @type {Set}\n   * @private\n   */\n  prevAssociations: Set<Model>;\n\n  /**\n   * @property changeSets\n   * @type {Array}\n   * @private\n   */\n  changeSets: Array<ChangeSet>;\n\n  /**\n   * An object where you declare `hasOne` relationships.\n   *\n   * When declaring a relationship you must specify the inverse of the\n   * relationship.\n   *\n   * ```javascript\n   * class User extends Model {\n   *   static hasOne = {\n   *     profile: {\n   *       inverse: 'user'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on profile instances via `profile.user`.\n   *     }\n   *   };\n   * }\n   *\n   * class Profile extends Model {\n   *   static belongsTo = {\n   *     user: {\n   *       inverse: 'profile'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on user instances via `user.profile`.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * If the name of the model is different than the key of the relationship, you\n   * must specify it in the relationship object.\n   *\n   * ```javascript\n   * class Profile extends Model {\n   *   static belongsTo = {\n   *     owner: {\n   *       inverse: 'profile',\n   *       model: 'user'\n   *       // The line above lets Lux know that this is a relationship with the\n   *       // `User` model and not a non-existent `Owner` model.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * @property hasOne\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static hasOne: Object;\n\n  /**\n   * An object where you declare `hasMany` relationships.\n   *\n   * When declaring a relationship you must specify the inverse of the\n   * relationship.\n   *\n   * ```javascript\n   * class Author extends Model {\n   *   static hasMany = {\n   *     books: {\n   *       inverse: 'author'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on book instances via `book.author`.\n   *     }\n   *   };\n   * }\n   *\n   * class Book extends Model {\n   *   static belongsTo = {\n   *     author: {\n   *       inverse: 'books'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on author instances via `author.books`.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * If the name of the model is different than the key of the relationship, you\n   * must specify it in the relationship object.\n   *\n   * ```javascript\n   * class Author extends Model {\n   *   static hasMany = {\n   *     publications: {\n   *       inverse: 'author',\n   *       model: 'book'\n   *       // The line above lets Lux know that this is a relationship with the\n   *       // `Book` model and not a non-existent `Publication` model.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * ##### Many to Many\n   *\n   * In the examples above there is only one owner of relationship. Sometimes we\n   * need to express a many to many relationship. Typically in relational\n   * databases, this is done with a join table. When declaring a many to many\n   * relationship that uses a join table, you must specify the join model.\n   *\n   * ```javascript\n   * class Categorization extends Model {\n   *   static belongsTo = {\n   *     tag: {\n   *       inverse: 'categorization'\n   *     },\n   *     post: {\n   *       inverse: 'categorization'\n   *     }\n   *   }\n   * }\n   *\n   * class Tag extends Model {\n   *   static hasMany = {\n   *     posts: {\n   *       inverse: 'tags',\n   *       through: 'categorizations'\n   *     }\n   *   };\n   * }\n   *\n   * class Post extends Model {\n   *   static hasMany = {\n   *     tags: {\n   *       inverse: 'posts',\n   *       through: 'categorizations'\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * @property hasMany\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static hasMany: Object;\n\n  /**\n   * An object where you declare `belongsTo` relationships.\n   *\n   * When declaring a relationship you must specify the inverse of the\n   * relationship.\n   *\n   * ```javascript\n   * class Book extends Model {\n   *   static belongsTo = {\n   *     author: {\n   *       inverse: 'books'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on author instances via `author.books`.\n   *     }\n   *   };\n   * }\n   *\n   * class Author extends Model {\n   *   static hasMany = {\n   *     books: {\n   *       inverse: 'book'\n   *       // The line above lets Lux know that this relationship is accessible\n   *       // on book instances via `book.author`.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * If the name of the model is different than the key of the relationship, you\n   * must specify it in the relationship object.\n   *\n   * ```javascript\n   * class Book extends Model {\n   *   static belongsTo = {\n   *     writer: {\n   *       inverse: 'books',\n   *       model: 'author'\n   *       // The line above lets Lux know that this is a relationship with the\n   *       // `Author` model and not a non-existent `Writer` model.\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * Sometimes our foreign keys in the database do not follow conventions (i.e\n   * `author_id`). You have the option to manually specify foreign keys when a\n   * situation like this occurs.\n   *\n   * ```javascript\n   * class Book extends Model {\n   *   static belongsTo = {\n   *     author: {\n   *       inverse: 'books',\n   *       foreignKey: 'SoMe_UnCoNvEnTiOnAl_FoReIgN_KeY'\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * @property belongsTo\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static belongsTo: Object;\n\n  /**\n   * An object where you declare validations for an instance's attributes.\n   *\n   * Before a model instance is saved, validations declared in this block are\n   * executed. To declare a validation for a model attribute, simply add the\n   * attribute name as a key to the validates object. The value for the\n   * attribute key should be a function that takes a single argument (the value\n   * to validate against) and return a boolean value represent whether or not\n   * the attribute is valid.\n   *\n   * ```javascript\n   * class User extends Model {\n   *   static validates {\n   *     username: value => /^\\w{2,30}$/.test(value),\n   *     password: value => String(value).length >= 8\n   *   };\n   * }\n   * ```\n   *\n   * In the spirit of have a small api surface area, Lux provides no validation\n   * helper functions. You can roll your own helpers with or use one of the many\n   * excellent validation libraries like [validator](https://goo.gl/LWaHBB).\n   *\n   * ```javascript\n   * import { isEmail } from 'validator';\n   *\n   * class User extends Model {\n   *   static validates {\n   *     email: isEmail\n   *   };\n   * }\n   * ```\n   *\n   * @property validates\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static validates: Object;\n\n  /**\n   * An object where you declare custom query scopes for the model.\n   *\n   * Scopes allow you to DRY up query logic by chaining custom set's of queries\n   * with built-in query method such as `where`, `not`, `page`, etc. To declare\n   * a scope, add it as a method on the scopes object.\n   *\n   * ```javascript\n   * class Post extends Model {\n   *   static hasMany = {\n   *     tags: {\n   *       inverse: 'posts'\n   *     },\n   *     comments: {\n   *       inverse: 'post'\n   *     }\n   *   };\n   *\n   *   static belongsTo = {\n   *     user: {\n   *       inverse: 'posts'\n   *     }\n   *   };\n   *\n   *   static scopes = {\n   *     isPublic() {\n   *       return this.where({\n   *         isPublic: true\n   *       });\n   *     },\n   *\n   *     byUser(user) {\n   *       return this.where({\n   *         userId: user.id\n   *       });\n   *     },\n   *\n   *     withEverything() {\n   *       return this.includes('tags', 'user', 'comments');\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * Given the scopes declared in the example above, here is how we could return\n   * all the public posts with relationships eager loaded for the user with the\n   * id of 1.\n   *\n   * ```javascript\n   * const user = await User.find(1);\n   *\n   * return Post\n   *   .byUser(user)\n   *   .isPublic()\n   *   .withEverything();\n   * ```\n   *\n   * Since scopes can be chained with built-in query methods, we can easily\n   * paginate this collection.\n   *\n   * ```javascript\n   * const user = await User.find(1);\n   *\n   * return Post\n   *   .byUser(user)\n   *   .isPublic()\n   *   .withEverything()\n   *   .page(1);\n   * ```\n   *\n   * @property scopes\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static scopes: Object;\n\n  /**\n   * An object where you declare hooks to execute at certain times in a model\n   * instance's lifecycle.\n   *\n   * There are many lifecycle hooks that are executed through out a model\n   * instance's lifetime. The have many use cases such as sanitization of\n   * attributes, creating dependent relationships, hashing passwords, and much\n   * more.\n   *\n   * ##### Execution Order\n   *\n   * When creating a record.\n   *\n   * 1. beforeValidation\n   * 2. afterValidation\n   * 3. beforeCreate\n   * 4. beforeSave\n   * 5. afterCreate\n   * 6. afterSave\n   *\n   * When updating a record.\n   *\n   * 1. beforeValidation\n   * 2. afterValidation\n   * 3. beforeUpdate\n   * 4. beforeSave\n   * 5. afterUpdate\n   * 6. afterSave\n   *\n   * When deleting a record.\n   *\n   * 1. beforeDestroy\n   * 2. afterDestroy\n   *\n   * ##### Anatomy\n   *\n   * Hooks are async functions that are called with two arguments. The first\n   * argument is the record that the hook applies to and the second argument is\n   * the transaction object relevant to the method from which the hook was\n   * called.\n   *\n   * The only time you will need to use the transaction object is if you are\n   * creating, updating, or deleting different record(s) within the hook. Using\n   * the transaction object when modifying the database in a hook ensures that\n   * any modifications made within the hook will be rolled back if the function\n   * that initiated the transaction fails.\n   *\n   * ```javascript\n   * import Notification from 'app/models/notification';\n   *\n   * class Comment extends Model {\n   *   static belongsTo = {\n   *     post: {\n   *       inverse: 'comments'\n   *     },\n   *     user: {\n   *       inverse: 'comments'\n   *     }\n   *   };\n   *\n   *   static hooks = {\n   *     async afterCreate(comment, trx) {\n   *       let [post, commenter] = await Promise.all([\n   *         comment.post,\n   *         comment.user\n   *       ]);\n   *\n   *       const commentee = await post.user;\n   *\n   *       post = post.title;\n   *       commenter = commenter.name;\n   *\n   *       // Calling .transacting(trx) prevents the commentee from getting a\n   *       // notification if the comment fails to be persisted in the database.\n   *       await Notification\n   *         .transacting(trx)\n   *         .create({\n   *           user: commentee,\n   *           message: `${commenter} commented on your post \"${post}\"`\n   *         });\n   *     },\n   *\n   *     async afterSave() {\n   *       // Good thing you called transacting in afterCreate.\n   *       throw new Error('Fatal Error');\n   *     }\n   *   };\n   * }\n   * ```\n   *\n   * @property hooks\n   * @type {Object}\n   * @default {}\n   * @static\n   * @public\n   */\n  static hooks: Model$Hooks;\n\n  /**\n   * A reference to the application's logger.\n   *\n   * @property logger\n   * @type {Logger}\n   * @static\n   * @public\n   */\n  static logger: Logger;\n\n  /**\n   * The name of the corresponding database table for the model.\n   *\n   * @property tableName\n   * @type {String}\n   * @static\n   * @public\n   */\n  static tableName: string;\n\n  /**\n   * The canonical name of the model.\n   *\n   * @property modelName\n   * @type {String}\n   * @static\n   * @public\n   */\n  static modelName: string;\n\n  /**\n   * The name of the resource the model represents.\n   *\n   * @property resourceName\n   * @type {String}\n   * @static\n   * @public\n   */\n  static resourceName: string;\n\n  /**\n   * The column name to use for a model's primary key.\n   *\n   * @property primaryKey\n   * @type {String}\n   * @default 'id'\n   * @static\n   * @public\n   */\n  static primaryKey: string = 'id';\n\n  /**\n   * @property table\n   * @type {Function}\n   * @static\n   * @private\n   */\n  static table: () => Object;\n\n  /**\n   * @property store\n   * @type {Database}\n   * @static\n   * @private\n   */\n  static store: Database;\n\n  /**\n   * @property initialized\n   * @type {Boolean}\n   * @static\n   * @private\n   */\n  static initialized: boolean;\n\n  /**\n   * @property serializer\n   * @type {Serializer}\n   * @static\n   * @private\n   */\n  static serializer: Serializer<this>;\n\n  /**\n   * @property attributes\n   * @type {Object}\n   * @static\n   * @private\n   */\n  static attributes: Object;\n\n  /**\n   * @property attributeNames\n   * @type {Array}\n   * @static\n   * @private\n   */\n  static attributeNames: Array<string>;\n\n  /**\n   * @property relationships\n   * @type {Object}\n   * @static\n   * @private\n   */\n  static relationships: Object;\n\n  /**\n   * @property relationshipNames\n   * @type {Array}\n   * @static\n   * @private\n   */\n  static relationshipNames: Array<string>;\n\n  constructor(attrs: Object = {}, initialize: boolean = true): this {\n    Object.defineProperties(this, {\n      changeSets: {\n        value: [new ChangeSet()],\n        writable: false,\n        enumerable: false,\n        configurable: false\n      },\n      rawColumnData: {\n        value: attrs,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      },\n      prevAssociations: {\n        value: new Set(),\n        writable: false,\n        enumerable: false,\n        configurable: false\n      }\n    })\n\n    const { constructor: { attributeNames, relationshipNames } } = this\n    const props = pick(attrs, ...attributeNames.concat(relationshipNames))\n\n    Object.assign(this, props)\n\n    if (initialize) {\n      Reflect.defineProperty(this, 'initialized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      })\n    }\n\n    return this\n  }\n\n  /**\n   * Indicates if the model is new.\n   *\n   * ```javascript\n   * import Post from 'app/models/post';\n   *\n   * let post = new Post({\n   *   body: '',\n   *   title: 'New Post',\n   *   isPublic: false\n   * });\n   *\n   * post.isNew;\n   * // => true\n   *\n   * Post.create({\n   *   body: '',\n   *   title: 'New Post',\n   *   isPublic: false\n   * }).then(post => {\n   *   post.isNew;\n   *   // => false;\n   * });\n   * ```\n   *\n   * @property isNew\n   * @type {Boolean}\n   * @public\n   */\n  get isNew(): boolean {\n    return !this.persistedChangeSet\n  }\n\n  /**\n   * Indicates if the model is dirty.\n   *\n   * ```javascript\n   * import Post from 'app/models/post';\n   *\n   * Post\n   *  .find(1)\n   *  .then(post => {\n   *     post.isDirty;\n   *     // => false\n   *\n   *     post.isPublic = true;\n   *\n   *     post.isDirty;\n   *     // => true\n   *\n   *     return post.save();\n   *   })\n   *   .then(post => {\n   *     post.isDirty;\n   *     // => false\n   *   });\n   * ```\n   *\n   * @property isDirty\n   * @type {Boolean}\n   * @public\n   */\n  get isDirty(): boolean {\n    return Boolean(this.dirtyProperties.size)\n  }\n\n  /**\n   * Indicates if the model is persisted.\n   *\n   * ```javascript\n   * import Post from 'app/models/post';\n   *\n   * Post\n   *  .find(1)\n   *  .then(post => {\n   *     post.persisted;\n   *     // => true\n   *\n   *     post.isPublic = true;\n   *\n   *     post.persisted;\n   *     // => false\n   *\n   *     return post.save();\n   *   })\n   *   .then(post => {\n   *     post.persisted;\n   *     // => true\n   *   });\n   * ```\n   *\n   * @property persisted\n   * @type {Boolean}\n   * @public\n   */\n  get persisted(): boolean {\n    return !this.isNew && !this.isDirty\n  }\n\n  /**\n   * @property dirtyAttributes\n   * @type {Map}\n   * @public\n   */\n  get dirtyAttributes(): Map<string, any> {\n    const {\n      dirtyProperties,\n      constructor: {\n        relationshipNames\n      }\n    } = this\n\n    dirtyProperties.forEach((prop, key) => {\n      if (relationshipNames.indexOf(key) >= 0) {\n        dirtyProperties.delete(key)\n      }\n    })\n\n    return dirtyProperties\n  }\n\n  /**\n   * @property dirtyRelationships\n   * @type {Map}\n   * @public\n   */\n  get dirtyRelationships(): Map<string, any> {\n    const {\n      dirtyProperties,\n      constructor: {\n        attributeNames\n      }\n    } = this\n\n    Array\n      .from(dirtyProperties.keys())\n      .forEach(key => {\n        if (attributeNames.indexOf(key) >= 0) {\n          dirtyProperties.delete(key)\n        }\n      })\n\n    return dirtyProperties\n  }\n\n  /**\n   * @property dirtyProperties\n   * @type {Map}\n   * @private\n   */\n  get dirtyProperties(): Map<string, any> {\n    const { currentChangeSet, persistedChangeSet } = this\n\n    if (!persistedChangeSet) {\n      return new Map(currentChangeSet)\n    }\n\n    return diffMap(persistedChangeSet, currentChangeSet)\n  }\n\n  /**\n   * @property currentChangeSet\n   * @type {ChangeSet}\n   * @private\n   */\n  get currentChangeSet(): ChangeSet {\n    return this.changeSets[0]\n  }\n\n  /**\n   * @property currentChangeSet\n   * @type {void | ChangeSet}\n   * @private\n   */\n  get persistedChangeSet(): void | ChangeSet {\n    return this.changeSets.find(({ isPersisted }) => isPersisted)\n  }\n\n  /**\n   * Specify the transaction object to use for following save, update, or\n   * destroy method calls.\n   *\n   * When you call a method like update or destroy, lux will create a\n   * transaction and wrap the internals of the method and other downstream\n   * method calls like model hooks within. In some edge cases it can be more\n   * useful to manually initiate the transaction. Bulk updating or destroying\n   * are good examples of this. When you manually begin a transaction, you can\n   * call this method to specify the transaction object that you would like to\n   * use for subsequent mutation methods (save, update, destroy, etc.) so lux\n   * knows not to automatically begin a new transaction if/when a mutation\n   * method is called.\n   *\n   * ```javascript\n   * const post = await Post.first();\n   *\n   * // This call to update uses the transaction that lux will initiate.\n   * await post.update({\n   *   // updates to post...\n   * });\n   *\n   * await post.transaction(trx => {\n   *   // This call to update uses the transaction that we created with the\n   *   // call to the transaction method.\n   *   return post\n   *     .transacting(trx)\n   *     .update({\n   *       // updates to post...\n   *     });\n   * });\n   * ```\n   *\n   * @method transacting\n   * @param {Transaction} transaction - A transaction object to forward to save,\n   * update, or destroy method calls.\n   * @return {Model} - Returns a proxied version of `this` that delagates the\n   * transaction param to subsquent save, update, or destroy method calls.\n   * @public\n   */\n  transacting(trx: Object): this {\n    return createInstanceTransactionProxy(this, trx)\n  }\n\n  /**\n   * Manually begin a new transaction.\n   *\n   * Most of the time, you don't need to start transactions yourself. However,\n   * if you need to do something like implement bulk updating of related records\n   * the transaction method can be useful.\n   *\n   * ```javascript\n   * const post = await Post.first().include('user');\n   * const user = await post.user;\n   *\n   * await post.transaction(trx => {\n   *   return Promise.all([\n   *     post.transacting(trx).update({\n   *       // updates to post...\n   *     }),\n   *     user.transacting(trx).update({\n   *       // updates to user...\n   *     })\n   *   ]);\n   * });\n   * ```\n   *\n   * @method transaction\n   * @param {Function} fn - The function used for executing the tranasction.\n   * This function is called with a new transaction object as it's only argument\n   * and is expected to return a promise.\n   * @return {Promise} Resolves with the resolved value of the fn param.\n   * @public\n   */\n  transaction<T>(fn: (...args: Array<any>) => Promise<T>): Promise<T> {\n    return this.constructor.transaction(fn)\n  }\n\n  /**\n   * Persist any unsaved changes to the database.\n   *\n   * ```javascript\n   * const post = await Post.first();\n   *\n   * console.log(post.title, post.isDirty);\n   * // => 'New Post' false\n   *\n   * post.title = 'How to Save a Lux Model';\n   *\n   * console.log(post.title, post.isDirty);\n   * // => 'How to Update a Lux Model' true\n   *\n   * await post.save();\n   *\n   * console.log(post.title, post.isDirty);\n   * // => 'How to Save a Lux Model' false\n   * ```\n   *\n   * @method save\n   * @return {Promise} Resolves with `this`.\n   * @public\n   */\n  save(transaction?: Object): Promise<Transaction$ResultProxy<this, *>> {\n    return this.update(mapToObject(this.dirtyProperties), transaction)\n  }\n\n  /**\n   * Assign values to the instance and persist any changes to the database.\n   *\n   * ```javascript\n   * const post = await Post.first();\n   *\n   * console.log(post.title, post.isPublic, post.isDirty);\n   * // => 'New Post' false false\n   *\n   * await post.update({\n   *   title: 'How to Update a Lux Model',\n   *   isPublic: true\n   * });\n   *\n   * console.log(post.title, post.isPublic, post.isDirty);\n   * // => 'How to Update a Lux Model' true false\n   * ```\n   *\n   * @method update\n   * @param {Object} properties - An object containing key, value pairs of the\n   * attributes and/or relationships you would like to assign to the instance.\n   * @return {Promise} Resolves with `this`.\n   * @public\n   */\n  update(\n    props: Object = {},\n    transaction?: Object\n  ): Promise<Transaction$ResultProxy<this, *>> {\n    const run = async (trx: Object) => {\n      const { constructor: { hooks, logger } } = this\n      let statements = []\n      let promise = Promise.resolve([])\n      let hadDirtyAttrs = false\n      let hadDirtyAssoc = false\n\n      const associations = Object\n        .keys(props)\n        .filter(key => (\n          Boolean(this.constructor.relationshipFor(key))\n        ))\n\n      Object.assign(this, props)\n\n      if (associations.length) {\n        hadDirtyAssoc = true\n        statements = associations.reduce((arr, key) => [\n          ...arr,\n          ...updateRelationship(this, key, trx)\n        ], [])\n      }\n\n      if (this.isDirty) {\n        hadDirtyAttrs = true\n\n        await runHooks(this, trx, hooks.beforeValidation)\n\n        validate(this)\n\n        await runHooks(this, trx,\n          hooks.afterValidation,\n          hooks.beforeUpdate,\n          hooks.beforeSave\n        )\n\n        promise = update(this, trx)\n      }\n\n      await createRunner(logger, statements)(await promise)\n\n      this.prevAssociations.clear()\n      this.currentChangeSet.persist(this.changeSets)\n\n      if (hadDirtyAttrs) {\n        await runHooks(this, trx,\n          hooks.afterUpdate,\n          hooks.afterSave\n        )\n      }\n\n      return createTransactionResultProxy(this, hadDirtyAttrs || hadDirtyAssoc)\n    }\n\n    if (transaction) {\n      return run(transaction)\n    }\n\n    return this.transaction(run)\n  }\n\n  /**\n   * Permanently delete the instance from the database.\n   *\n   * @method destroy\n   * @return {Promise} Resolves with `this`.\n   * @public\n   */\n  destroy(transaction?: Object): Promise<Transaction$ResultProxy<this, true>> {\n    const run = async (trx: Object) => {\n      const { constructor: { hooks, logger } } = this\n\n      await runHooks(this, trx, hooks.beforeDestroy)\n      await createRunner(logger, [])(await destroy(this, trx))\n      await runHooks(this, trx, hooks.afterDestroy)\n\n      return createTransactionResultProxy(this, true)\n    }\n\n    if (transaction) {\n      return run(transaction)\n    }\n\n    return this.transaction(run)\n  }\n\n  /**\n   * Reload the record from the database.\n   *\n   * @method reload\n   * @return {Promise} Resolves with `this`.\n   * @public\n   */\n  reload(): Query<this> {\n    if (this.isNew) {\n      // $FlowIgnore\n      return Promise.resolve(this)\n    }\n\n    const {\n      persistedChangeSet,\n      constructor: {\n        attributeNames,\n        relationshipNames,\n      },\n    } = this\n\n    let filterKey = key => attributeNames.includes(key)\n\n    if (persistedChangeSet) {\n      filterKey = key => persistedChangeSet.has(key)\n    }\n\n    return this.constructor\n      .find(this.getPrimaryKey())\n      .select(...attributeNames.filter(filterKey))\n      .include(...relationshipNames.filter(filterKey))\n  }\n\n  /**\n   * Rollback attributes and relationships to the last known persisted set of\n   * values.\n   *\n   * @method rollback\n   * @return {Model} Returns `this`.\n   * @public\n   */\n  rollback(): this {\n    const { persistedChangeSet } = this\n\n    if (persistedChangeSet && !this.currentChangeSet.isPersisted) {\n      persistedChangeSet\n        .applyTo(this)\n        .persist(this.changeSets)\n    }\n\n    return this\n  }\n\n  /**\n   * @method getAttributes\n   * @param {String} [...keys] - The keys of the properties to return.\n   * @return {Object} An object containing keys that were passed in as agruments\n   * and their associated values.\n   * @private\n   */\n  getAttributes(...attrs: Array<string>): Object {\n    let keys = attrs\n\n    if (keys.length === 0) {\n      keys = this.constructor.attributeNames\n    }\n\n    return pick(this, ...keys)\n  }\n\n  /**\n   * @method getPrimaryKey\n   * @return {Number} The value of the primary key for the instance.\n   * @private\n   */\n  getPrimaryKey(): number {\n    return Reflect.get(this, this.constructor.primaryKey)\n  }\n\n  toObject(callee?: Model, prev?: Object): Object {\n    const { currentChangeSet, constructor: { relationships } } = this\n\n    return entries(relationships).reduce((obj, [key, { type }]) => {\n      const value = currentChangeSet.get(key)\n\n      /* eslint-disable no-param-reassign */\n\n      if (type === 'hasMany' && Array.isArray(value)) {\n        obj[key] = value.map(item => {\n          if (item === callee) {\n            return prev\n          }\n          return item.toObject(this, obj)\n        })\n      } else if (value && typeof value.toObject === 'function') {\n        obj[key] = value === callee ? prev : value.toObject(this, obj)\n      }\n\n      /* eslint-enable no-param-reassign */\n\n      return obj\n    }, this.getAttributes())\n  }\n\n  /**\n   * Create and persist a new instance of the model.\n   *\n   * @method create\n   * @param {Object} properties - An object containing key, value pairs of the\n   * attributes and/or relationships you would like to assign to the instance.\n   * @return {Promise} Resolves with the newly created model.\n   * @static\n   * @public\n   */\n  static create(\n    props: Object = {},\n    transaction?: Object\n  ): Promise<Transaction$ResultProxy<this, true>> {\n    const run = async (trx: Object) => {\n      const { hooks, logger, primaryKey } = this\n      const instance = Reflect.construct(this, [props, false])\n      let statements = []\n\n      const associations = Object\n        .keys(props)\n        .filter(key => (\n          Boolean(this.relationshipFor(key))\n        ))\n\n      if (associations.length) {\n        statements = associations.reduce((arr, key) => [\n          ...arr,\n          ...updateRelationship(instance, key, trx)\n        ], [])\n      }\n\n      await runHooks(instance, trx, hooks.beforeValidation)\n\n      validate(instance)\n\n      await runHooks(instance, trx,\n        hooks.afterValidation,\n        hooks.beforeCreate,\n        hooks.beforeSave\n      )\n\n      const runner = createRunner(logger, statements)\n      const [[primaryKeyValue]] = await runner(await create(instance, trx))\n\n      Reflect.set(instance, primaryKey, primaryKeyValue)\n      Reflect.set(instance.rawColumnData, primaryKey, primaryKeyValue)\n\n      Reflect.defineProperty(instance, 'initialized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      })\n\n      instance.currentChangeSet.persist(instance.changeSets)\n\n      await runHooks(instance, trx,\n        hooks.afterCreate,\n        hooks.afterSave\n      )\n\n      return createTransactionResultProxy(instance, true)\n    }\n\n    if (transaction) {\n      return run(transaction)\n    }\n\n    return this.transaction(run)\n  }\n\n  /**\n   * Specify the transaction object to use for following save, update, or\n   * destroy method calls.\n   *\n   * When you call a method like update or destroy, lux will create a\n   * transaction and wrap the internals of the method and other downstream\n   * method calls like model hooks within. In some edge cases it can be more\n   * useful to manually initiate the transaction. Bulk updating or destroying\n   * are good examples of this. When you manually begin a transaction, you can\n   * call this method to specify the transaction object that you would like to\n   * use for calls to the static create method so lux knows not to automatically\n   * begin a new transaction if/when the static create method is called.\n   *\n   * ```javascript\n   * // This call to create uses the transaction that lux will initiate.\n   * await Post.create();\n   *\n   * await Post.transaction(trx => {\n   *   // This call to create uses the transaction that we created with the\n   *   // call to the transaction method.\n   *   return Post\n   *     .transacting(trx)\n   *     .create();\n   * });\n   * ```\n   *\n   * @method transacting\n   * @param {Transaction} transaction - A transaction object to forward to\n   * create method calls.\n   * @return {Model} - Returns a proxied version of `this` that delagates the\n   * transaction param to subsquent create method calls.\n   * @static\n   * @public\n   */\n  static transacting(trx: Object): Class<this> {\n    return createStaticTransactionProxy(this, trx)\n  }\n\n  /**\n   * Manually begin a new transaction.\n   *\n   * Most of the time, you don't need to start transactions yourself. However,\n   * the transaction method can be useful if you need to do something like\n   * bulk creating records.\n   *\n   * ```javascript\n   * await Post.transaction(trx => {\n   *   return Promise.all([\n   *     Post.transacting(trx).create({\n   *       // ...props\n   *     }),\n   *     Post.transacting(trx).create({\n   *       // ...props\n   *     })\n   *   ]);\n   * });\n   * ```\n   *\n   * @method transaction\n   * @param {Function} fn - The function used for executing the tranasction.\n   * This function is called with a new transaction object as it's only argument\n   * and is expected to return a promise.\n   * @return {Promise} Resolves with the resolved value of the fn param.\n   * @static\n   * @public\n   */\n  static transaction<T>(fn: (...args: Array<any>) => Promise<T>): Promise<T> {\n    if (this.store.hasPool) {\n      return new Promise((resolve, reject) => {\n        const { store: { connection } } = this\n        let result: T\n\n        connection\n          .transaction(trx => {\n            fn(trx)\n              .then(data => {\n                result = data\n                return trx.commit()\n              })\n              .catch(trx.rollback)\n          })\n          .then(() => {\n            resolve(result)\n          })\n          .catch(err => {\n            reject(err)\n          })\n      })\n    }\n\n    return fn()\n  }\n\n  static all(): Query<Array<this>> {\n    return new Query(this).all()\n  }\n\n  static find(primaryKey: any): Query<this> {\n    return new Query(this).find(primaryKey)\n  }\n\n  static page(num: number): Query<Array<this>> {\n    return new Query(this).page(num)\n  }\n\n  static limit(amount: number): Query<Array<this>> {\n    return new Query(this).limit(amount)\n  }\n\n  static offset(amount: number): Query<Array<this>> {\n    return new Query(this).offset(amount)\n  }\n\n  static count(): Query<number> {\n    return new Query(this).count()\n  }\n\n  static order(attr: string, direction?: string): Query<Array<this>> {\n    return new Query(this).order(attr, direction)\n  }\n\n  static where(conditions: Object): Query<Array<this>> {\n    return new Query(this).where(conditions)\n  }\n\n  static whereBetween(conditions: Object): Query<Array<this>> {\n    return new Query(this).whereBetween(conditions)\n  }\n\n  static whereRaw(\n    query: string,\n    bindings: Array<any> = []): Query<Array<this>> {\n    return new Query(this).whereRaw(query, bindings)\n  }\n\n  static not(conditions: Object): Query<Array<this>> {\n    return new Query(this).not(conditions)\n  }\n\n  static first(): Query<this> {\n    return new Query(this).first()\n  }\n\n  static last(): Query<this> {\n    return new Query(this).last()\n  }\n\n  static select(...params: Array<string>): Query<Array<this>> {\n    return new Query(this).select(...params)\n  }\n\n  static distinct(...params: Array<string>): Query<Array<this>> {\n    return new Query(this).distinct(...params)\n  }\n\n  static include(...relationships: Array<string | Object>): Query<Array<this>> {\n    return new Query(this).include(...relationships)\n  }\n\n  static unscope(...scopes: Array<string>): Query<Array<this>> {\n    return new Query(this).unscope(...scopes)\n  }\n\n  /**\n   * Check if a model has a scope.\n   *\n   * @method hasScope\n   * @param {String} name - The name of the scope to look for.\n   * @return {Boolean}\n   * @static\n   * @public\n   */\n  static hasScope(name: string): boolean {\n    return Boolean(Reflect.get(this.scopes, name))\n  }\n\n  /**\n   * Check if a value is an instance of a model.\n   *\n   * @method isInstance\n   * @param {any} value - The value in question.\n   * @return {Boolean}\n   * @static\n   * @public\n   */\n  static isInstance(value: any): boolean {\n    return value instanceof this\n  }\n\n  /**\n   * Bind the model's connection to the database and get inferred data from the\n   * schema upon application boot.\n   *\n   * @method initialize\n   * @param {Database} store - A reference of the applications database\n   * instance.\n   * @param {Table} table - A function that returns a knex query builder bound\n   * to the model's table name.\n   * @return {Promise} Resolves with the model class.\n   * @static\n   * @private\n   */\n  static initialize(store, table): Promise<Class<this>> {\n    if (this.initialized) {\n      return Promise.resolve(this)\n    }\n\n    if (!this.tableName) {\n      const getTableName = compose(pluralize, underscore)\n      const tableName = getTableName(this.name)\n\n      Reflect.defineProperty(this, 'tableName', {\n        value: tableName,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      })\n\n      Reflect.defineProperty(this.prototype, 'tableName', {\n        value: tableName,\n        writable: false,\n        enumerable: false,\n        configurable: false\n      })\n    }\n\n    return initializeClass({\n      store,\n      table,\n      model: this\n    })\n  }\n\n  /**\n   * @method columnFor\n   * @param {String} key - The respective attribute name of the column.\n   * @return {void | Object} An object containing metadata about the column if a\n   * match is found.\n   * @static\n   * @private\n   */\n  static columnFor(key: string): void | Object {\n    return Reflect.get(this.attributes, key)\n  }\n\n  /**\n   * @method columnNameFor\n   * @param {String} key - The respective attribute name of the column.\n   * @return {void | String} The name of the column in the database if a match\n   * is found.\n   * @static\n   * @private\n   */\n  static columnNameFor(key: string): void | string {\n    const column = this.columnFor(key)\n\n    return column ? column.columnName : undefined\n  }\n\n  /**\n   * @method relationshipFor\n   * @param {String} key - The name of the relationship to match against.\n   * @return {void | Object} An object containing relationship metadata if a\n   * match is found.\n   * @static\n   * @private\n   */\n  static relationshipFor(key: string): void | Relationship$opts {\n    return Reflect.get(this.relationships, key)\n  }\n}\n\nexport default Model\nexport { default as tableFor } from './utils/table-for'\nexport type { Model$Hook, Model$Hooks } from './interfaces'\n","/* @flow */\n\nimport type Logger from '../logger'\nimport type { ObjectMap } from '../../interfaces'\n\nexport type URL = {\n  protocol?: string;\n  slashes?: boolean;\n  auth?: string;\n  host?: string;\n  port?: string;\n  hostname?: string;\n  hash?: string;\n  search?: string;\n  query?: any;\n  pathname?: string;\n  path?: string;\n  href: string;\n  params: Array<any>;\n}\n\nexport type Params = ObjectMap<any>\n\nexport type Method =\n  | 'GET'\n  | 'HEAD'\n  | 'POST'\n  | 'PATCH'\n  | 'DELETE'\n  | 'OPTIONS'\n\nexport type Options = {\n  url: URL;\n  params: ObjectMap<any>;\n  logger: Logger;\n  method: Method;\n  headers: Map<string, string>;\n  encrypted: boolean;\n  defaultParams: ObjectMap<any>;\n}\n\n/**\n * @class Request\n * @public\n */\nclass Request {\n  url: URL;\n  params: ObjectMap<any>;\n  logger: Logger;\n  method: Method;\n  headers: Map<string, string>;\n  encrypted: boolean;\n  defaultParams: ObjectMap<any>;\n\n  constructor(options: Options) {\n    Object.assign(this, options)\n  }\n}\n\nexport default Request\nexport * from './constants'\n","/* @flow */\n\nimport entries from '../../../utils/entries'\nimport isObject from '../../../utils/is-object'\nimport type { ObjectMap } from '../../../interfaces'\n\nconst INT = /^\\d+$/\nconst CSV = /^(?:[\\w\\d-]+)(?:,[\\w\\d-]+){1,}$/\nconst NULL = /^null$/\nconst BOOL = /^(?:true|false)$/\nconst DATE = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{4})$/\nconst TRUE = /^true$/\nconst DELIMITER = /[_-\\s]+/\n\nexport function camelize(source: string): string {\n  return source\n    .split(DELIMITER)\n    .reduce((result, part, idx) => {\n      if (part[0]) {\n        const [first] = part\n\n        return (\n          result\n          + (idx === 0 ? first.toLowerCase() : first.toUpperCase())\n          + part.slice(1).toLowerCase()\n        )\n      }\n\n      return result\n    }, '')\n}\n\nexport function fromString(source: string): any {\n  if (INT.test(source)) {\n    return Number.parseInt(source, 10)\n  } else if (BOOL.test(source)) {\n    return TRUE.test(source)\n  } else if (NULL.test(source)) {\n    return null\n  } else if (CSV.test(source)) {\n    return source.split(',').map(fromString)\n  } else if (DATE.test(source)) {\n    return new Date(source)\n  }\n  return source\n}\n\nexport function fromObject(source: ObjectMap<any>): ObjectMap<any> {\n  return entries(source).reduce((target, [k, v]) => {\n    const key = camelize(k)\n    let value = v\n\n    if (typeof value === 'string') {\n      value = fromString(value)\n    } else if (isObject(value)) {\n      value = fromObject(value)\n    }\n\n    if (key === 'include') {\n      if (value && !Array.isArray(value)) {\n        value = [value]\n      }\n\n      value = value.map(item => {\n        if (typeof item === 'string') {\n          return camelize(item)\n        }\n        return item\n      })\n    } else if (key === 'fields' && isObject(value)) {\n      value = entries(value).reduce((fields, [resource, names]) => {\n        // eslint-disable-next-line no-param-reassign\n        fields[resource] = (\n          Array.isArray(names) ? names : [names]\n        ).map(item => {\n          if (typeof item === 'string') {\n            return camelize(item)\n          }\n          return item\n        })\n        return fields\n      }, {})\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    target[key] = value\n\n    return target\n  }, {})\n}\n","/* @flow */\n\nimport type Request, { Method } from '../../request'\n\ntype Headers = $PropertyType<Request, 'headers'>\n\nexport function resolve(method: string, headers: Headers): Method {\n  const value = headers.get('x-http-method-override') || method\n\n  switch (value) {\n    case 'GET':\n    case 'HEAD':\n    case 'POST':\n    case 'PATCH':\n    case 'DELETE':\n    case 'OPTIONS':\n      return value\n\n    default:\n      throw new Error(`Method \"${value}\" is not supported.`)\n  }\n}\n","/* @flow */\n\nimport entries from '../../../utils/entries'\nimport { FreezeableMap } from '../../freezeable'\nimport type { ObjectMap } from '../../../interfaces'\n\ntype HandleChange = (type: 'SET' | 'DELETE', data: [string, ?string]) => void\n\nexport class Headers extends FreezeableMap<string, string> {\n  constructor(value: ObjectMap<string> = {}) {\n    super(entries(value))\n  }\n\n  get(key: string): void | string {\n    return super.get(String(key).toLowerCase())\n  }\n\n  has(key: string): boolean {\n    return super.has(String(key).toLowerCase())\n  }\n\n  set(key: string, value: string): this {\n    super.set(String(key).toLowerCase(), value)\n    return this\n  }\n\n  delete(key: string): boolean {\n    return super.delete(String(key).toLowerCase())\n  }\n}\n\nexport class ResponseHeaders extends Headers {\n  handleChange: HandleChange;\n\n  constructor(handleChange: HandleChange) {\n    super()\n    this.handleChange = handleChange\n  }\n\n  set(key: string, value: string): this {\n    this.handleChange('SET', [key, value])\n    return super.set(key, value)\n  }\n\n  delete(key: string): boolean {\n    this.handleChange('DELETE', [key, null])\n    return super.delete(key)\n  }\n}\n","/* @flow */\n\nimport { parse as parseURL } from 'url'\nimport type { IncomingMessage } from 'http'\n\nimport qs from 'qs'\n\nimport { HAS_BODY } from '../../../../constants'\nimport Request from '../../../request'\nimport type Logger from '../../../logger'\nimport * as query from '../../utils/query'\nimport * as method from '../../utils/method'\nimport { Headers } from '../../utils/headers'\n\nexport function create(req: IncomingMessage, logger: Logger): Promise<Request> {\n  return new Promise((resolve, reject) => {\n    const url = parseURL(req.url)\n    const headers = new Headers(req.headers)\n    const request = new Request({\n      logger,\n      headers,\n      url: { ...url, params: [] },\n      params: query.fromObject(qs.parse(url.query)),\n      method: method.resolve(req.method, headers),\n      // $FlowIgnore\n      encrypted: Boolean(req.connection.encrypted),\n      defaultParams: {},\n    })\n\n    headers.freeze()\n\n    if (HAS_BODY.test(request.method)) {\n      let offset = 0\n      const body = Buffer.allocUnsafe(\n        Number.parseInt(request.headers.get('content-length') || '0', 10) || 0\n      )\n\n      req\n        .on('data', (data: Buffer) => {\n          data.copy(body, offset)\n          offset += data.length\n        })\n        .once('end', () => {\n          req.removeAllListeners('end')\n          req.removeAllListeners('data')\n          req.removeAllListeners('error')\n\n          request.params.data = JSON.parse(body.toString())\n\n          resolve(request)\n        })\n        .once('error', (err: Error) => {\n          req.removeAllListeners('end')\n          req.removeAllListeners('data')\n          req.removeAllListeners('error')\n\n          reject(err)\n        })\n    } else {\n      resolve(request)\n    }\n  })\n}\n","/* @flow */\n\nimport type Logger from '../logger'\n\n/* eslint-disable no-use-before-define */\n\nexport type Options = {\n  stats: Array<Object>;\n  logger: Logger;\n  headers: Map<string, string>;\n  statusCode: number;\n  statusMessage: string;\n  end(data: string): void;\n  send(data: string): void;\n  status(code: number): Response;\n  getHeader(key: string): void | string;\n  setHeader(key: string, value: string): void;\n  removeHeader(key: string): void;\n}\n\n/* eslint-enable no-use-before-define */\n\n/**\n * @class Response\n * @public\n */\nclass Response {\n  stats: Array<Object>;\n  logger: Logger;\n  headers: Map<string, string>;\n  statusCode: number;\n  statusMessage: string;\n  end: (data: string) => void;\n  send: (data: string) => void;\n  status: (code: number) => Response;\n  getHeader: (key: string) => void | string;\n  setHeader: (key: string, value: string) => void;\n  removeHeader: (key: string) => void;\n\n  constructor(options: Options) {\n    Object.assign(this, options)\n  }\n}\n\nexport default Response\nexport * from './constants'\n","/* @flow */\n\nimport type { ServerResponse } from 'http'\n\nimport Response from '../../../response'\nimport { ResponseHeaders } from '../../utils/headers'\nimport type Logger from '../../../logger'\n\nexport function create(res: ServerResponse, logger: Logger): Response {\n  return new Response({\n    logger,\n    stats: [],\n    headers: new ResponseHeaders((type, [key, value]) => {\n      if (type === 'SET' && value) {\n        res.setHeader(key, value)\n      } else if (type === 'DELETE') {\n        res.removeHeader(key)\n      }\n    }),\n    statusCode: 200,\n    statusMessage: 'OK',\n\n    end(body: string): void {\n      res.end(body)\n    },\n\n    send(body: string): void {\n      this.end(body)\n    },\n\n    status(code: number): Response {\n      res.statusCode = code // eslint-disable-line no-param-reassign\n      this.statusCode = code\n      return this\n    },\n\n    getHeader(key: string): void | string {\n      return this.headers.get(key)\n    },\n\n    setHeader(key: string, value: string): void {\n      this.headers.set(key, value)\n    },\n\n    removeHeader(key: string): void {\n      this.headers.delete(key)\n    },\n  })\n}\n","/* @flow */\n\nimport type { IncomingMessage, ServerResponse } from 'http'\n\nimport type { Adapter } from '../index'\nimport type Application from '../../application'\n\nimport * as request from './request'\nimport * as response from './response'\n\nfunction createAdapter({ logger }: Application): Adapter {\n  function adapter(req: IncomingMessage, res: ServerResponse) {\n    return Promise.all([\n      request.create(req, logger),\n      response.create(res, logger),\n    ])\n  }\n\n  Object.defineProperty(adapter, 'type', {\n    value: 'http',\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  })\n\n  return adapter\n}\n\nexport default createAdapter\nexport { request, response }\n","/* @flow */\n\nimport * as url from 'url'\n\nimport qs from 'qs'\n\nimport Request from '../../../request'\nimport type Logger from '../../../logger'\nimport * as query from '../../utils/query'\nimport * as method from '../../utils/method'\nimport { Headers } from '../../utils/headers'\nimport type { ObjectMap } from '../../../../interfaces'\n\ntype Options = {\n  url: string;\n  body?: Object;\n  method: string;\n  logger: Logger;\n  headers: ObjectMap<string>;\n}\n\nexport function create(options: Options): Request {\n  const urlData = url.parse(options.url)\n  const params = query.fromObject(qs.parse(urlData.query))\n  const headers = new Headers(options.headers)\n\n  if (options.body) {\n    Object.assign(params, options.body)\n  }\n\n  headers.freeze()\n\n  return new Request({\n    params,\n    headers,\n    url: { ...urlData, params: [] },\n    logger: options.logger,\n    method: method.resolve(options.method, headers),\n    encrypted: urlData.protocol === 'https:',\n    defaultParams: {},\n  })\n}\n","/* @flow */\n\nimport Response from '../../../response'\nimport { ResponseHeaders } from '../../utils/headers'\nimport noop from '../../../../utils/noop'\nimport type Logger from '../../../logger'\n\ntype Options = {\n  logger: Logger;\n  resolve?: (data: any) => void;\n}\n\nexport function create(options: Options): Response {\n  return new Response({\n    stats: [],\n    headers: new ResponseHeaders(noop),\n    logger: options.logger,\n    statusCode: 200,\n    statusMessage: 'OK',\n\n    end(body: string): void {\n      this.send(body)\n    },\n\n    send(body: string): void {\n      if (options.resolve) {\n        const {\n          headers,\n          statusCode,\n          statusMessage,\n        } = this\n\n        options.resolve({\n          body,\n          headers,\n          statusCode,\n          statusText: statusMessage,\n        })\n      }\n    },\n\n    status(code: number): Response {\n      this.statusCode = code\n      return this\n    },\n\n    getHeader(key: string): void | string {\n      return this.headers.get(key)\n    },\n\n    setHeader(key: string, value: string): void {\n      this.headers.set(key, value)\n    },\n\n    removeHeader(key: string): void {\n      this.headers.delete(key)\n    },\n  })\n}\n","/* @flow */\n\nimport type { Adapter } from '../index'\nimport type Application from '../../application'\nimport type { ObjectMap } from '../../../interfaces'\n\nimport * as request from './request'\nimport * as response from './response'\n\ntype Options = {\n  url: string;\n  body?: Object;\n  method: string;\n  headers: ObjectMap<string>;\n  resolve?: (data: any) => void;\n}\n\nfunction createAdapter({ logger }: Application): Adapter {\n  function adapter({ url, body, method, headers, resolve }: Options) {\n    return Promise.resolve([\n      request.create({\n        url,\n        body,\n        method,\n        logger,\n        headers,\n      }),\n      response.create({\n        logger,\n        resolve,\n      }),\n    ])\n  }\n\n  Object.defineProperty(adapter, 'type', {\n    value: 'mock',\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  })\n\n  return adapter\n}\n\nexport default createAdapter\nexport { request, response }\n","/* @flow */\n\nimport { NODE_ENV } from '../../constants'\nimport { mock, http } from '../adapter'\n// eslint-disable-next-line no-duplicate-imports\nimport type { AdapterFactory } from '../adapter'\nimport type { Config as LoggerConfig } from '../logger'\n\nexport type Config = {\n  server: {\n    cors: {\n      enabled: boolean;\n    };\n  };\n  adapter: AdapterFactory;\n  logging: LoggerConfig;\n}\n\nexport function createDefaultConfig(): Config {\n  const isTestENV = NODE_ENV === 'test'\n  const isProdENV = NODE_ENV === 'production'\n\n  return {\n    server: {\n      cors: {\n        enabled: false,\n      },\n    },\n    adapter: isTestENV ? mock : http,\n    logging: {\n      level: isProdENV ? 'INFO' : 'DEBUG',\n      format: isProdENV ? 'json' : 'text',\n      enabled: !isTestENV,\n      filter: {\n        params: [],\n      },\n    },\n  }\n}\n","/* @flow */\n\nimport entries from './entries'\nimport setType from './set-type'\nimport isObject from './is-object'\n\nfunction hasOwnProperty(target: Object, key: string): boolean {\n  return Reflect.apply(Object.prototype.hasOwnProperty, target, [key])\n}\n\n/**\n * @private\n */\nexport default function merge<T: Object, U: Object>(dest: T, source: U): T & U {\n  return setType(() => entries(source).reduce((result, [key, value]) => {\n    if (hasOwnProperty(result, key) && isObject(value)) {\n      const currentValue = Reflect.get(result, key)\n\n      if (isObject(currentValue)) {\n        return {\n          ...result,\n          [key]: merge(currentValue, value)\n        }\n      }\n    }\n\n    return {\n      ...result,\n      [key]: value\n    }\n  }, {\n    ...dest\n  }))\n}\n","/* @flow */\n\nimport { dasherize } from 'inflection'\n\nimport chain from '../../../utils/chain'\nimport underscore from '../../../utils/underscore'\n\nconst NAMESPACE_DELIMITER = /\\$-/g\n\n/**\n * @private\n */\nexport default function formatKey(\n  key: string,\n  formatter?: (source: string) => string\n) {\n  return chain(key)\n    .pipe(str => {\n      if (formatter) {\n        return formatter(str)\n      }\n\n      return str\n    })\n    .pipe(underscore)\n    .pipe(dasherize)\n    .pipe(str => str.replace(NAMESPACE_DELIMITER, '/'))\n    .value()\n}\n","/* @flow */\n\nimport { join as joinPath } from 'path'\n\nimport { Migration } from '../../database'\nimport { FreezeableMap } from '../../freezeable'\nimport { createDefaultConfig } from '../../config'\nimport merge from '../../../utils/merge'\nimport chain from '../../../utils/chain'\nimport entries from '../../../utils/entries'\n\nimport formatKey from './format-key'\n\nconst SUFFIX_PATTERN = /^.+(Controller|Down|Serializer|Up)/\n\n/**\n * @private\n */\nfunction normalize(manifest: Object) {\n  return entries(manifest).reduce((obj, [key, value]) => {\n    if (SUFFIX_PATTERN.test(key)) {\n      const suffix = key.replace(SUFFIX_PATTERN, '$1')\n      const stripSuffix = source => source.replace(suffix, '')\n\n      switch (suffix) {\n        case 'Controller':\n          obj.controllers.set(formatKey(key, stripSuffix), value)\n          break\n\n        case 'Serializer':\n          obj.serializers.set(formatKey(key, stripSuffix), value)\n          break\n\n        case 'Up':\n        case 'Down':\n          obj.migrations.set(\n            formatKey(key),\n            Reflect.construct(Migration, [value])\n          )\n          break\n\n        default:\n          break\n      }\n    } else {\n      switch (key) {\n        case 'Application':\n        case 'routes':\n        case 'seed':\n          Reflect.set(obj, formatKey(key), value)\n          break\n\n        case 'config':\n          Reflect.set(obj, 'config', {\n            ...merge(createDefaultConfig(), {\n              ...obj.config,\n              ...value\n            })\n          })\n          break\n\n        case 'database':\n          Reflect.set(obj, 'config', {\n            ...obj.config,\n            database: value\n          })\n          break\n\n        default:\n          obj.models.set(formatKey(key), value)\n          break\n      }\n    }\n\n    return obj\n  }, {\n    config: {},\n    controllers: new FreezeableMap(),\n    migrations: new FreezeableMap(),\n    models: new FreezeableMap(),\n    serializers: new FreezeableMap()\n  })\n}\n\n/**\n * @private\n */\nexport default function bundleFor(path: string): FreezeableMap<string, any> {\n  const manifest: Object = Reflect.apply(require, null, [\n    joinPath(path, 'dist', 'bundle')\n  ])\n\n  return chain(manifest)\n    .pipe(normalize)\n    .pipe(entries)\n    .construct(FreezeableMap)\n    .value()\n    .freeze()\n}\n","/* @flow */\n\nimport { FreezeableMap } from '../../freezeable'\nimport type { Bundle$Namespace, Bundle$NamespaceGroup } from '../index'\n\n/**\n * @private\n */\nexport function resolve<T>(\n  group: Bundle$Namespace<T>\n): Bundle$NamespaceGroup<T> {\n  return Array\n    .from(group)\n    .map(([key, value]) => {\n      let namespace = key.split('/')\n\n      namespace = namespace\n        .slice(0, Math.max(namespace.length - 1, 0))\n        .join('/')\n\n      if (namespace) {\n        return [\n          key.substr(namespace.length + 1),\n          value,\n          namespace\n        ]\n      }\n\n      return [\n        key,\n        value,\n        'root'\n      ]\n    })\n    .reduce((map, [key, value, namespace]) => {\n      let nsValue = map.get(namespace)\n\n      if (!nsValue) {\n        nsValue = new FreezeableMap()\n      }\n\n      return map.set(namespace, nsValue.set(key, value))\n    }, new FreezeableMap())\n}\n\nexport { default as closestAncestor } from './utils/closest-ancestor'\nexport { default as closestChild } from './utils/closest-child'\n","/* @flow */\n\nimport { FreezeableMap } from '../../freezeable'\nimport { resolve } from '../resolver'\nimport chain from '../../../utils/chain'\nimport type { Bundle$Namespace, Bundle$NamespaceGroup } from '../index' // eslint-disable-line max-len, no-unused-vars\n\nimport createParentBuilder from './utils/create-parent-builder'\nimport createChildrenBuilder from './utils/create-children-builder'\nimport type { Builder$Construct } from './interfaces'\n\n/**\n * @private\n */\nexport function build<T>(\n  group: Bundle$Namespace<Class<T>>,\n  construct: Builder$Construct<T>\n): Bundle$Namespace<T> {\n  return chain(group)\n    .pipe(resolve)\n    .pipe(createParentBuilder(construct))\n    .pipe(createChildrenBuilder(construct))\n    .pipe(arr => arr.reduce((result, value) => [...result, ...value], []))\n    .construct(FreezeableMap)\n    .value()\n}\n","/* @flow */\n\nimport bundleFor from './utils/bundle-for'\nimport type { Loader } from './interfaces'\n\n/**\n * @private\n */\nexport function createLoader(path: string): Loader {\n  let bundle\n\n  return function load(type) {\n    if (!bundle) {\n      bundle = bundleFor(path)\n    }\n\n    return bundle.get(type)\n  }\n}\n\nexport { build } from './builder'\nexport { closestAncestor, closestChild } from './resolver'\n\nexport type {\n  Loader,\n  Bundle$Namespace,\n  Bundle$NamespaceGroup\n} from './interfaces'\n","import { join as joinPath } from 'path'\n\nimport type Knex from 'knex'\n\nimport { NODE_ENV, DATABASE_URL } from '../../../constants'\nimport { VALID_DRIVERS } from '../constants'\nimport { InvalidDriverError } from '../errors'\n\n/**\n * @private\n */\nexport default function connect(path: string, config: Object = {}): Knex {\n  let { pool } = config\n\n  const {\n    host,\n    socket,\n    driver,\n    memory,\n    database,\n    username,\n    password,\n    port,\n    ssl,\n    url\n  } = config\n\n  if (VALID_DRIVERS.indexOf(driver) < 0) {\n    throw new InvalidDriverError(driver)\n  }\n\n  if (pool && typeof pool === 'number') {\n    pool = {\n      min: pool > 1 ? 2 : 1,\n      max: pool\n    }\n  }\n\n  const knex: Class<Knex> = require(joinPath(path, 'node_modules', 'knex'))\n  const usingSQLite = driver === 'sqlite3'\n  let filename\n\n  if (usingSQLite) {\n    if (memory) {\n      pool = undefined\n      filename = ':memory:'\n    } else {\n      filename = joinPath(\n        path,\n        'db',\n        `${database || 'default'}_${NODE_ENV}.sqlite`\n      )\n    }\n  }\n\n  return knex({\n    pool,\n    connection: DATABASE_URL || url || {\n      ssl,\n      host,\n      port,\n      filename,\n      database,\n      password,\n      user: username,\n      socketPath: socket,\n    },\n    debug: false,\n    client: driver,\n    useNullAsDefault: usingSQLite,\n  })\n}\n","/* @flow */\n\nimport type Database from '../index'\n\n/**\n * @private\n */\nexport default async function createMigrations(\n  schema: $PropertyType<Database, 'schema'>\n): Promise<boolean> {\n  const hasTable: boolean = await schema().hasTable('migrations')\n\n  if (!hasTable) {\n    await schema().createTable('migrations', table => {\n      table.string('version', 16).primary()\n    })\n  }\n\n  return true\n}\n","/* @flow */\n\nimport { readdir } from '../../fs'\n\n/**\n * @private\n */\nexport default async function pendingMigrations(\n  appPath: string,\n  table: () => Object\n): Promise<Array<string>> {\n  const migrations: Array<string> = await readdir(`${appPath}/db/migrate`)\n  const versions: Array<string> = await table()\n      .select()\n      .then(data => data.map(({ version }) => version))\n\n  return migrations.filter(migration => versions.indexOf(\n    migration.replace(/^(\\d{16})-.+$/g, '$1')\n  ) < 0)\n}\n","/* @flow */\n\nimport { worker, isMaster } from 'cluster'\n\nimport { NODE_ENV } from '../../constants'\nimport { createLoader } from '../loader'\nimport { composeAsync } from '../../utils/compose'\n\nimport { ConfigMissingError, MigrationsPendingError } from './errors'\nimport connect from './utils/connect'\nimport createMigrations from './utils/create-migrations'\nimport pendingMigrations from './utils/pending-migrations'\n\n// eslint-disable-next-line no-unused-vars\nimport type Database, { Database$opts } from './index'\n\n/**\n * @private\n */\nexport default async function initialize<T: Database>(\n  instance: T,\n  opts: Database$opts\n): Promise<T> {\n  const { path, models, logger, checkMigrations } = opts\n  let { config } = opts\n\n  config = Reflect.get(config, NODE_ENV)\n\n  if (!config) {\n    throw new ConfigMissingError(NODE_ENV)\n  }\n\n  const {\n    debug = (NODE_ENV === 'development')\n  }: {\n    debug: boolean\n  } = config\n\n  Object.defineProperties(instance, {\n    path: {\n      value: path,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n    debug: {\n      value: debug,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n    models: {\n      value: models,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n    logger: {\n      value: logger,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n    config: {\n      value: config,\n      writable: false,\n      enumerable: true,\n      configurable: false\n    },\n    schema: {\n      value: () => instance.connection.schema,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    },\n    connection: {\n      value: connect(path, config),\n      writable: false,\n      enumerable: false,\n      configurable: false\n    }\n  })\n\n  if (config.memory && config.driver === 'sqlite3') {\n    const load = createLoader(path)\n    const seed = load('seed')\n    const migrations = load('migrations')\n\n    await createMigrations(instance.schema)\n\n    const pending = await pendingMigrations(path, () => (\n      instance.connection('migrations')\n    ))\n\n    const runners = pending\n      .map(name => {\n        const version = name.replace(/^(\\d{16})-.+$/g, '$1')\n        const key = name.replace(new RegExp(`${version}-(.+)\\\\.js`), '$1')\n\n        return [version, migrations.get(`${key}-up`)]\n      })\n      .filter(([, migration]) => Boolean(migration))\n      .reverse()\n      .map(([version, migration]) => () => {\n        const query = migration.run(instance.schema())\n\n        return query.then(() => (\n          instance.connection('migrations').insert({\n            version\n          })\n        ))\n      })\n\n    await composeAsync(...runners)()\n    await instance.connection.transaction(trx => (\n      seed(trx, instance.connection)\n    ))\n  } else if (isMaster || (worker && worker.id === 1)) {\n    await createMigrations(instance.schema)\n\n    if (checkMigrations) {\n      const pending = await pendingMigrations(path, () => (\n        instance.connection('migrations')\n      ))\n\n      if (pending.length) {\n        throw new MigrationsPendingError(pending)\n      }\n    }\n  }\n\n  await Promise.all(\n    Array\n      .from(models.values())\n      .map(model => (\n        model.initialize(instance, () => instance.connection(model.tableName))\n      ))\n  )\n\n  return instance\n}\n","/* @flow */\n\nimport { dasherize, singularize } from 'inflection'\n\nimport { compose } from '../../../utils/compose'\nimport underscore from '../../../utils/underscore'\n\n/**\n * @private\n */\nexport default compose(singularize, dasherize, underscore)\n","/* @flow */\n\nfunction formatInt(int: number): string {\n  return (int / 10).toString().replace('.', '').substr(0, 2)\n}\n\nexport function* padding(\n  char: string,\n  amount: number\n): Generator<string, void, void> {\n  for (let i = 0; i < amount; i += 1) {\n    yield char\n  }\n}\n\nexport default function generateTimestamp(): string {\n  const now = new Date()\n  const timestamp = now.toISOString()\n    .substr(0, 10)\n    .split('-')\n    .join('')\n    + formatInt(now.getHours())\n    + formatInt(now.getMinutes())\n    + formatInt(now.getSeconds())\n    + formatInt(now.getMilliseconds())\n\n  return timestamp + [...padding('0', 16 - timestamp.length)].join('')\n}\n","/* @flow */\n\nimport type { Migration$Fn } from './interfaces'\n\n/**\n * @private\n */\nclass Migration<T: Object> {\n  fn: Migration$Fn<T>;\n\n  constructor(fn: Migration$Fn<T>) {\n    this.fn = fn\n  }\n\n  run(schema: T): T {\n    return this.fn(schema)\n  }\n}\n\nexport default Migration\nexport { default as generateTimestamp } from './utils/generate-timestamp'\nexport type { Migration$Fn } from './interfaces'\n","/* @flow */\n\nimport type Knex from 'knex'\n\nimport type Logger from '../logger'\n\nimport { ModelMissingError } from './errors'\nimport Model from './model'\nimport initialize from './initialize'\nimport normalizeModelName from './utils/normalize-model-name'\nimport type { Database$opts } from './interfaces'\n\n/**\n * @private\n */\nclass Database {\n  path: string;\n\n  debug: boolean;\n\n  logger: Logger;\n\n  config: Object;\n\n  schema: () => $PropertyType<Knex, 'schema'>;\n\n  connection: Knex;\n\n  models: Map<string, Class<Model>>;\n\n  constructor({\n    path,\n    models,\n    config,\n    logger,\n    checkMigrations\n  }: Database$opts): Promise<Database> {\n    return initialize(this, {\n      path,\n      models,\n      config,\n      logger,\n      checkMigrations\n    })\n  }\n\n  /**\n   * A boolean value representing whether or not connection pool configuration\n   * has been supplied. This is used for determining wheter or not transactions\n   * will be used when writing to the database.\n   *\n   * @property hasPool\n   * @type {Boolean}\n   */\n  get hasPool(): boolean {\n    return Boolean(this.config.pool)\n  }\n\n  modelFor(type: string): Class<Model> {\n    const model = this.models.get(normalizeModelName(type))\n\n    if (!model) {\n      throw new ModelMissingError(type)\n    }\n\n    return model\n  }\n}\n\nexport default Database\nexport { default as Query } from './query'\nexport { default as Model, tableFor } from './model'\nexport { default as Migration, generateTimestamp } from './migration'\nexport { default as connect } from './utils/connect'\nexport { default as typeForColumn } from './utils/type-for-column'\nexport { default as createMigrations } from './utils/create-migrations'\nexport { default as pendingMigrations } from './utils/pending-migrations'\n\nexport type { Database$opts, Config } from './interfaces'\n","/* @flow */\n\nimport { EOL } from 'os'\n\nimport { classify, camelize } from 'inflection'\n\nimport template from '../../template'\nimport indent from '../utils/indent'\nimport chain from '../../../utils/chain'\nimport entries from '../../../utils/entries'\nimport underscore from '../../../utils/underscore'\n\nconst VALID_ATTR = /^(\\w|-)+:(\\w|-)+$/\nconst RELATIONSHIP = /^belongs-to|has-(one|many)$/\n\n/**\n * @private\n */\nexport default (name: string, attrs: Array<string>) => {\n  const normalized = chain(name)\n    .pipe(underscore)\n    .pipe(classify)\n    .value()\n\n  return template`\n    import { Model } from 'lux-framework';\n\n    class ${normalized} extends Model {\n    ${entries((attrs || [])\n      .filter(attr => VALID_ATTR.test(attr))\n      .map(attr => attr.split(':'))\n      .filter(([, type]) => RELATIONSHIP.test(type))\n      .reduce((types, [related, type]) => {\n        const key = chain(type)\n          .pipe(underscore)\n          .pipe(str => camelize(str, true))\n          .value()\n\n        const value = Reflect.get(types, key)\n\n        if (value) {\n          const inverse = camelize(normalized, true)\n          const relatedKey = chain(related)\n            .pipe(underscore)\n            .pipe(str => camelize(str, true))\n            .value()\n\n          return {\n            ...types,\n            [key]: [\n              ...value,\n              `${indent(8)}${relatedKey}: {${EOL}`\n              + `${indent(10)}inverse: '${inverse}'${EOL}`\n              + `${indent(8)}}`\n            ]\n          }\n        }\n\n        return types\n      }, {\n        hasOne: [],\n        hasMany: [],\n        belongsTo: []\n      }))\n      .filter(([, value]) => value.length)\n      .reduce((result, [key, value], index) => (\n        chain(result)\n          .pipe(str => {\n            if (index && str.length) {\n              return `${str}${EOL.repeat(2)}`\n            }\n\n            return str\n          })\n          .pipe(str => (\n            str // eslint-disable-line prefer-template\n            + `${indent(index === 0 ? 2 : 6)}static ${key} = {${EOL}`\n            + `${value.join(`,${EOL.repeat(2)}`)}${EOL}` // eslint-disable-line max-len, comma-spacing\n            + `${indent(6)}};`\n          ))\n          .value()\n      ), '')}\n    }\n\n    export default ${normalized};\n  `\n}\n","/* @flow */\n\nimport { classify, camelize, pluralize } from 'inflection'\n\nimport chain from '../../../utils/chain'\nimport entries from '../../../utils/entries'\nimport underscore from '../../../utils/underscore'\nimport template from '../../template'\nimport indent from '../utils/indent'\n\n/**\n * @private\n */\nexport default (name: string, attrs: Array<string>): string => {\n  let normalized = chain(name)\n    .pipe(underscore)\n    .pipe(classify)\n    .value()\n\n  if (!normalized.endsWith('Application')) {\n    normalized = pluralize(normalized)\n  }\n\n  const body = entries(\n    attrs\n      .filter(attr => /^(\\w|-)+:(\\w|-)+$/g.test(attr))\n      .map(attr => attr.split(':'))\n      .reduce((obj, parts) => {\n        const [, type] = parts\n        let [attr] = parts\n        let {\n          hasOne,\n          hasMany,\n          attributes\n        } = obj\n\n        attr = `${indent(8)}'${camelize(underscore(attr), true)}'`\n\n        switch (type) {\n          case 'belongs-to':\n          case 'has-one':\n            hasOne = [...hasOne, attr]\n            break\n\n          case 'has-many':\n            hasMany = [...hasMany, attr]\n            break\n\n          default:\n            attributes = [...attributes, attr]\n        }\n\n        return {\n          attributes,\n          hasOne,\n          hasMany\n        }\n      }, {\n        attributes: [],\n        belongsTo: [],\n        hasOne: [],\n        hasMany: []\n      })\n  ).reduce((result, group, index) => {\n    const [key] = group\n    let [, value] = group\n    let str = result\n\n    if (value.length) {\n      value = value.join(',\\n')\n\n      if (index && str.length) {\n        str += '\\n\\n'\n      }\n\n      str += `${indent(index === 0 ? 2 : 6)}${key} = ` +\n        `[\\n${value}\\n${indent(6)}];`\n    }\n\n    return str\n  }, '')\n\n  return template`\n    import { Serializer } from 'lux-framework';\n\n    class ${normalized}Serializer extends Serializer {\n    ${body}\n    }\n\n    export default ${normalized}Serializer;\n  `\n}\n","/* @flow */\n\nimport { classify, camelize, pluralize } from 'inflection'\n\nimport template from '../../template'\nimport entries from '../../../utils/entries'\nimport indent from '../utils/indent'\nimport chain from '../../../utils/chain'\nimport underscore from '../../../utils/underscore'\n\n/**\n * @private\n */\nexport default (name: string, attrs: Array<string>): string => {\n  let normalized = chain(name)\n    .pipe(underscore)\n    .pipe(classify)\n    .value()\n\n  if (!normalized.endsWith('Application')) {\n    normalized = pluralize(normalized)\n  }\n\n  const body = entries(\n    attrs\n      .filter(attr => /^(\\w|-)+:(\\w|-)+$/g.test(attr))\n      .map(attr => attr.split(':')[0])\n      .reduce((obj, attr) => ({\n        ...obj,\n        params: [\n          ...obj.params,\n          `${indent(8)}'${camelize(underscore(attr), true)}'`\n        ]\n      }), { params: [] })\n  ).reduce((result, group, index) => {\n    const [key] = group\n    let [, value] = group\n    let str = result\n\n    if (value.length) {\n      value = value.join(',\\n')\n\n      if (index && str.length) {\n        str += '\\n\\n'\n      }\n\n      str += `${indent(index === 0 ? 2 : 6)}${key} = ` +\n        `[\\n${value}\\n${indent(6)}];`\n    }\n\n    return str\n  }, '')\n\n  return template`\n    import { Controller } from 'lux-framework';\n\n    class ${normalized}Controller extends Controller {\n    ${body}\n    }\n\n    export default ${normalized}Controller;\n  `\n}\n","/* @flow */\n\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (): string => template`\n  export function up(schema) {\n\n  }\n\n  export function down(schema) {\n\n  }\n`\n","/* @flow */\n\nimport { pluralize } from 'inflection'\n\nimport template from '../../template'\nimport chain from '../../../utils/chain'\nimport indent from '../utils/indent'\nimport underscore from '../../../utils/underscore'\n\n/**\n * @private\n */\nexport default (name: string, attrs: Array<string> | string): string => {\n  const indices = ['id']\n  const table = chain(name)\n    .pipe(str => str.substr(24))\n    .pipe(underscore)\n    .pipe(pluralize)\n    .value()\n\n  let body = ''\n\n  if (Array.isArray(attrs)) {\n    body = attrs\n      .filter(attr => /^(\\w|-)+:(\\w|-)+$/g.test(attr))\n      .map(attr => attr.split(':'))\n      .filter(([, type]) => !/^has-(one|many)$/g.test(type))\n      .map(attr => {\n        let [column, type] = attr\n\n        column = underscore(column)\n\n        if (type === 'belongs-to') {\n          type = 'integer'\n          column = `${column}_id`\n\n          if (Array.isArray(indices)) {\n            indices.push(column)\n          }\n        }\n\n        return [column, type]\n      })\n      .map((attr, index) => {\n        let [column] = attr\n        const [, type] = attr\n        const shouldIndex = indices.indexOf(column) >= 0\n\n        column = `${indent(index > 0 ? 8 : 0)}table.${type}('${column}')`\n        return shouldIndex ? `${column}.index();` : `${column};`\n      })\n      .join('\\n')\n  }\n\n  return template`\n    export function up(schema) {\n      return schema.createTable('${table}', table => {\n        table.increments('id');\n        ${body}\n        table.timestamps();\n\n        table.index('created_at');\n        table.index('updated_at');\n      });\n    }\n\n    export function down(schema) {\n      return schema.dropTable('${table}');\n    }\n  `\n}\n","/* @flow */\n\nimport { camelize } from 'inflection'\n\nimport chain from '../../../utils/chain'\nimport underscore from '../../../utils/underscore'\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (name: string): string => {\n  const normalized = chain(name)\n    .pipe(underscore)\n    .pipe(str => camelize(str, true))\n    .value()\n\n  return template`\n    export default function ${normalized}(/*request, response*/) {\n\n    }\n  `\n}\n","/* @flow */\n\nimport { camelize } from 'inflection'\n\nimport chain from '../../../utils/chain'\nimport underscore from '../../../utils/underscore'\nimport template from '../../template'\n\n/**\n * @private\n */\nexport default (name: string): string => {\n  const normalized = chain(name)\n    .pipe(underscore)\n    .pipe(str => camelize(str, true))\n    .value()\n\n  return template`\n    export default function ${normalized}() {\n\n    }\n  `\n}\n","/* @flow */\n\n/**\n * @private\n */\nexport default function log(data: string | Error): void {\n  if (data instanceof Error) {\n    process.stdout.write(`${data.stack || data.message}\\n`)\n  } else {\n    process.stderr.write(`${data}\\n`)\n  }\n}\n","/* @flow */\n\nimport { join as joinPath } from 'path'\n\nimport { red, green, yellow } from 'chalk'\n\nimport { rmrf, exists, mkdirRec, writeFile, parsePath } from '../../../fs'\nimport type { Generator, Generator$template } from '../index'\n\nimport log from './log'\n\nconst FORWARD_SLASH = /\\//g\n\n/**\n * @private\n */\nexport default function createGenerator({\n  dir,\n  template,\n  hasConflict = exists\n}: {\n  dir: string;\n  template: Generator$template;\n  hasConflict?: (path: string) => Promise<boolean>;\n}): Generator {\n  return async ({ cwd, attrs, onConflict, ...opts }) => {\n    const path = parsePath(cwd, dir, `${opts.name}.js`)\n    const name = opts.name.replace(FORWARD_SLASH, '-')\n    let action = green('create')\n\n    await mkdirRec(path.dir)\n\n    if (await hasConflict(path.absolute)) {\n      const shouldContinue = await onConflict(path.relative)\n\n      if (shouldContinue && typeof shouldContinue === 'string') {\n        await rmrf(joinPath(path.dir, shouldContinue))\n        log(`${red('remove')} ${joinPath(dir, shouldContinue)}`)\n      } else if (shouldContinue && typeof shouldContinue === 'boolean') {\n        action = yellow('overwrite')\n        await rmrf(path.absolute)\n      } else {\n        log(`${yellow('skip')} ${path.relative}`)\n        return\n      }\n    }\n\n    await writeFile(path.absolute, Buffer.from(template(name, attrs)))\n    log(`${action} ${path.relative}`)\n  }\n}\n","/* @flow */\n\nimport { exists, readdir, parsePath } from '../../../fs'\nimport type { Generator$opts } from '../index'\n\nexport function detectConflict(path: string): Promise<boolean> {\n  const { dir, base } = parsePath(path)\n  const pattern = new RegExp(`^\\\\d+-${base.substr(17)}$`)\n\n  return exists(pattern, dir)\n}\n\nexport function createConflictResolver({ cwd, onConflict }: {\n  cwd: $PropertyType<Generator$opts, 'cwd'>;\n  onConflict: $PropertyType<Generator$opts, 'onConflict'>;\n}): $PropertyType<Generator$opts, 'onConflict'> {\n  return async path => {\n    if (await onConflict(path)) {\n      const parsed = parsePath(cwd, path)\n      const migrations = await readdir(parsed.dir)\n\n      return migrations.find(\n        file => file.substr(17) === parsed.base.substr(17)\n      ) || false\n    }\n\n    return false\n  }\n}\n","/* @flow */\n\nimport { posix, join as joinPath } from 'path'\n\nimport { green } from 'chalk'\nimport { pluralize, singularize } from 'inflection'\n\nimport { NAMESPACED_RESOURCE_MESSAGE } from '../constants'\nimport { generateTimestamp } from '../../../database'\nimport { exists, readFile, writeFile } from '../../../fs'\nimport modelTemplate from '../../templates/model'\nimport serializerTemplate from '../../templates/serializer'\nimport controllerTemplate from '../../templates/controller'\nimport emptyMigrationTemplate from '../../templates/empty-migration'\nimport modelMigrationTemplate from '../../templates/model-migration'\nimport middlewareTemplate from '../../templates/middleware'\nimport utilTemplate from '../../templates/util'\nimport chain from '../../../../utils/chain'\nimport type { Generator$opts } from '../index'\n\nimport log from './log'\nimport createGenerator from './create-generator'\nimport { createConflictResolver, detectConflict } from './migration-conflict'\n\n/**\n * @private\n */\nexport async function controller(opts: Generator$opts): Promise<void> {\n  const { cwd } = opts\n  let { name } = opts\n\n  const dir = joinPath('app', 'controllers')\n  const generate = createGenerator({\n    dir,\n    template: controllerTemplate\n  })\n\n  if (!name.endsWith('application')) {\n    name = pluralize(name)\n  }\n\n  await generate({\n    ...opts,\n    cwd,\n    name\n  })\n\n  const namespace = posix.dirname(name)\n\n  if (namespace !== '.') {\n    const hasParent = await exists(\n      joinPath(cwd, dir, ...[...namespace.split('/'), 'application.js'])\n    )\n\n    if (!hasParent) {\n      await controller({\n        ...opts,\n        cwd,\n        name: `${namespace}/application`,\n        attrs: []\n      })\n    }\n  }\n}\n\n/**\n * @private\n */\nexport async function serializer(opts: Generator$opts): Promise<void> {\n  const { cwd } = opts\n  let { name } = opts\n\n  const dir = joinPath('app', 'serializers')\n  const generate = createGenerator({\n    dir,\n    template: serializerTemplate\n  })\n\n  if (!name.endsWith('application')) {\n    name = pluralize(name)\n  }\n\n  await generate({\n    ...opts,\n    cwd,\n    name\n  })\n\n  const namespace = posix.dirname(name)\n\n  if (namespace !== '.') {\n    const hasParent = await exists(\n      joinPath(cwd, dir, ...[...namespace.split('/'), 'application.js'])\n    )\n\n    if (!hasParent) {\n      await serializer({\n        ...opts,\n        cwd,\n        name: `${namespace}/application`,\n        attrs: []\n      })\n    }\n  }\n}\n\n/**\n * @private\n */\nexport function migration(opts: Generator$opts) {\n  const { cwd, onConflict } = opts\n  let { name } = opts\n\n  const dir = joinPath('db', 'migrate')\n  const generate = createGenerator({\n    dir,\n    template: emptyMigrationTemplate,\n    hasConflict: detectConflict\n  })\n\n  name = chain(name)\n    .pipe(posix.basename)\n    .pipe(str => `${generateTimestamp()}-${str}`)\n    .value()\n\n  return generate({\n    ...opts,\n    cwd,\n    name,\n    onConflict: createConflictResolver({\n      cwd,\n      onConflict\n    })\n  })\n}\n\n/**\n * @private\n */\nexport function modelMigration(opts: Generator$opts) {\n  const { cwd, onConflict } = opts\n  let { name } = opts\n\n  const dir = joinPath('db', 'migrate')\n  const generate = createGenerator({\n    dir,\n    template: modelMigrationTemplate,\n    hasConflict: detectConflict\n  })\n\n  name = chain(name)\n    .pipe(posix.basename)\n    .pipe(pluralize)\n    .pipe(str => `${generateTimestamp()}-create-${str}`)\n    .value()\n\n  return generate({\n    ...opts,\n    cwd,\n    name,\n    onConflict: createConflictResolver({\n      cwd,\n      onConflict\n    })\n  })\n}\n\n/**\n * @private\n */\nexport async function model(opts: Generator$opts): Promise<void> {\n  let { name } = opts\n  const generate = createGenerator({\n    dir: joinPath('app', 'models'),\n    template: modelTemplate\n  })\n\n  await modelMigration({ name, ...opts })\n\n  name = chain(name)\n    .pipe(posix.basename)\n    .pipe(singularize)\n    .value()\n\n  return generate({\n    ...opts,\n    name\n  })\n}\n\n/**\n * @private\n */\nexport function middleware(opts: Generator$opts) {\n  let { name } = opts\n  const parts = name.split('/')\n\n  name = parts.pop() || name\n\n  const generate = createGenerator({\n    dir: joinPath('app', 'middleware', ...parts),\n    template: middlewareTemplate\n  })\n\n  return generate({\n    ...opts,\n    name\n  })\n}\n\n/**\n * @private\n */\nexport function util(opts: Generator$opts) {\n  let { name } = opts\n  const parts = name.split('/')\n\n  name = parts.pop() || name\n\n  const generate = createGenerator({\n    dir: joinPath('app', 'utils', ...parts),\n    template: utilTemplate\n  })\n\n  return generate({\n    ...opts,\n    name\n  })\n}\n\n/**\n * @private\n */\nexport async function resource(opts: Generator$opts) {\n  await model(opts)\n  await controller(opts)\n  await serializer(opts)\n\n  if (posix.dirname(opts.name) !== '.') {\n    log(NAMESPACED_RESOURCE_MESSAGE)\n    return\n  }\n\n  const path = joinPath(opts.cwd, 'app', 'routes.js')\n  const routes = chain(await readFile(path))\n    .pipe(buf => buf.toString('utf8'))\n    .pipe(str => str.split('\\n'))\n    .pipe(lines => lines.reduce((result, line, index, arr) => {\n      const closeIndex = arr.lastIndexOf('}')\n      let str = result\n\n      if (line && index <= closeIndex) {\n        str += `${line}\\n`\n      }\n\n      if (index + 1 === closeIndex) {\n        str += `  this.resource('${pluralize(opts.name)}');\\n`\n      }\n\n      return str\n    }, ''))\n    .value()\n\n  await writeFile(path, Buffer.from(routes))\n  log(`${green('update')} app/routes.js`)\n}\n","/* @flow */\n\nimport type { Generator } from '../index'\n\nimport * as generators from './generate-type'\n\nexport default function generatorFor(type: string): Generator {\n  const normalized = type.toLowerCase()\n  const generator: void | Generator = Reflect.get(generators, normalized)\n\n  if (!generator) {\n    throw new Error(`Could not find a generator for '${type}'.`)\n  }\n\n  return generator\n}\n","/* @flow */\n\nimport { red, green } from 'chalk'\n\nimport createPrompt from '../utils/create-prompt'\n\nimport generatorFor from './utils/generator-for'\nimport type { Generator$opts } from './interfaces'\n\n/**\n * @private\n */\nexport async function runGenerator({ cwd, type, name, attrs }: {\n  cwd: $PropertyType<Generator$opts, 'cwd'>;\n  type: $PropertyType<Generator$opts, 'type'>;\n  name: $PropertyType<Generator$opts, 'name'>;\n  attrs: $PropertyType<Generator$opts, 'attrs'>;\n}): Promise<void> {\n  const generator = generatorFor(type)\n  const prompt = createPrompt()\n\n  await generator({\n    cwd,\n    type,\n    name,\n    attrs,\n    onConflict: path => prompt.question(\n      `${green('?')} ${red('Overwrite')} ${path}? (Y/n)\\r`\n    )\n  })\n\n  prompt.close()\n}\n\nexport type {\n  Generator,\n  Generator$opts,\n  Generator$template\n} from './interfaces'\n","/* @flow */\n\nimport { CWD } from '../../../constants'\nimport { runGenerator } from '../generator'\nimport type { Generator$opts } from '../generator' // eslint-disable-line max-len, no-duplicate-imports\n\n/**\n * @private\n */\nexport function generate({\n  cwd = CWD,\n  name,\n  type,\n  attrs = []\n}: Generator$opts): Promise<void> {\n  return runGenerator({\n    cwd,\n    name,\n    type,\n    attrs\n  })\n}\n","import { EOL } from 'os'\n\nimport Ora from 'ora'\nimport { green } from 'chalk'\n\nimport { CWD } from '../../../constants'\nimport { mkdir, writeFile } from '../../fs'\nimport template from '../../template'\nimport exec from '../../../utils/exec'\nimport driverFor from '../utils/driver-for'\nimport appTemplate from '../templates/application'\nimport configTemplate from '../templates/config'\nimport routesTemplate from '../templates/routes'\nimport dbTemplate from '../templates/database'\nimport seedTemplate from '../templates/seed'\nimport pkgJSONTemplate from '../templates/package-json'\nimport babelrcTemplate from '../templates/babelrc'\nimport eslintrcTemplate from '../templates/eslintrc'\nimport readmeTemplate from '../templates/readme'\nimport licenseTemplate from '../templates/license'\nimport gitignoreTemplate from '../templates/gitignore'\n\nimport { generate } from './generate'\n\n/**\n * @private\n */\nexport async function create(name, database) {\n  const driver = driverFor(database)\n  const project = `${CWD}/${name}`\n\n  await mkdir(project)\n\n  await Promise.all([\n    mkdir(`${project}/app`),\n    mkdir(`${project}/config`),\n    mkdir(`${project}/db`)\n  ])\n\n  await Promise.all([\n    mkdir(`${project}/app/models`),\n    mkdir(`${project}/app/serializers`),\n    mkdir(`${project}/app/controllers`),\n    mkdir(`${project}/app/middleware`),\n    mkdir(`${project}/app/utils`),\n    mkdir(`${project}/config/environments`),\n    mkdir(`${project}/db/migrate`)\n  ])\n\n  await Promise.all([\n    writeFile(\n      `${project}/app/index.js`,\n      appTemplate(name)\n    ),\n\n    writeFile(\n      `${project}/app/routes.js`,\n      routesTemplate()\n    ),\n\n    writeFile(\n      `${project}/config/environments/development.js`,\n      configTemplate(name, 'development')\n    ),\n\n    writeFile(\n      `${project}/config/environments/test.js`,\n      configTemplate(name, 'test')\n    ),\n\n    writeFile(\n      `${project}/config/environments/production.js`,\n      configTemplate(name, 'production')\n    ),\n\n    writeFile(\n      `${project}/config/database.js`,\n      dbTemplate(name, driver)\n    ),\n\n    writeFile(\n      `${project}/db/seed.js`,\n      seedTemplate()\n    ),\n\n    writeFile(\n      `${project}/README.md`,\n      readmeTemplate(name)\n    ),\n\n    writeFile(\n      `${project}/LICENSE`,\n      licenseTemplate()\n    ),\n\n    writeFile(\n      `${project}/package.json`,\n      pkgJSONTemplate(name, database)\n    ),\n\n    writeFile(\n      `${project}/.babelrc`,\n      babelrcTemplate()\n    ),\n\n    writeFile(\n      `${project}/.eslintrc.json`,\n      eslintrcTemplate()\n    ),\n\n    writeFile(\n      `${project}/.gitignore`,\n      gitignoreTemplate()\n    )\n  ])\n\n  const logOutput = template`\n    ${green('create')} app/index.js\n    ${green('create')} app/routes.js\n    ${green('create')} bin/app.js\n    ${green('create')} config/environments/development.js\n    ${green('create')} config/environments/test.js\n    ${green('create')} config/environments/production.js\n    ${green('create')} config/database.js\n    ${green('create')} db/migrate\n    ${green('create')} db/seed.js\n    ${green('create')} README.md\n    ${green('create')} LICENSE\n    ${green('create')} package.json\n    ${green('create')} .babelrc\n    ${green('create')} .eslintrc.json\n    ${green('create')} .gitignore\n  `\n\n  process.stdout.write(logOutput.substr(0, logOutput.length - 1))\n  process.stdout.write(EOL)\n\n  await Promise.all([\n    generate({\n      cwd: project,\n      type: 'serializer',\n      name: 'application'\n    }),\n\n    generate({\n      cwd: project,\n      type: 'controller',\n      name: 'application'\n    })\n  ])\n\n  await exec('git init && git add .', {\n    cwd: project\n  })\n\n  process.stdout.write(`${green('initialize')} git`)\n  process.stdout.write(EOL)\n\n  const spinner = new Ora({\n    text: 'Installing dependencies from npm...',\n    spinner: 'dots'\n  })\n\n  spinner.start()\n\n  await exec('npm install', {\n    cwd: project\n  })\n\n  await exec(`npm install --save --save-exact ${driver}`, {\n    cwd: project\n  })\n\n  spinner.stop()\n}\n","/* @flow */\n\nconst GITHUB_URL = 'https://github.com/postlight/lux'\n\ntype Options = {\n  line?: number;\n  branch?: string;\n}\n\n/**\n * @private\n */\nexport function fileLink(path: string, opts: Options = {}): string {\n  const { line, branch = 'master' } = opts\n  let link = `${GITHUB_URL}/blob/${branch}/${path}`\n\n  if (line && line >= 0) {\n    link += `#${line}`\n  }\n\n  return link\n}\n","/* @flow */\n\nimport template from '../template'\nimport { fileLink } from '../../utils/github'\n\nexport const VALID_DATABASES = [\n  'postgres',\n  'sqlite',\n  'mysql',\n  'mariadb',\n  'oracle'\n]\n\nconst DB_INTERFACE_URL = fileLink('src/packages/database/interfaces.js', {\n  line: 17\n})\n\nexport const CONNECTION_STRING_MESSAGE = template`\n\n    You're using a URL in your database config (config/database.js).\n\n    In that case, Lux assumes you don't need to create or drop your database.\n    If you'd like to create or drop a database, set up your database config\n    without the url.\n\n    For guidance, see:\n    ${DB_INTERFACE_URL}\n`\n","/* @flow */\n\nclass DatabaseConfigMissingError extends ReferenceError {\n  constructor(environment: string) {\n    super(`Could not find database config for environment \"${environment}\".`)\n  }\n}\n\nexport default DatabaseConfigMissingError\n","/* @flow */\n\nimport { EOL } from 'os'\n\nimport { CWD, NODE_ENV, DATABASE_URL } from '../../../constants'\nimport { CONNECTION_STRING_MESSAGE } from '../constants'\nimport DatabaseConfigMissingError from '../errors/database-config-missing'\nimport { connect } from '../../database'\nimport { writeFile } from '../../fs'\nimport { createLoader } from '../../loader'\n\n/**\n * @private\n */\nexport function dbcreate() {\n  const load = createLoader(CWD)\n  const config = Reflect.get(load('config').database, NODE_ENV)\n\n  if (!config) {\n    throw new DatabaseConfigMissingError(NODE_ENV)\n  }\n\n  if (config.driver === 'sqlite3') {\n    return writeFile(\n      `${CWD}/db/${config.database}_${NODE_ENV}.sqlite`,\n      Buffer.from('')\n    )\n  }\n\n  if (DATABASE_URL || config.url) {\n    process.stderr.write(CONNECTION_STRING_MESSAGE)\n    process.stderr.write(EOL)\n    return Promise.resolve()\n  }\n\n  const { schema } = connect(CWD, config)\n  const query = `CREATE DATABASE ${config.database}`\n\n  return schema.raw(query).once('query', () => {\n    process.stdout.write(query)\n    process.stdout.write(EOL)\n  })\n}\n","/* @flow */\n\nimport { EOL } from 'os'\n\nimport { CWD, NODE_ENV, DATABASE_URL } from '../../../constants'\nimport { CONNECTION_STRING_MESSAGE } from '../constants'\nimport DatabaseConfigMissingError from '../errors/database-config-missing'\nimport { rmrf } from '../../fs'\nimport { connect } from '../../database'\nimport { createLoader } from '../../loader'\n\n/**\n * @private\n */\nexport function dbdrop() {\n  const load = createLoader(CWD)\n  const config = Reflect.get(load('config').database, NODE_ENV)\n\n  if (!config) {\n    throw new DatabaseConfigMissingError(NODE_ENV)\n  }\n\n  if (config.driver === 'sqlite3') {\n    return rmrf(`${CWD}/db/${config.database}_${NODE_ENV}.sqlite`)\n  }\n\n  if (DATABASE_URL || config.url) {\n    process.stderr.write(CONNECTION_STRING_MESSAGE)\n    process.stderr.write(EOL)\n    return Promise.resolve()\n  }\n\n  const { schema } = connect(CWD, config)\n  const query = `DROP DATABASE IF EXISTS ${config.database}`\n\n  return schema.raw(query).once('query', () => {\n    process.stdout.write(query)\n    process.stdout.write(EOL)\n  })\n}\n","import { EOL } from 'os'\n\nimport { CWD } from '../../../constants'\nimport Database, { pendingMigrations } from '../../database'\nimport Logger, { sql } from '../../logger'\nimport { createLoader } from '../../loader'\nimport { composeAsync } from '../../../utils/compose'\n\n/**\n * @private\n */\nexport async function dbmigrate() {\n  const load = createLoader(CWD)\n\n  const { database: config } = load('config')\n  const models = load('models')\n  const migrations = load('migrations')\n\n  const { connection, schema } = await new Database({\n    config,\n    models,\n    path: CWD,\n    checkMigrations: false,\n\n    logger: new Logger({\n      enabled: false\n    })\n  })\n\n  const pending = await pendingMigrations(CWD, () => connection('migrations'))\n\n  if (pending.length) {\n    const runners = pending\n      .map(name => {\n        const version = name.replace(/^(\\d{16})-.+$/g, '$1')\n        const key = name.replace(new RegExp(`${version}-(.+)\\\\.js`), '$1')\n\n        return [version, migrations.get(`${key}-up`)]\n      })\n      .filter(([, migration]) => Boolean(migration))\n      .reverse()\n      .map(([version, migration]) => () => {\n        const query = migration.run(schema())\n\n        return query\n          .on('query', () => {\n            process.stdout.write(sql`${query.toString()}`)\n            process.stdout.write(EOL)\n          })\n          .then(() => (\n            connection('migrations').insert({\n              version\n            })\n          ))\n      })\n\n    await composeAsync(...runners)()\n  }\n\n  return true\n}\n","import { EOL } from 'os'\n\nimport { CWD } from '../../../constants'\nimport Database from '../../database'\nimport Logger, { sql } from '../../logger'\nimport { readdir } from '../../fs'\nimport { createLoader } from '../../loader'\n\n/**\n * @private\n */\nexport async function dbrollback() {\n  const load = createLoader(CWD)\n\n  const { database: config } = load('config')\n  const models = load('models')\n  const migrations = load('migrations')\n\n  const { connection, schema } = await new Database({\n    config,\n    models,\n    path: CWD,\n    checkMigrations: false,\n\n    logger: new Logger({\n      enabled: false\n    })\n  })\n\n  const migrationFiles = await readdir(`${CWD}/db/migrate`)\n\n  if (migrationFiles.length) {\n    let migration\n    let version = await connection('migrations')\n      .orderBy('version', 'desc')\n      .first()\n\n    if (version && version.version) {\n      version = version.version\n    }\n\n    const target = migrationFiles.find(m => m.indexOf(version) === 0)\n\n    if (target) {\n      migration = target.replace(new RegExp(`${version}-(.+)\\\\.js`), '$1')\n      migration = migrations.get(`${migration}-down`)\n\n      if (migration) {\n        const query = migration.run(schema())\n\n        await query.on('query', () => {\n          process.stdout.write(sql`${query.toString()}`)\n          process.stdout.write(EOL)\n        })\n\n        await connection('migrations').where({\n          version\n        }).del()\n      }\n    }\n  }\n}\n","import { CWD } from '../../../constants'\nimport Logger from '../../logger'\nimport Database from '../../database'\nimport { createLoader } from '../../loader'\n\n/**\n * @private\n */\nexport function dbseed() {\n  const load = createLoader(CWD)\n  const { database: config } = load('config')\n  const seed = load('seed')\n  const models = load('models')\n\n  return new Database({\n    config,\n    models,\n    path: CWD,\n    logger: new Logger({\n      enabled: false\n    })\n  }).then(store => (\n    store.connection.transaction(trx => seed(trx, store.connection))\n  ))\n}\n","import { EOL } from 'os'\n\nimport { red, green } from 'chalk'\nimport { pluralize, singularize } from 'inflection'\n\nimport { CWD } from '../../../constants'\nimport { rmrf, exists, readdir, readFile, writeFile } from '../../fs'\n\n/**\n * @private\n */\nexport async function destroyType(type, name) {\n  const normalizedType = type.toLowerCase()\n  let normalizedName = name\n  let path\n  let migrations\n\n  switch (normalizedType) {\n    case 'model':\n      normalizedName = singularize(normalizedName)\n      path = `app/${pluralize(normalizedType)}/${normalizedName}.js`\n      break\n\n    case 'migration':\n      migrations = await readdir(`${CWD}/db/migrate`)\n\n      normalizedName = migrations.find(\n        file => `${normalizedName}.js` === file.substr(17)\n      )\n\n      path = `db/migrate/${normalizedName}`\n      break\n\n    case 'controller':\n    case 'serializer':\n      normalizedName = pluralize(normalizedName)\n      path = `app/${pluralize(normalizedType)}/${normalizedName}.js`\n      break\n\n    case 'middleware':\n      path = `app/${normalizedType}/${normalizedName}.js`\n      break\n\n    case 'util':\n      path = `app/${pluralize(normalizedType)}/${normalizedName}.js`\n      break\n\n    default:\n      return\n  }\n\n  if (await exists(`${CWD}/${path}`)) {\n    await rmrf(`${CWD}/${path}`)\n\n    process.stdout.write(`${red('remove')} ${path}`)\n    process.stdout.write(EOL)\n  }\n}\n\n/**\n * @private\n */\nexport async function destroy({ type, name }: {\n  type: string;\n  name: string;\n}) {\n  if (type === 'resource') {\n    const routes = (await readFile(`${CWD}/app/routes.js`))\n      .toString('utf8')\n      .split('\\n')\n      .reduce((lines, line) => {\n        const pattern = new RegExp(\n          `\\\\s*this.resource\\\\(('|\"|\\`)${pluralize(name)}('|\"|\\`)\\\\);?`\n        )\n\n        return pattern.test(line) ? lines : [...lines, line]\n      }, '')\n      .join('\\n')\n\n    await Promise.all([\n      destroyType('model', name),\n      destroyType('migration', `create-${pluralize(name)}`),\n      destroyType('serializer', name),\n      destroyType('controller', name)\n    ])\n\n    await writeFile(`${CWD}/app/routes.js`, routes)\n\n    process.stdout.write(`${green('update')} app/routes.js`)\n    process.stdout.write(EOL)\n  } else if (type === 'model') {\n    await Promise.all([\n      destroyType(type, name),\n      destroyType('migration', `create-${pluralize(name)}`)\n    ])\n  } else {\n    await destroyType(type, name)\n  }\n}\n","/* @flow */\n\nimport * as path from 'path'\nimport { start as startRepl } from 'repl'\n\nimport { CWD } from '../../../constants'\nimport type Application from '../../application'\n\nexport function repl(): Promise<void> {\n  return new Promise(async (resolve) => {\n    const app: Application = await Reflect.apply(require, null, [\n      path.join(CWD, 'dist', 'boot')\n    ])\n\n    const instance = startRepl({\n      prompt: '> '\n    })\n\n    instance.once('exit', resolve)\n\n    Object.assign(instance.context, {\n      app,\n      logger: app.logger,\n      routes: app.router,\n      [app.constructor.name]: app,\n\n      ...Array\n        .from(app.models)\n        .reduce((context, [, model]) => ({\n          ...context,\n          [model.name]: model\n        }), {}),\n\n      ...Array\n        .from(app.controllers)\n        .reduce((context, [, controller]) => ({\n          ...context,\n          [controller.constructor.name]: controller\n        }), {}),\n\n      ...Array\n        .from(app.serializers)\n        .reduce((context, [, serializer]) => ({\n          ...context,\n          [serializer.constructor.name]: serializer\n        }), {})\n    })\n  })\n}\n","/* @flow */\n\n/**\n * @private\n */\nexport default function* range(\n  start: number,\n  end: number\n): Generator<number, void, void> {\n  for (let i = start; i <= end; i += 1) {\n    yield i\n  }\n}\n","/* @flow */\n\nimport * as os from 'os'\nimport * as path from 'path'\nimport * as cluster from 'cluster'\nimport EventEmitter from 'events'\n\nimport { red, green } from 'chalk'\n\nimport { NODE_ENV } from '../../../constants'\nimport { line } from '../../logger'\nimport omit from '../../../utils/omit'\nimport range from '../../../utils/range'\nimport { composeAsync } from '../../../utils/compose'\n// eslint-disable-next-line no-duplicate-imports\nimport type Logger from '../../logger'\n\nexport type Worker = EventEmitter & {\n  id: string;\n  process: Process;\n  suicide: boolean;\n  kill(signal?: string): void;\n  send(message: any): void;\n  disconnect(): void;\n}\n\nexport type Options = {\n  path: string;\n  port: number;\n  logger: Logger;\n  maxWorkers?: number;\n}\n\n/**\n * @private\n */\nclass Cluster extends EventEmitter {\n  path: string;\n\n  port: number;\n\n  logger: Logger;\n\n  workers: Set<Worker>;\n\n  maxWorkers: number;\n\n  constructor(options: Options) {\n    super()\n\n    Object.defineProperties(this, {\n      path: {\n        value: options.path,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      port: {\n        value: options.port,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      logger: {\n        value: options.logger,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      workers: {\n        value: new Set(),\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n      maxWorkers: {\n        value: options.maxWorkers || os.cpus().length,\n        writable: false,\n        enumerable: true,\n        configurable: false\n      }\n    })\n\n    cluster.setupMaster({\n      exec: path.join(options.path, 'dist', 'boot.js'),\n    })\n\n    process.on('update', (changed) => {\n      changed.forEach(({ name: filename }) => {\n        options.logger.info(`${green('update')} ${filename}`)\n      })\n\n      this.reload()\n    })\n\n    this.forkAll().then(() => this.emit('ready'))\n  }\n\n  fork(retry: boolean = true) {\n    return new Promise(resolve => {\n      if (this.workers.size < this.maxWorkers) {\n        // $FlowIgnore\n        const worker: Worker = cluster.fork({\n          NODE_ENV,\n          PORT: this.port\n        })\n\n        const timeout = setTimeout(() => {\n          this.logger.info(line`\n            Removing worker process: ${red(`${worker.process.pid}`)}\n          `)\n\n          clearTimeout(timeout)\n\n          worker.removeAllListeners()\n          worker.kill()\n\n          this.workers.delete(worker)\n\n          resolve(worker)\n\n          if (retry) {\n            this.fork(false)\n          }\n        }, 30000)\n\n        const handleError = (err?: string) => {\n          if (err) {\n            this.logger.error(err)\n          }\n\n          this.logger.info(line`\n            Removing worker process: ${red(`${worker.process.pid}`)}\n          `)\n\n          clearTimeout(timeout)\n\n          worker.removeAllListeners()\n          worker.kill()\n\n          this.workers.delete(worker)\n\n          resolve(worker)\n        }\n\n        worker.on('message', (msg: string | Object) => {\n          let data = {}\n          let message = msg\n\n          if (typeof message === 'object') {\n            data = omit(message, 'message')\n            message = message.message\n          }\n\n          switch (message) {\n            case 'ready':\n              this.logger.info(line`\n                Adding worker process: ${green(`${worker.process.pid}`)}\n              `)\n\n              this.workers.add(worker)\n\n              clearTimeout(timeout)\n              worker.removeListener('error', handleError)\n\n              resolve(worker)\n              break\n\n            case 'error':\n              handleError(data.error)\n              break\n\n            default:\n              break\n          }\n        })\n\n        worker.once('error', handleError)\n        worker.once('exit', (code: ?number) => {\n          const { process: { pid } } = worker\n\n          if (typeof code === 'number') {\n            this.logger.info(line`\n              Worker process: ${red(`${pid}`)} exited with code ${code}\n            `)\n          }\n\n          this.logger.info(`Removing worker process: ${red(`${pid}`)}`)\n\n          clearTimeout(timeout)\n\n          worker.removeAllListeners()\n          this.workers.delete(worker)\n\n          this.fork()\n        })\n      }\n    })\n  }\n\n  shutdown<T: Worker>(worker: T): Promise<T> {\n    return new Promise(resolve => {\n      this.workers.delete(worker)\n\n      const timeout = setTimeout(() => worker.kill(), 5000)\n\n      worker.once('disconnect', () => {\n        worker.kill()\n      })\n\n      worker.once('exit', () => {\n        resolve(worker)\n        clearTimeout(timeout)\n      })\n\n      worker.send('shutdown')\n      worker.disconnect()\n    })\n  }\n\n  reload() {\n    if (this.workers.size) {\n      const groups = Array\n        .from(this.workers)\n        .reduce((arr, item, idx, src) => {\n          if ((idx + 1) % 2) {\n            const group = src.slice(idx, idx + 2)\n\n            return [\n              ...arr,\n              () => Promise.all(group.map(worker => this.shutdown(worker)))\n            ]\n          }\n\n          return arr\n        }, [])\n\n      // $FlowIgnore\n      return composeAsync(...groups)()\n    }\n\n    return this.fork()\n  }\n\n  forkAll() {\n    return Promise.race([...range(1, this.maxWorkers)].map(() => this.fork()))\n  }\n}\n\nexport default Cluster\n","/* @flow */\n\nimport Cluster from './cluster'\n// eslint-disable-next-line no-duplicate-imports\nimport type { Options } from './cluster'\n\n/**\n * @private\n */\nexport function createCluster(options: Options) {\n  return new Cluster(options)\n}\n","/* @flow */\n\nimport { cyan } from 'chalk'\n\nimport { CWD, PORT, NODE_ENV } from '../../../constants'\nimport Logger from '../../logger'\nimport { createLoader } from '../../loader'\nimport { createCluster } from '../../pm'\nimport { watch } from '../../fs'\n\nimport { build } from './build'\n\n/**\n * @private\n */\nexport async function serve({\n  hot = (NODE_ENV === 'development'),\n  cluster = false,\n  useStrict = false\n}: {\n  hot: boolean;\n  cluster: boolean;\n  useStrict: boolean;\n}): Promise<void> {\n  const load = createLoader(CWD)\n  const { logging } = load('config')\n  const logger = new Logger(logging)\n\n  if (hot) {\n    const watcher = await watch(CWD)\n\n    watcher.on('change', async (changed) => {\n      await build(useStrict)\n      process.emit('update', changed)\n    })\n  }\n\n  createCluster({\n    logger,\n    path: CWD,\n    port: PORT,\n    maxWorkers: cluster ? undefined : 1\n  }).once('ready', () => {\n    logger.info(`Lux Server listening on port: ${cyan(`${PORT}`)}`)\n  })\n}\n","/* @flow */\n\nimport { EOL } from 'os'\n\n/**\n * @private\n */\nexport function test(): Promise<void> {\n  process.stdout.write('Coming Soon!')\n  process.stdout.write(EOL)\n\n  return Promise.resolve()\n}\n"],"names":["normalizePort","port","Number","parseInt","Math","abs","env","ENV","process","getPID","pid","isWorker","worker","CWD","cwd","PID","PORT","NODE_ENV","DATABASE_URL","LUX_CONSOLE","Boolean","PLATFORM","os","HAS_BODY","promisify","source","context","args","Promise","resolve","reject","apply","err","result","length","exec","cp","K","fn","rescue","tryCatch","isJSFile","target","extname","FREEZER","WeakSet","isObject","value","Array","isArray","freeze","add","freezeProps","makePublic","props","defineProperties","reduce","obj","key","Reflect","get","isFrozen","has","FreezeableMap","Map","set","clear","delete","deep","forEach","Object","FreezeableSet","Set","SUBSCRIPTION_NAME","fallback","instance","path","nativeWatch","type","name","emit","setupWatchmen","client","Watchman","capabilityCheck","capabilityErr","command","watchErr","relativePath","watch","clockErr","clock","since","subscribeErr","on","subscription","files","useWatchman","appPath","joinPath","assign","initialize","Watcher","EventEmitter","end","close","createPathRemover","pattern","RegExp","startsWith","sep","replace","noop","undefined","stats","stat","catch","isDirectory","readdir","all","map","rmrf","file","rmdir","unlink","dir","some","test","then","exists","parsePath","parsed","split","base","substr","indexOf","fs","mkdir","readFile","writeFile","appendFile","watchPath","mkdirRec","dirPath","mode","parent","code","readdirRec","stripPath","filePath","arr","children","basename","child","insertValues","strings","values","part","idx","toString","join","bodyPattern","trailingWhitespace","template","compiled","body","match","indentLevel","slice","line","str","handleWarning","warning","warn","message","isExternal","id","endsWith","chain","handler","constructor","construct","underscore","upper","_","compose","main","etc","input","reduceRight","composeAsync","DOUBLE_COLON","formatName","camelize","posix","dirname","createExportStatement","isDefault","normalized","data","Buffer","from","createWriter","writerFor","handleWrite","formatSymbol","capitalize","item","pluralize","symbol","pipe","assets","useStrict","dist","writer","write","createManifest","root","JSON","parse","readBabelConfig","createBootScript","cache","opts","local","__dirname","entry","external","banner","models","migrations","controllers","serializers","types","filter","aliases","volume","prefix","app","LUX_LOCAL","bundle","rollup","alias","json","eslint","babel","lux","compile","spinner","Ora","start","stop","build","drivers","driverFor","database","classify","isTestENV","isProdENV","indent","amount","repeat","driver","schemaName","driverName","username","environment","LUX_VERSION","version","BABEL_PRESET_VERSION","devDependencies","YES","createPrompt","prompt","createInterface","stdin","stdout","setPrompt","text","question","answer","NAMESPACED_RESOURCE_MESSAGE","dim","VALID_DRIVERS","DEBUG","INFO","WARN","ERROR","FORMATS","LEVELS","METHOD_MISSING","entries","keys","prev","next","setType","omit","src","omitted","ANSI","ansiRegex","STDOUT","STDERR","stringify","spaces","String","formatMessage","format","Error","stack","level","timestamp","output","columns","WriteStream","yellow","red","stderr","trim","countDigits","num","digits","floor","log10","isFinite","pad","startTime","endTime","duration","maxLength","debugTemplate","cyan","method","remoteAddress","colorStr","statusCode","statusMessage","route","controller","blue","action","magenta","params","total","infoTemplate","filterParams","filtered","logText","logger","options","request","response","Date","now","url","statusColor","chalk","templateData","debug","info","MESSAGE","logJSON","headers","status","userAgent","protocol","createRequestLogger","req","res","PATTERN","sql","toUpperCase","Logger","enabled","levelNum","val","defineProperty","toLowerCase","getTimestamp","toISOString","InvalidDriverError","green","ModelMissingError","MigrationsPendingError","pending","createServerError","Source","Target","prototype","UniqueConstraintError","ConfigMissingError","RecordNotFoundError","primaryKey","primaryKeyValue","Model","Request","INT","CSV","NULL","BOOL","DATE","TRUE","DELIMITER","first","fromString","fromObject","k","v","fields","resource","names","Headers","ResponseHeaders","handleChange","create","parseURL","query","qs","connection","encrypted","offset","allocUnsafe","copy","once","removeAllListeners","Response","setHeader","removeHeader","createAdapter","adapter","urlData","send","createDefaultConfig","mock","http","hasOwnProperty","merge","dest","currentValue","NAMESPACE_DELIMITER","formatKey","formatter","dasherize","SUFFIX_PATTERN","normalize","manifest","suffix","stripSuffix","Migration","config","bundleFor","require","createLoader","load","connect","pool","knex","usingSQLite","filename","memory","socket","schema","hasTable","createTable","string","primary","createMigrations","table","versions","select","migration","pendingMigrations","checkMigrations","seed","runners","reverse","run","insert","transaction","trx","isMaster","model","tableName","singularize","formatInt","int","padding","char","i","generateTimestamp","getHours","getMinutes","getSeconds","getMilliseconds","Database","hasPool","normalizeModelName","VALID_ATTR","RELATIONSHIP","attrs","attr","related","inverse","relatedKey","EOL","index","parts","hasOne","hasMany","attributes","group","indices","column","push","shouldIndex","log","FORWARD_SLASH","createGenerator","onConflict","hasConflict","absolute","shouldContinue","relative","detectConflict","createConflictResolver","find","generate","controllerTemplate","namespace","hasParent","serializerTemplate","serializer","emptyMigrationTemplate","modelMigration","modelMigrationTemplate","modelTemplate","middleware","pop","middlewareTemplate","util","utilTemplate","routes","buf","lines","closeIndex","lastIndexOf","generatorFor","generator","generators","runGenerator","project","appTemplate","routesTemplate","configTemplate","dbTemplate","seedTemplate","readmeTemplate","licenseTemplate","pkgJSONTemplate","babelrcTemplate","eslintrcTemplate","gitignoreTemplate","logOutput","GITHUB_URL","fileLink","branch","link","DB_INTERFACE_URL","CONNECTION_STRING_MESSAGE","DatabaseConfigMissingError","ReferenceError","dbcreate","raw","dbdrop","dbmigrate","migrationFiles","orderBy","m","where","del","dbrollback","dbseed","store","normalizedType","normalizedName","destroyType","destroy","repl","startRepl","router","range","Cluster","maxWorkers","changed","reload","forkAll","retry","workers","size","cluster","timeout","setTimeout","kill","fork","handleError","error","msg","removeListener","disconnect","groups","shutdown","race","createCluster","logging","hot","watcher","serve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;AAGA,AAAe,SAASA,aAAT,CAAuBC,IAAvB,EAAgE;UACrE,OAAOA,IAAf;SACO,QAAL;aACSC,OAAOC,QAAP,CAAgBF,IAAhB,EAAsB,EAAtB,CAAP;;SAEG,QAAL;aACSG,KAAKC,GAAL,CAASJ,IAAT,CAAP;;;aAGO,IAAP;;;;ACPN,MAAM,EAAEK,KAAKC,GAAP,KAAeC,OAArB;;AAEA,SAASC,MAAT,GAA0B;MACpB,EAAEC,GAAF,KAAUF,OAAd;;MAEIG,oBAAY,OAAOC,eAAOF,GAAd,KAAsB,QAAtC,EAAgD;UACxCE,eAAOF,GAAb;;;SAGKA,GAAP;;;AAGF,AAAO,MAAMG,MAAcL,QAAQM,GAAR,EAApB;AACP,AAAO,MAAMC,MAAcN,QAApB;AACP,AAAO,MAAMO,OAAehB,cAAcO,IAAIS,IAAlB,CAArB;AACP,AAAO,MAAMC,WAAmBV,IAAIU,QAAJ,IAAgB,aAAzC;AACP,AAAO,MAAMC,eAA+BX,IAAIW,YAAzC;AACP,AAAO,MAAMC,cAAuBC,QAAQb,IAAIY,WAAZ,CAA7B;AACP,AAAO,MAAME,WAAmBC,WAAA,EAAzB;AACP,AAAO;AACP,AAAO;AACP,AAAO,MAAMC,WAAmB,kBAAzB,CAEP,AAAO,AASP,AAAO;;ACnCP;;;;AAIA,SAASC,SAAT,CAAmBC,MAAnB,EAAqCC,OAArC,EAAgE;SACvD,CAAC,GAAGC,IAAJ,KACL,IAAIC,OAAJ,CAAY,CAACC,UAAD,EAAUC,MAAV,KAAqB;WACxBC,KAAP,CAAaL,OAAb,EAAsB,CAAC,GAAGC,IAAJ,EAAU,CAACK,GAAD,EAAM,GAAGC,MAAT,KAAoB;UAC9CD,GAAJ,EAAS;eACAA,GAAP;;;iBAGMC,OAAOC,MAAP,GAAgB,CAAhB,GAAoBD,MAApB,GAA6BA,OAAO,CAAP,CAArC;KALoB,CAAtB;GADF,CADF;CAaF;;ACJA;;;AAGA,MAAME,SACJX,UAAUY,OAAV,CADF,CAIA;;ACvBA;;;;;;;;;AASA,AAAe,SAASC,CAAT,GAAkB;SACxB,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;8BAAe,WACbC,EADa,EAEbC,SAAmBF,CAFN,EAGM;QACfJ,MAAJ;;QAEI;eACO,MAAMK,IAAf;KADF,CAEE,OAAON,GAAP,EAAY;eACH,MAAMO,OAAOP,GAAP,CAAf;;;WAGKC,MAAP;GAZF;;WAA8BO,QAA9B;;;;SAA8BA,QAA9B;;;;;;;;;;;;;;;;;;;;;;;;GAqCA,AAAO;;ACpEP;;;AAGA,AAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA2C;SACjDC,aAAQD,MAAR,MAAoB,KAA3B;;;ACNK,MAAME,UAAU,IAAIC,OAAJ,EAAhB;;ACAP;;;;;;;;;;;;;;;;AAgBA,AAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyC;SAC/C3B,QAAQ2B,KAAR,KAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+C,CAACC,MAAMC,OAAN,CAAcF,KAAd,CAAvD;;;ACbF;;;AAGA,AAAe,SAASG,MAAT,CAAmBH,KAAnB,EAAgC;UACrCI,GAAR,CAAYJ,KAAZ;SACOA,KAAP;;;;;;AAMF,AAAO;;;;;AASP,AAAO;;;;;AAaP,AAAO,SAASK,WAAT,CACLV,MADK,EAELW,UAFK,EAGL,GAAGC,KAHE,EAIF;SACIC,gBAAP,CAAwBb,MAAxB,EAAgCY,MAAME,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,uBACxCD,GADwC;KAE1CC,GAAD,GAAO;aACEC,QAAQC,GAAR,CAAYlB,MAAZ,EAAoBgB,GAApB,CADF;gBAEK,KAFL;kBAGOL,UAHP;oBAIS;;IANc,EAQ5B,EAR4B,CAAhC;;SAUOX,MAAP;;;;;GAMF,AAAO;;ACxDP;;;AAGA,AAAe,SAASmB,QAAT,CAAqBd,KAArB,EAAwC;SAC9CH,QAAQkB,GAAR,CAAYf,KAAZ,CAAP;;;ACHF;;;AAGA,MAAMgB,aAAN,SAAkCC,GAAlC,CAA4C;MACtCN,GAAJ,EAAYX,KAAZ,EAA2C;QACrC,CAAC,KAAKc,QAAL,EAAL,EAAsB;YACdI,GAAN,CAAUP,GAAV,EAAeX,KAAf;;;WAGK,IAAP;;;UAGY;QACR,CAAC,KAAKc,QAAL,EAAL,EAAsB;YACdK,KAAN;;;;SAIGR,GAAP,EAAwB;WACf,KAAKG,QAAL,KAAkB,KAAlB,GAA0B,MAAMM,MAAN,CAAaT,GAAb,CAAjC;;;SAGKU,IAAP,EAA4C;QACtCA,IAAJ,EAAU;WACHC,OAAL,CAAaC,OAAOpB,MAApB;;;WAGKA,OAAO,IAAP,CAAP;;;aAGkB;WACXW,SAAS,IAAT,CAAP;;CAIJ;;ACnCA;;;AAGA,MAAMU,aAAN,SAA+BC,GAA/B,CAAsC;MAChCzB,KAAJ,EAAgC;QAC1B,CAAC,KAAKc,QAAL,EAAL,EAAsB;YACdV,GAAN,CAAUJ,KAAV;;;WAGK,IAAP;;;UAGY;QACR,CAAC,KAAKc,QAAL,EAAL,EAAsB;YACdK,KAAN;;;;SAIGnB,KAAP,EAA0B;WACjB,KAAKc,QAAL,KAAkB,KAAlB,GAA0B,MAAMM,MAAN,CAAapB,KAAb,CAAjC;;;SAGKqB,IAAP,EAAyC;QACnCA,IAAJ,EAAU;WACHC,OAAL,CAAaC,OAAOpB,MAApB;;;WAGKA,OAAO,IAAP,CAAP;;;aAGkB;WACXW,SAAS,IAAT,CAAP;;CAIJ;;ACpCoC;;AAEpC,AAEA,AACA,AACA,AACA,AAEA;;;AAGA,MAAMY,oBAAoB,aAA1B;;;;;AAKA,SAASC,QAAT,CAAkBC,QAAlB,EAAqCC,OAArC,EAA8D;SACrDC,SAAYD,OAAZ,EAAkB;eACZ;GADN,EAEJ,CAACE,IAAD,EAAOC,IAAP,KAAgB;QACbtC,SAASsC,IAAT,CAAJ,EAAoB;eACTC,IAAT,CAAc,QAAd,EAAwB,CAAC,EAAED,IAAF,EAAQD,IAAR,EAAD,CAAxB;;GAJG,CAAP;;;;;;AAYF,SAASG,aAAT,CAAuBN,QAAvB,EAA0CC,OAA1C,EAAyE;SAChE,IAAIhD,OAAJ,CAAY,CAACC,UAAD,EAAUC,MAAV,KAAqB;UAChCoD,SAAS,IAAIC,iBAAJ,EAAf;;WAEOC,eAAP,CAAuB,EAAvB,EAA4BC,aAAD,IAAmB;UACxCA,aAAJ,EAAmB;eACVA,aAAP;;;;aAIKC,OAAP,CAAe,CAAC,eAAD,EAAkBV,OAAlB,CAAf,EAAwC,CAACW,QAAD,EAAW;uBAAA;uBAElCC;UACb,EAHoC,KAG7B;YACLD,QAAJ,EAAc;iBACLA,QAAP;;;;eAIKD,OAAP,CAAe,CAAC,OAAD,EAAUG,QAAV,CAAf,EAAiC,CAACC,QAAD,EAAW,EAAEC,OAAOC,KAAT,EAAX,KAAgC;cAC3DF,QAAJ,EAAc;mBACLA,QAAP;;;;iBAIKJ,OAAP,CAAe,CAAC,WAAD,EAAcG,QAAd,EAAqBhB,iBAArB,EAAwC;iBAAA;2BAEtCe,YAFsC;;oBAI7C,CACN,MADM,EAEN,MAFM,EAGN,QAHM,EAIN,MAJM,CAJ6C;;wBAWzC,CACV,OADU,EACD,CACP,OADO,EAEP,MAFO,CADC;WAXC,CAAf,EAiBKK,YAAD,IAAkB;gBAChBA,YAAJ,EAAkB;qBACTA,YAAP;;;;mBAIKC,EAAP,CAAU,cAAV,EAA0B,CAAC;mBAAA;;aAAD,KAMd;kBACNC,iBAAiBtB,iBAArB,EAAwC;yBAC7BO,IAAT,CAAc,QAAd,EAAwBgB,KAAxB;;aARJ;;uBAYQd,MAAR;WAnCF;SANF;OATF;KANF;GAHK,CAAP;;;;;;AAsEF;8BAAe,WACbP,QADa,EAEbC,OAFa,EAGbqB,WAHa,EAID;UACNC,UAAUC,UAASvB,OAAT,EAAe,KAAf,CAAhB;QACIM,MAAJ;;QAEIe,WAAJ,EAAiB;YACTzD,0BAAS,aAAY;cACnBL,OAAK,gBAAL,CAAN;iBACS,MAAM8C,cAAcN,QAAd,EAAwBuB,OAAxB,CAAf;OAFI,EAAN;;;WAMKE,MAAP,CAAczB,QAAd,EAAwB;YAChBuB,OADgB;cAEdhB,UAAUR,SAASC,QAAT,EAAmBuB,OAAnB;KAFpB;;gBAKYvB,QAAZ,EAAsB,IAAtB,EACE,MADF,EAEE,QAFF;;WAKOA,QAAP;GAzBF;;WAA8B0B,UAA9B;;;;SAA8BA,UAA9B;;;AC5FA;;;AAGA,MAAMC,OAAN,SAAsBC,YAAtB,CAAmC;;cAKrB3B,OAAZ,EAA0BqB,cAAuB,IAAjD,EAAyE;;WAEhEI,WAAW,IAAX,EAAiBzB,OAAjB,EAAuBqB,WAAvB,CAAP;;;YAGQ;UACF,EAAEf,MAAF,KAAa,IAAnB;;QAEIA,kBAAkBC,iBAAtB,EAAgC;aACvBqB,GAAP;KADF,MAEO;aACEC,KAAP;;;CAKN;;ACjCA;;;AAGA,SAASC,iBAAT,CAA2B9B,OAA3B,EAAkE;MAC5D+B,UAAU,IAAIC,MAAJ,CAAY,GAAEhC,OAAK,UAAnB,CAAd;;MAEIvD,SAASwF,UAAT,CAAoB,KAApB,CAAJ,EAAgC;UACxBC,SAAM,MAAZ;;cAEU,IAAIF,MAAJ,CAAY,GAAEhC,QAAKmC,OAAL,CAAa,KAAb,EAAoBD,MAApB,CAAyB,IAAGA,MAAI,QAA9C,CAAV;;;SAGKrF,UAAUA,OAAOsF,OAAP,CAAeJ,OAAf,EAAwB,IAAxB,CAAjB;CAGF;;ACjBe,SAASK,IAAT,GAAsB;SAC5BC,SAAP;;;ACIF;;;;8BAGA,WAAoBvE,MAApB,EAAsD;UAC9CwE,QAAQ,MAAMC,OAAKzE,MAAL,EAAa0E,KAAb,CAAmBJ,IAAnB,CAApB;;QAEIE,KAAJ,EAAW;UACLA,MAAMG,WAAN,EAAJ,EAAyB;cACjBrB,QAAQ,MAAMsB,UAAQ5E,MAAR,CAApB;;cAEMd,QAAQ2F,GAAR,CACJvB,MAAMwB,GAAN,CAAU;iBAAQC,QAAK7C,SAAA,CAAUlC,MAAV,EAAkBgF,IAAlB,CAAL,CAAR;SAAV,CADI,CAAN;;cAIMC,QAAMjF,MAAN,EAAc0E,KAAd,CAAoBJ,IAApB,CAAN;OAPF,MAQO;cACCY,SAAOlF,MAAP,CAAN;;;;WAIG,IAAP;;;kBAjBa+E;;;KARf,AAEA,AACA,AAyBA;;AC1BA;;;;8BAGA,WAAsB7C,OAAtB,EAA6CiD,GAA7C,EAA6E;QACvEjD,mBAAgBgC,MAApB,EAA4B;YACpBD,UAAU/B,OAAhB;UACIoB,QAAQ,EAAZ;;UAEI6B,GAAJ,EAAS;gBACC,MAAMP,UAAQO,GAAR,CAAd;;;aAGK7B,MAAM8B,IAAN,CAAW;eAAQnB,QAAQoB,IAAR,CAAaL,IAAb,CAAR;OAAX,CAAP;;;WAGKP,OAAKvC,OAAL,EAAWoD,IAAX,CACL;aAAM,IAAN;KADK,EAEL;aAAM,KAAN;KAFK,CAAP;;;kBAZaC;;;KALf,AAuBA;;ACTA;;;AAGA,AAAe,SAASC,SAAT,CACbpH,MAAeD,GADF,EAEbgH,MAAe,EAFF,EAGb9C,OAAgB,EAHH,EAID;QACNoD,SAASvD,UAAA,CAAWA,SAAA,CAAU9D,GAAV,EAAe+G,GAAf,EAAoB,GAAG9C,KAAKqD,KAAL,CAAWxD,QAAX,CAAvB,CAAX,CAAf;;2BAGKuD,MADL;cAEYvD,SAAA,CAAUuD,OAAON,GAAjB,EAAsBM,OAAOE,IAA7B,CAFZ;cAGYzD,SAAA,CACRuD,OAAON,GAAP,CAAWS,MAAX,CAAkBH,OAAON,GAAP,CAAWU,OAAX,CAAmBV,GAAnB,CAAlB,CADQ,EAERM,OAAOE,IAFC;;;;ACzBd;;;AAGA,AAEA,AACA,AAEA,AACA,AACA,AACA,AAEA;;;AAGA,AAAO,MAAMlB,SACX3F,UAAUgH,OAAV,CADK;;;;;AAOP,AAAO,MAAMC,UACXjH,UAAUgH,QAAV,CADK;;;;;AAOP,AAAO,MAAMb,UACXnG,UAAUgH,QAAV,CADK;;;;;AAOP,AAAO,MAAMZ,WACXpG,UAAUgH,SAAV,CADK;;;;;AAOP,AAAO,MAAMlB,YACX9F,UAAUgH,UAAV,CADK;;;;;AAOP,AAAO,MAAME,aACXlH,UAAUgH,WAAV,CADK;;;;;AAOP,AAAO,MAAMG,cACXnH,UAAUgH,YAAV,CADK;;;;;AAOP,AAAO,MAAMI,eACXpH,UAAUgH,aAAV,CADK;;;;;AAOP,AAAO,SAAS/C,OAAT,CAAeoD,SAAf,EAAoD;SAClD,IAAIvC,OAAJ,CAAYuC,SAAZ,CAAP;;;;;;AAMF,AAAO,SAASC,QAAT,CAAkBC,OAAlB,EAAmCC,OAAe,GAAlD,EAAsE;QACrEC,SAASrE,YAAA,CAAamE,OAAb,EAAsB,IAAtB,CAAf;;SAEO5B,OAAK8B,MAAL,EACJ7B,KADI,CACE,MAAM0B,SAASG,MAAT,EAAiBD,IAAjB,CADR,EAEJhB,IAFI,CAEC,MAAMS,QAAMM,OAAN,EAAeC,IAAf,CAFP,EAGJ5B,KAHI,CAGEpF,OAAO;QACRA,IAAIkH,IAAJ,KAAa,QAAjB,EAA2B;aAClBtH,QAAQE,MAAR,CAAeE,GAAf,CAAP;;WAEKJ,QAAQC,OAAR,EAAP;GAPG,CAAP;;;;;;AAcF,AAAO,SAASsH,UAAT,CAAoBJ,OAApB,EAA6D;QAC5DK,YAAY1C,kBAAkBqC,OAAlB,CAAlB;;SAEOzB,UAAQyB,OAAR,EACJf,IADI,CACChC,SAASpE,QAAQ2F,GAAR,CACbvB,MAAMwB,GAAN,CAAUE,QAAQ;UACV2B,WAAWzE,SAAA,CAAUmE,OAAV,EAAmBrB,IAAnB,CAAjB;;WAEO9F,QAAQ2F,GAAR,CAAY,CAAC8B,QAAD,EAAWlC,OAAKkC,QAAL,CAAX,CAAZ,CAAP;GAHF,CADa,CADV,EAQJrB,IARI,CAQChC,SAASpE,QAAQ2F,GAAR,CACbvB,MAAMwB,GAAN,CAAU,CAAC,CAACE,IAAD,EAAOR,KAAP,CAAD,KAAmBtF,QAAQ2F,GAAR,CAAY,CACvCG,IADuC,EAEvCR,MAAMG,WAAN,KAAsB8B,WAAWzB,IAAX,CAAtB,GAAyC,EAFF,CAAZ,CAA7B,CADa,CARV,EAcJM,IAdI,CAcChC,SAASA,MAAMxC,MAAN,CAAa,CAAC8F,GAAD,EAAM,CAAC5B,IAAD,EAAO6B,QAAP,CAAN,KAA2B;UAC/CC,cAAWJ,UAAU1B,IAAV,CAAjB;;WAEO,CACL,GAAG4B,GADE,EAELE,WAFK,EAGL,GAAGD,SAAS/B,GAAT,CAAaiC,SAAS7E,SAAA,CAAU4E,WAAV,EAAoBJ,UAAUK,KAAV,CAApB,CAAtB,CAHE,CAAP;GAHa,EAQZ,EARY,CAdV,CAAP;;;ACrGF;;;AAGA,AAAe,SAASC,YAAT,CACbC,OADa,EAEb,GAAGC,MAFU,EAGb;MACIA,OAAO1H,MAAX,EAAmB;WACVyH,QAAQnG,MAAR,CAAe,CAACvB,MAAD,EAAS4H,IAAT,EAAeC,GAAf,KAA+B;UAC/C/G,QAAQ6G,OAAOE,GAAP,CAAZ;;UAEI/G,SAAS,OAAOA,MAAMgH,QAAb,KAA0B,UAAvC,EAAmD;gBACzChH,MAAMgH,QAAN,EAAR;OADF,MAEO;gBACG,EAAR;;;aAGK9H,SAAS4H,IAAT,GAAgB9G,KAAvB;KATK,EAUJ,EAVI,CAAP;;;SAaK4G,QAAQK,IAAR,CAAa,EAAb,CAAP;;;ACnBF,MAAMC,cAAc,sBAApB;AACA,MAAMC,qBAAqB,MAA3B;;;;;AAKA,AAAe,SAASC,QAAT,CACbR,OADa,EAEb,GAAGC,MAFU,EAGL;QACFQ,WAAWV,aAAaC,OAAb,EAAsB,GAAGC,MAAzB,CAAjB;MACI,CAACS,IAAD,IAASD,SAASE,KAAT,CAAeL,WAAf,KAA+B,EAA5C;MACIM,cAAc,gBAAlB;;MAEI,CAACF,IAAL,EAAW;WACFD,QAAP;kBACc,gBAAd;;;SAGKC,KAAKjC,KAAL,CAAW,IAAX,EACJoC,KADI,CACE,CADF,EAEJhD,GAFI,CAEAiD,QAAQ;QACPC,MAAMD,KAAK1D,OAAL,CAAawD,WAAb,EAA0B,IAA1B,CAAV;;QAEIL,mBAAmBnC,IAAnB,CAAwB2C,GAAxB,CAAJ,EAAkC;YAC1BA,IAAI3D,OAAJ,CAAYmD,kBAAZ,EAAgC,EAAhC,CAAN;;;WAGKQ,GAAP;GATG,EAWJV,IAXI,CAWC,IAXD,CAAP;CAcF;;AC3BA;;;AAGA,AAAe,SAASW,aAAT,CAAuBC,OAAvB,EAAuD;MAChEA,QAAQ1B,IAAR,KAAiB,wBAArB,EAA+C;;;;UAIvC2B,IAAR,CAAaD,QAAQE,OAArB;;;;;;;ACdF;;;AAGA,AAAe,SAASC,UAAT,CAAoBlD,GAApB,EAA0D;SAC/DmD,EAAD,IAAyB,EAC9BA,GAAGnE,UAAH,CAAc,GAAd,KACGmE,GAAGC,QAAH,CAAY,eAAZ,CADH,IAEGD,GAAGnE,UAAH,CAAc,GAAd,CAFH;KAGG,eAAekB,IAAf,CAAoBiD,EAApB,CAHH;KAIGA,GAAGnE,UAAH,CAAc,KAAd,CAJH,IAKGmE,GAAGnE,UAAH,CAAcjC,SAAA,CAAUiD,GAAV,EAAe,KAAf,CAAd,CALH,IAMGmD,GAAGnE,UAAH,CAAcjC,SAAA,CAAUiD,GAAV,EAAe,MAAf,CAAd,CANH,IAOGmD,OAAO,WAPV,IAQGA,OAAO,cARV,IASGA,OAAO,oBAVoB,CAAhC;;;ACJF;;;AAGA,AAAe,SAASE,KAAT,CAAkBzJ,MAAlB,EAAuC;SAC7C;SACG0J,OAAR,EAA4C;aACnCD,MAAMC,QAAQ1J,MAAR,CAAN,CAAP;KAFG;;YAKM;aACFA,MAAP;KANG;;cASqB2J,WAA1B,EAAoD;aAC3CF,MAAMvH,QAAQ0H,SAAR,CAAkBD,WAAlB,EAA+B,CAAC3J,MAAD,CAA/B,CAAN,CAAP;;GAVJ;;;ACJF;;;AAGA,AAAe,SAAS6J,YAAT,CACb7J,SAAiB,EADJ,EAEb8J,QAAiB,KAFJ,EAGL;SACDC,sBAAE/J,MAAF,EAAU8J,KAAV,EAAiBxE,OAAjB,CAAyB,IAAzB,EAA+B,GAA/B,CAAP;;;ACTF;;;AAGA,AAAO;;;;;AAQP,AAAO,SAAS0E,OAAT,CACLC,IADK,EAEL,GAAGC,GAFE,EAGY;SACVC,SAASF,KAAKC,IAAIE,WAAJ,CACnB,CAAC9I,KAAD,EAAQT,EAAR,KAAeA,GAAGS,KAAH,CADI,EAEnB6I,KAFmB,CAAL,CAAhB;;;;;;AASF,AAAO,SAASE,YAAT,CACLJ,IADK,EAEL,GAAGC,GAFE,EAGkC;SAChCC,SAASD,IAAIE,WAAJ,CACd,CAAC9I,KAAD,EAAQT,EAAR,KAAeV,QAAQC,OAAR,CAAgBkB,KAAhB,EAAuBiF,IAAvB,CAA4B1F,EAA5B,CADD,EAEdV,QAAQC,OAAR,CAAgB+J,KAAhB,CAFc,EAGd5D,IAHc,CAGT0D,IAHS,CAAhB;;;ACrBF,MAAMK,eAAe,KAArB;;;;;AAKA,MAAMC,aAAyCP,QAC5C1G,IAAD,IAAkBA,KAAKgC,OAAL,CAAagF,YAAb,EAA2B,GAA3B,CAD2B,EAE7CE,mBAF6C,EAG7CX,YAH6C,EAI5CvG,IAAD,IAAkBmH,WAAMlC,IAAN,CAChBmC,aAAQpH,IAAR,CADgB,EAEhByE,cAASzE,IAAT,EAAe,KAAf,CAFgB,CAJ2B,CAA/C,CAUA;;ACVA;;;AAGA,SAASqH,qBAAT,CACErH,IADF,EAEEH,OAFF,EAGEyH,YAAqB,IAHvB,EAIU;QACFC,aAAaJ,WAAMlC,IAAN,CAAW,GAAGpF,QAAKwD,KAAL,CAAWtB,QAAX,CAAd,CAAnB;MACIyF,IAAJ;;MAEIF,SAAJ,EAAe;WACL,0BAAyBtH,IAAK,gBAAeuH,UAAW,QAAhE;GADF,MAEO;WACG,eAAcvH,IAAK,gBAAeuH,UAAW,QAArD;;;SAGKE,OAAOC,IAAP,CAAYF,IAAZ,CAAP;;;;;;AAMF,SAASG,YAAT,CAAsBhF,IAAtB,EAAoC;QAC5BiF,YAAY,CAChB7H,IADgB,EAEhB8H,WAFgB,KAGZ7J,KAAD,IAA0B;UACvB8J,eAAepB,QAAQf,OAAOA,MAAMoC,sBAAWhI,IAAX,CAArB,EAAuCkH,UAAvC,CAArB;;WAEOpK,QAAQ2F,GAAR,CACLxE,MAAMyE,GAAN,CAAUuF,QAAQ;UACZH,WAAJ,EAAiB;eACRA,YAAYG,IAAZ,CAAP;;;YAGInI,UAAOuB,UAAS,KAAT,EAAgB6G,qBAAUlI,IAAV,CAAhB,EAAiCiI,IAAjC,CAAb;YACME,SAASJ,aAAaE,IAAb,CAAf;;aAEOnE,aAAWlB,IAAX,EAAiB0E,sBAAsBa,MAAtB,EAA8BrI,OAA9B,CAAjB,CAAP;KARF,CADK,CAAP;GANF;;SAoBO;iBACQ+H,UAAU,YAAV,CADR;iBAEQA,UAAU,YAAV,CAFR;;YAIGA,UAAU,OAAV;kCAAmB,WAAMI,IAAN,EAAc;cACjCnI,UAAOuB,UAAS,KAAT,EAAgB,QAAhB,EAA0B4G,IAA1B,CAAb;cACMhI,OAAOiH,WAAWe,IAAX,CAAb;;eAEOnE,aAAWlB,IAAX,EAAiB0E,sBAAsBrH,IAAtB,EAA4BH,OAA5B,CAAjB,CAAP;OAJM;;;;;SAJH;;gBAWO+H,UAAU,WAAV;mCAAuB,WAAOI,IAAP,EAAgB;cAC3CnI,UAAOuB,UAAS,IAAT,EAAe,SAAf,EAA0B4G,IAA1B,CAAb;cACMhI,OAAOmG,MAAM6B,IAAN,EACVG,IADU,CACL;iBAAO1D,cAASkB,GAAT,EAAc,KAAd,CAAP;SADK,EAEVwC,IAFU,CAEL5B,YAFK,EAGV4B,IAHU,CAGL;iBAAOxC,IAAIpC,MAAJ,CAAW,EAAX,CAAP;SAHK,EAIV4E,IAJU,CAIL;iBAAOjB,oBAASvB,GAAT,EAAc,IAAd,CAAP;SAJK,EAKV3H,KALU,EAAb;;cAOM6F,aAAWlB,IAAX,EAAiB0E,sBACpB,SAAQrH,IAAK,IADO,EAErBH,OAFqB,EAGrB,KAHqB,CAAjB,CAAN;;cAMMgE,aAAWlB,IAAX,EAAiB0E,sBACpB,WAAUrH,IAAK,MADK,EAErBH,OAFqB,EAGrB,KAHqB,CAAjB,CAAN;OAfU;;;;;;GAXd;;;;;;AAsCF;+BAAe,WACbiD,GADa,EAEbsF,MAFa,EAGb,EAAEC,SAAF,EAHa,EAIE;UACTC,OAAOlH,UAAS0B,GAAT,EAAc,MAAd,CAAb;UACMH,OAAOvB,UAASkH,IAAT,EAAe,UAAf,CAAb;UACMC,SAASZ,aAAahF,IAAb,CAAf;;UAEMlF,SAAS;aAAMiG,QAAM4E,IAAN,CAAN;KAAT,CAAN;UACM1E,YAAUjB,IAAV,EAAgB8E,OAAOC,IAAP,CAAYW,YAAY,qBAAZ,GAAoC,EAAhD,CAAhB,CAAN;;UAEMxL,QAAQ2F,GAAR,CACJvE,MACGyJ,IADH,CACQU,MADR,EAEG3F,GAFH,CAEO,UAAC,CAAC9D,GAAD,EAAMX,KAAN,CAAD,EAAkB;YACfwK,QAAQ5J,QAAQC,GAAR,CAAY0J,MAAZ,EAAoB5J,GAApB,CAAd;;UAEI6J,KAAJ,EAAW;eACFA,MAAMxK,KAAN,CAAP;OADF,MAEO,IAAI,CAACwK,KAAD,IAAU,OAAOxK,KAAP,KAAiB,QAA/B,EAAyC;eACvC6F,aAAWlB,IAAX,EAAiB0E,sBAAsB1I,GAAtB,EAA2BX,KAA3B,CAAjB,CAAP;;;aAGKnB,QAAQC,OAAR,EAAP;KAXJ,CADI,CAAN;GAZF;;WAA8B2L,cAA9B;;;;SAA8BA,cAA9B;;;;8BCrFA,WAA+BC,IAA/B,EAAmE;QAC7DlB,OAAO,MAAM7D,WAAS9D,SAAA,CAAU6I,IAAV,EAAgB,UAAhB,CAAT,CAAjB;;WAEOlB,KAAKxC,QAAL,CAAc,MAAd,CAAP;WACO2D,KAAKC,KAAL,CAAWpB,IAAX,CAAP;;;kBAJaqB;;;KATf,AAEA,AAcA;;ACXA;;;AAGA;8BAAe,WAAgC/F,GAAhC,EAA6C;;GAA7C,EAIG;QACZ0E,OAAOpC,QAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAApB;;QA0DIiD,SAAJ,EAAe;aACL,oBAAmBb,IAAK,EAAhC;;;UAGI5D,YAAU/D,SAAA,CAAUiD,GAAV,EAAe,MAAf,EAAuB,SAAvB,CAAV,EAA6C2E,OAAOC,IAAP,CAAYF,IAAZ,CAA7C,CAAN;GAnEF;;WAA8BsB,gBAA9B;;;;SAA8BA,gBAA9B;;;ACaA;;;;;AAQA,IAAIC,KAAJ;;;;;AAKA;8BAAO,WACLjG,GADK,EAELvH,GAFK,EAGLyN,OAAgB,EAHX,EAIU;UACT,EAAEX,YAAY,KAAd,KAAwBW,IAA9B;UACMC,QAAQD,KAAKC,KAAL,IAAcpJ,SAAA,CAAUqJ,SAAV,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,UAAlC,CAA5B;UACMC,QAAQtJ,SAAA,CAAUiD,GAAV,EAAe,MAAf,EAAuB,UAAvB,CAAd;UACMsG,WAAWpD,WAAWlD,GAAX,CAAjB;QACIuG,MAAJ;;UAEMjB,SAAS,MAAMvL,QAAQ2F,GAAR,CAAY,CAC/BD,UAAQ1C,SAAA,CAAUiD,GAAV,EAAe,KAAf,EAAsB,QAAtB,CAAR,CAD+B,EAE/BP,UAAQ1C,SAAA,CAAUiD,GAAV,EAAe,IAAf,EAAqB,SAArB,CAAR,CAF+B,EAG/BsB,WAAWvE,SAAA,CAAUiD,GAAV,EAAe,KAAf,EAAsB,aAAtB,CAAX,CAH+B,EAI/BsB,WAAWvE,SAAA,CAAUiD,GAAV,EAAe,KAAf,EAAsB,aAAtB,CAAX,CAJ+B,CAAZ,EAKlBG,IALkB,CAKb,iBAAS;UACX,CACFqG,MADE,EAEFC,UAFE,EAGFC,WAHE,EAIFC,WAJE,IAKAC,KALJ;;eAOSJ,OAAOK,MAAP,CAAcjM,QAAd,CAAT;mBACa6L,WAAWI,MAAX,CAAkBjM,QAAlB,CAAb;oBACc8L,YAAYG,MAAZ,CAAmBjM,QAAnB,CAAd;oBACc+L,YAAYE,MAAZ,CAAmBjM,QAAnB,CAAd;;aAEO,IAAIuB,GAAJ,CAAQ,CACb,CAAC,aAAD,EAAgBY,SAAA,CAAU,KAAV,EAAiB,UAAjB,CAAhB,CADa,EAEb,CAAC,QAAD,EAAWA,SAAA,CAAU,QAAV,EAAoB,cAApB,EAAqC,GAAEtE,GAAI,KAA3C,CAAX,CAFa,EAGb,CAAC,aAAD,EAAgBiO,WAAhB,CAHa,EAIb,CAAC,UAAD,EAAa3J,SAAA,CAAU,QAAV,EAAoB,aAApB,CAAb,CAJa,EAKb,CAAC,YAAD,EAAe0J,UAAf,CALa,EAMb,CAAC,QAAD,EAAWD,MAAX,CANa,EAOb,CAAC,QAAD,EAAWzJ,SAAA,CAAU,KAAV,EAAiB,WAAjB,CAAX,CAPa,EAQb,CAAC,MAAD,EAASA,SAAA,CAAU,IAAV,EAAgB,SAAhB,CAAT,CARa,EASb,CAAC,aAAD,EAAgB4J,WAAhB,CATa,CAAR,CAAP;KAlBmB,CAArB;;UA+BM5M,QAAQ2F,GAAR,CAAY,CAChBiG,eAAe3F,GAAf,EAAoBsF,MAApB,EAA4B;;KAA5B,CADgB,EAIhBU,iBAAiBhG,GAAjB,EAAsB;;KAAtB,CAJgB,CAAZ,CAAN;;UASM8G,UAAU;WACT/J,UAAA,CAAWoF,IAAX,CAAgB,GAAhB,EAAqB,GAAGnC,IAAIO,KAAJ,CAAUxD,QAAV,CAAxB,EAA6C,KAA7C,CADS;iBAEHA,UAAA,CAAWoF,IAAX,CAAgB,GAAhB,EAAqB,GAAGgE,MAAM5F,KAAN,CAAYxD,QAAZ,CAAxB;KAFb;;QAKItD,WAAA,OAAkB,OAAtB,EAA+B;YACvB,CAACsN,MAAD,IAAW/G,GAAjB;YACMgH,SAAU,GAAED,MAAO,IAAzB;;aAEOxI,MAAP,CAAcuI,OAAd,EAAuB;aAChBA,QAAQG,GAAR,CAAY/H,OAAZ,CAAoB8H,MAApB,EAA4B,EAA5B,CADgB;mBAEVF,QAAQI,SAAR,CAAkBhI,OAAlB,CAA0B8H,MAA1B,EAAkC,EAAlC;OAFb;;;UAMIG,SAAS,MAAMC,cAAO;WAAA;2BAAA;cAAA;WAAA;eAKjB,CACPC;iBACW,CAAC,KAAD;SACNP,OAFL,EADO,EAKPQ,MALO,EAMPtN,WANO,EAOPuN,OAAO;aACAvH,GADA;gBAEG,cAFH;qBAGQ,KAHR;iBAII,CACPjD,SAAA,CAAUiD,GAAV,EAAe,KAAf,EAAsB,IAAtB,CADO,CAJJ;iBAOI,CACPjD,SAAA,CAAUiD,GAAV,EAAe,cAAf,CADO,EAEPjD,SAAA,CAAUoJ,KAAV,EAAiB,IAAjB,EAAuB,IAAvB,CAFO;OAPX,CAPO,EAmBPqB,yBACM,MAAMzB,gBAAgB/F,GAAhB,CADZ;iBAEW;SArBJ,EAuBPyH,IAAI1K,YAAA,CAAaA,QAAb,EAAuBiD,GAAvB,EAA4B,KAA5B,CAAJ,CAvBO;KALU,CAArB;;QAgCI5G,aAAa,aAAjB,EAAgC;cACtB+N,MAAR;;;UAGIvH,QAAKyG,KAAL,CAAN;;aAES/D,QAAS;;;;GAAlB;;QAMIiD,SAAJ,EAAe;eACH,oBAAmBgB,MAAO,EAApC;;;WAGKY,OAAOzB,KAAP,CAAa;YAAA;YAEZ3I,SAAA,CAAUiD,GAAV,EAAe,MAAf,EAAuB,WAAvB,CAFY;cAGV,KAHU;iBAIP,IAJO;iBAKP;KALN,CAAP;GAlHF;;kBAAsB0H,OAAtB;;;KA2HA;;;8BC1JO,WAAqBnC,YAAqB,KAA1C,EAAgE;UAC/DoC,UAAU,IAAIC,GAAJ,CAAQ;YAChB,8BADgB;eAEb;KAFK,CAAhB;;YAKQC,KAAR;;UAEMH,QAAQ1O,GAAR,EAAaI,QAAb,EAAuB;;KAAvB,CAAN;;YAIQ0O,IAAR;GAZF;;kBAAsBC,KAAtB;;;;;ACLA,MAAMC,UAAU,IAAI7L,GAAJ,CAAQ,CACtB,CAAC,UAAD,EAAa,IAAb,CADsB,EAEtB,CAAC,QAAD,EAAW,SAAX,CAFsB,EAGtB,CAAC,OAAD,EAAU,QAAV,CAHsB,EAItB,CAAC,SAAD,EAAY,UAAZ,CAJsB,EAKtB,CAAC,QAAD,EAAW,QAAX,CALsB,CAAR,CAAhB;;AAQA,AAAe,SAAS8L,SAAT,CAAmBC,WAAW,QAA9B,EAAwC;SAC9CF,QAAQjM,GAAR,CAAYmM,QAAZ,KAAyB,SAAhC;;;ACDF;;;AAGA,mBAAgBhL,IAAD,IAA0B;QACjCuH,aAAapB,MAAMnG,IAAN,EAChBmI,IADgB,CACX5B,YADW,EAEhB4B,IAFgB,CAEX8C,mBAFW,EAGhBjN,KAHgB,EAAnB;;SAKOoH,QAAS;;;YAGNmC,UAAW;;;;qBAIFA,UAAW;GAP9B;CANF;;ACPA;;;AAGA,sBAAe,CAACvH,IAAD,EAAezE,GAAf,KAAuC;QAC9C2P,YAAY3P,QAAQ,MAA1B;QACM4P,YAAY5P,QAAQ,YAA1B;;SAEO6J,QAAS;;;iBAGD+F,YAAY,UAAZ,GAAyB,WAAY;kBACpCA,YAAY,UAAZ,GAAyB,UAAW;mBACnC,CAAC,CAACD,SAAF,EAAalG,QAAb,EAAwB;;;;;;;GALzC;CAJF;;ACHA;;;AAGA,sBAAe,MAAcI,QAAS;;;;CAAtC;;ACLe,SAASgG,MAAT,CAAgBC,SAAiB,CAAjC,EAA4C;SAClD,IAAIC,MAAJ,CAAWD,MAAX,CAAP;;;ACEF;;;AAGA,kBAAe,CAACrL,IAAD,EAAeuL,MAAf,KAA0C;QACjDC,aAAajF,aAAWvG,IAAX,CAAnB;MACIyL,aAAaF,MAAjB;MACInG,WAAW,oBAAf;MACIsG,QAAJ;;MAEI,CAACD,UAAL,EAAiB;iBACF,SAAb;;;MAGEA,eAAe,IAAnB,EAAyB;eACZ,UAAX;GADF,MAEO,IAAIA,eAAe,IAAf,IAAuBA,eAAe,SAA1C,EAAqD;eAC/C,MAAX;;;GAGD,aAAD,EAAgB,MAAhB,EAAwB,YAAxB,EAAsCnM,OAAtC,CAA8CqM,eAAe;gBAC7C,GAAEP,OAAO,CAAP,CAAU,GAAEO,WAAY,OAAxC;;QAEIF,eAAe,SAAnB,EAA8B;kBACd,GAAEL,OAAO,CAAP,CAAU,YAA1B;;;gBAGY,GAAEA,OAAO,CAAP,CAAU,YAAWK,UAAW,MAAhD;;QAEIC,QAAJ,EAAc;kBACE,GAAEN,OAAO,CAAP,CAAU,cAAaM,QAAS,MAAhD;;;YAGMC,WAAR;WACO,aAAL;oBACgB,GAAEP,OAAO,CAAP,CAAU,cAAaI,UAAW,SAAlD;;;WAGG,MAAL;oBACgB,GAAEJ,OAAO,CAAP,CAAU,cAAaI,UAAW,UAAlD;;;WAGG,YAAL;oBACgB,GAAEJ,OAAO,CAAP,CAAU,cAAaI,UAAW,UAAlD;;;;oBAIc,GAAEJ,OAAO,CAAP,CAAU,cAAaI,UAAW,IAAGG,WAAY,KAAjE;;;;gBAIU,GAAEP,OAAO,CAAP,CAAU,GAA1B;;QAEIO,gBAAgB,YAApB,EAAkC;kBACpB,OAAZ;;GAlCJ;;cAsCY,QAAZ;;SAEOvG,QAAP;CAxDF;;ACJA;;;AAGA,oBAAe,MAAcA,QAAS;;;;CAAtC;;;;;;;;;;;;;;;;;ACFA,MAAMwG,cAAsBC,OAA5B;AACA,MAAMC,uBAA+BC,gBAAgB,kBAAhB,CAArC;;;;;AAKA,uBAAgB/L,OAAD,IAA0BoF,QAAS;;eAEnCpF,OAAK;;;;;;;;;;;6BAWS8L,oBAAqB;;0BAExBF,WAAY;;;;;;CAftC;;ACPA;;;AAGA,uBAAe,MAAcxG,QAAS;;;;CAAtC;;ACHA;;;AAGA,wBAAe,MAAcA,QAAS;;;;;;;;;;;;;;;;;;CAAtC;;ACHA;;;AAGA,sBAAgBpF,IAAD,IAA0BoF,QAAS;MAC5CpF,IAAK;;;;;aAKEA,IAAK;;;;;;;;;;;;;;CANlB;;ACHA;;;AAGA,uBAAe,MAAcoF,QAAS;;;;;;;;;;;;;;;;;;;;;;CAAtC;;ACHA;;;AAGA,yBAAe,MAAcA,QAAS;;;;;;;;;;;;;;;CAAtC;;ACHA,MAAM4G,MAAM,WAAZ;;AAEA,AAAe,SAASC,YAAT,GAAwB;QAC/BC,SAASC,yBAAgB;WACtB1Q,QAAQ2Q,KADc;YAErB3Q,QAAQ4Q;GAFH,CAAf;;SAKOC,SAAP,CAAiB,EAAjB;;SAEO;aACIC,IAAT,EAAyC;aAChC,IAAI1P,OAAJ,CAAYC,cAAW;eACrB0P,QAAP,CAAgBD,IAAhB,EAAsBE,UAAU;qBACtBT,IAAIhJ,IAAJ,CAASyJ,MAAT,CAAR;SADF;OADK,CAAP;KAFG;;YASS;aACL/K,KAAP;;GAVJ;;;ACRF;;;;AAIA,AAAO,MAAMgL,8BAA8BtH,QAAS;;;;;;;;;;;;;QAa5CuH,UAAI,+CAAJ,CAAqD;;;;UAInDA,UAAI,qDAAJ,CAA2D;;;;;CAjB9D;;ACNA,MAAMC,gBAAgB,CAC3B,IAD2B,EAE3B,SAF2B,EAG3B,OAH2B,EAI3B,OAJ2B,EAK3B,QAL2B,EAM3B,UAN2B,EAO3B,eAP2B,EAQ3B,QAR2B,CAAtB,CAWP,AAAO;;ACTA,MAAMC,QAAQ,OAAd;AACP,AAAO,MAAMC,OAAO,MAAb;AACP,AAAO,MAAMC,OAAO,MAAb;AACP,AAAO,MAAMC,QAAQ,OAAd;;AAEP,AAAO,MAAMC,UACX,IAAIzN,aAAJ,CAAkB,CAAC,MAAD,EAAS,MAAT,CAAlB,CADK;;AAIPyN,QAAQ9O,MAAR;;AAEA,AAAO,MAAM+O,SACX,IAAIlO,aAAJ,CAAkB,CAChB,CAAC6N,KAAD,EAAQ,CAAR,CADgB,EAEhB,CAACC,IAAD,EAAO,CAAP,CAFgB,EAGhB,CAACC,IAAD,EAAO,CAAP,CAHgB,EAIhB,CAACC,KAAD,EAAQ,CAAR,CAJgB,CAAlB,CADK;;AASPE,OAAO/O,MAAP;;ACxBA,MAAMgP,iBAAiB,OAAO5N,OAAO6N,OAAd,KAA0B,UAAjD;;;;;AAKA,AAAe,SAASA,OAAT,CAAiB1Q,MAAjB,EAAuD;MAChEyQ,cAAJ,EAAoB;UACZE,OAAO9N,OAAO8N,IAAP,CAAY3Q,MAAZ,CAAb;UACMQ,SAAS,IAAIe,KAAJ,CAAUoP,KAAKlQ,MAAf,CAAf;;WAEOkQ,KAAK5O,MAAL,CAAY,CAAC6O,IAAD,EAAO3O,GAAP,EAAYoG,GAAZ,KAAoB;YAC/BwI,OAAOD,IAAb;YACMnE,QAAQ,IAAIlL,KAAJ,CAAU,CAAV,CAAd;;YAEM,CAAN,IAAWU,GAAX;YACM,CAAN,IAAWjC,OAAOiC,GAAP,CAAX;;;WAGKoG,GAAL,IAAYoE,KAAZ;;aAEOoE,IAAP;KAVK,EAWJrQ,MAXI,CAAP;;;SAcKqC,OAAO6N,OAAP,CAAe1Q,MAAf,CAAP;;;ACxBF;;;;;;;;;;;;;;;;;;AAkBA,AAAe,SAAS8Q,OAAT,CAAiBjQ,EAAjB,EAAqC;SAC3CA,IAAP;;;AChBF;;;AAGA,AAAe,SAASkQ,IAAT,CAAyBC,GAAzB,EAAiC,GAAGC,OAApC,EAA+D;SACrEH,QAAQ,MAAMJ,QAAQM,GAAR,EAClB/D,MADkB,CACX,CAAC,CAAChL,GAAD,CAAD,KAAWgP,QAAQnK,OAAR,CAAgB7E,GAAhB,IAAuB,CADvB,EAElBF,MAFkB,CAEX,CAACvB,MAAD,EAAS,CAACyB,GAAD,EAAMX,KAAN,CAAT,uBACHd,MADG;KAELyB,GAAD,GAAOX;IAJU,EAKf,EALe,CAAd,CAAP;;;ACLK,MAAM4P,OAAOC,WAAb;AACP,AAAO,MAAMC,SAAS,gBAAf;AACP,AAAO,MAAMC,SAAS,gBAAf;;ACFP;;;AAGA,AAAe,SAASC,SAAT,CAAmBhQ,KAAnB,EAAmCiQ,MAAnC,EAA4D;UACjE,OAAOjQ,KAAf;SACO,QAAL;aACSA,KAAP;;SAEG,QAAL;aACSkQ,OAAOlQ,KAAP,CAAP;;SAEG,WAAL;aACS,WAAP;;;aAGO2K,KAAKqF,SAAL,CAAehQ,KAAf,EAAsB,IAAtB,EAA4BiQ,MAA5B,CAAP;;;;;;GAON,AAAO;;ACpBQ,SAASE,aAAT,CAAuB3G,IAAvB,EAAsC4G,MAAtC,EAA8D;MACvE5G,gBAAgB6G,KAApB,EAA2B;WAClB7G,KAAK8G,KAAZ;GADF,MAEO,IAAIF,WAAW,MAAf,EAAuB;WACrBJ,UAAUxG,IAAV,EAAgBxF,OAAhB,CAAwB4L,IAAxB,EAA8B,EAA9B,CAAP;;;SAGKI,UAAUxG,IAAV,EAAgB,CAAhB,CAAP;;;ACAF;;;AAGA,AAAO,SAASG,cAAT,CAAsByG,MAAtB,EAA2D;SACzD,SAAS5F,KAAT,CAAehB,IAAf,EAAqB;UACpB,EAAE+G,KAAF,KAAoB/G,IAA1B;UAAkBZ,GAAlB,2BAA0BY,IAA1B;QACI,EAAEzB,OAAF,EAAWyI,SAAX,KAAyB5H,GAA7B;QACI6H,MAAJ;;QAEIL,WAAW,MAAf,EAAuB;eACZ,EAAT;;UAEIrI,WAAW,OAAOA,OAAP,KAAmB,QAA9B,IAA0CA,QAAQA,OAAtD,EAA+D;;mBAC7D;eAAA;mBAGWA,QAAQA;WACd0H,KAAK1H,OAAL,EAAc,SAAd,CAJL;OADF,MAOO;;mBACL;eAAA;;WAIKa,GAJL;;;eAQOuH,cAAcM,MAAd,EAAsB,MAAtB,CAAT;KAnBF,MAoBO;UACDC,UAAU,CAAd;;UAEIjT,QAAQ4Q,MAAR,YAA0BsC,eAA9B,EAA2C;kBAC/BlT,QAAQ4Q,MAAR,CAAeqC,OAAzB;;;gBAGQP,cAAcpI,OAAd,EAAuB,MAAvB,CAAV;;cAEQwI,KAAR;aACOxB,IAAL;sBACc6B,aAAQ,IAAGJ,SAAU,GAArB,CAAZ;;;aAGGxB,KAAL;sBACc6B,UAAK,IAAGL,SAAU,GAAlB,CAAZ;;;;sBAIY7B,UAAK,IAAG6B,SAAU,GAAlB,CAAZ;;;;eAIM,GAAEA,SAAU,IAAGzI,OAAQ,OAAM4G,UAAI,GAAJ,EAASrB,MAAT,CAAgBoD,OAAhB,CAAyB,IAAhE;;;QAGEZ,OAAO9K,IAAP,CAAYuL,KAAZ,CAAJ,EAAwB;cACdlC,MAAR,CAAe7D,KAAf,CAAsB,GAAEiG,MAAO,IAA/B;KADF,MAEO,IAAIV,OAAO/K,IAAP,CAAYuL,KAAZ,CAAJ,EAAwB;cACrBO,MAAR,CAAetG,KAAf,CAAsB,GAAEiG,MAAO,IAA/B;;GAtDJ;;;ACbF;;;AAGA,AAAe,SAAS/I,IAAT,CACbd,OADa,EAEb,GAAGC,MAFU,EAGL;SACDF,aAAaC,OAAb,EAAsB,GAAGC,MAAzB,EACJ7C,OADI,CACI,iBADJ,EACuB,EADvB,EAEJA,OAFI,CAEI,MAFJ,EAEY,GAFZ,EAGJ+M,IAHI,EAAP;;;ACLF;;;AAGA,SAASC,WAAT,CAAqBC,GAArB,EAAkC;QAC1BC,SAAS7T,KAAK8T,KAAL,CAAW9T,KAAK+T,KAAL,CAAWH,GAAX,IAAkB,CAA7B,CAAf;;SAEOC,SAAS,CAAT,IAAc/T,OAAOkU,QAAP,CAAgBH,MAAhB,CAAd,GAAwCA,MAAxC,GAAiD,CAAxD;;;;;;AAMF,SAASI,GAAT,CAAaC,SAAb,EAAgCC,OAAhC,EAAiDC,QAAjD,EAAmE;QAC3DC,YAAYV,YAAYQ,UAAUD,SAAtB,CAAlB;;SAEO,IAAIjE,MAAJ,CAAWoE,YAAYV,YAAYS,QAAZ,CAAvB,IAAgDA,QAAvD;;;;;;AAMF,AAAO,MAAME,gBAAgB,CAAC;eAAA;OAAA;OAAA;QAAA;QAAA;UAAA;WAAA;SAAA;YAAA;eAAA;;CAAD,KAYjB;EACVjK,IAAK;cACOkK,WAAM,GAAEC,MAAO,EAAf,CAAkB,KAAIhQ,OAAK,UAASiQ,aAAc;SACvDlR,QAAQ5B,KAAR,CAAc+S,QAAd,EAAwB,IAAxB,EAA8B,CAAE,GAAEC,UAAW,EAAf,CAA9B,CAAiD;IACtDpR,QAAQ5B,KAAR,CAAc+S,QAAd,EAAwB,IAAxB,EAA8B,CAAE,GAAEE,aAAc,EAAlB,CAA9B,CAAoD,OACpDC,QACG,GAAEtB,aAAOsB,MAAMC,UAAN,CAAiB9J,WAAjB,CAA6BrG,IAApC,CAA0C,IAAGoQ,WAAKF,MAAMG,MAAX,CAAmB,EADrE,GAEE,IACH;CACD;;EAEAC,cAAQ,QAAR,CAAkB;;EAElB3H,KAAKqF,SAAL,CAAeuC,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAgC;;EAEhCD,cAAQ,OAAR,CAAiB;;EAEjBnO,MAAMM,GAAN,CAAUL,WAAQ;QACZ,EAAErC,IAAF,EAAQ0P,QAAR,EAAkBU,UAAlB,KAAiC/N,OAAvC;MACI,EAAEpC,IAAF,KAAWoC,OAAf;;SAEOgO,WAAKpQ,IAAL,CAAP;;MAEID,SAAS,QAAb,EAAuB;WACb,GAAE6O,aAAOuB,UAAP,CAAmB,IAAGnQ,IAAK,EAArC;;;SAGM,GAAEsP,IAAIC,SAAJ,EAAeC,OAAf,EAAwBC,QAAxB,CAAkC,OAAMzP,IAAK,EAAvD;CAVA,EAWCiF,IAXD,CAWM,IAXN,CAWY;EACZqK,IAAIC,SAAJ,EACIC,OADJ,EAEIrN,MAAM1D,MAAN,CAAa,CAAC+R,KAAD,EAAQ,EAAEf,QAAF,EAAR,KAAyBe,QAAQf,QAA9C,EAAwD,CAAxD,CAFJ,CAEgE;EAChE,CAACD,UAAUD,SAAX,EAAsBvK,QAAtB,EAAiC;CA5C5B;;;;;AAkDP,AAAO,MAAMyL,eAAe,CAAC;eAAA;QAAA;QAAA;UAAA;WAAA;SAAA;YAAA;eAAA;;CAAD,KAUjB/K,IAAK;YACJkK,WAAM,GAAEC,MAAO,EAAf,CAAkB,KAAIhQ,OAAK,KAAIyQ,cAAQ,QAAR,CAAkB,IAC3D3H,KAAKqF,SAAL,CAAeuC,MAAf,CAAuB,SAAQT,aAChC,OAAM,CAACN,UAAUD,SAAX,EAAsBvK,QAAtB,EAAiC,YACtCpG,QAAQ5B,KAAR,CAAc+S,QAAd,EAAwB,IAAxB,EAA8B,CAAE,GAAEC,UAAW,EAAf,CAA9B,CACD,IACCpR,QAAQ5B,KAAR,CAAc+S,QAAd,EAAwB,IAAxB,EAA8B,CAAE,GAAEE,aAAc,EAAlB,CAA9B,CACD;CAjBM;;ACzEP;;;AAGA,AAAe,SAASS,YAAT,CACbH,MADa,EAEb,GAAGI,QAFU,EAGL;SACDvD,QAAQmD,MAAR,EACJ9N,GADI,CACA,CAAC,CAAC9D,GAAD,EAAMX,KAAN,CAAD,KAAkB,CACrBW,GADqB,EAErBgS,SAASnN,OAAT,CAAiB7E,GAAjB,KAAyB,CAAzB,GAA6B,YAA7B,GAA4CX,KAFvB,CADlB,EAKJS,MALI,CAKG,CAACvB,MAAD,EAAS,CAACyB,GAAD,EAAMX,KAAN,CAAT,uBACHd,MADG;KAELyB,GAAD,GAAOX,SAAS,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,CAACC,MAAMC,OAAN,CAAcF,KAAd,CAAvC,GACH0S,aAAa1S,KAAb,EAAoB,GAAG2S,QAAvB,CADG,GAEH3S;IATD,EAUD,EAVC,CAAP;;;ACOF;;;AAGA,AAAe,SAAS4S,OAAT,CAAiBC,MAAjB,EAAiCC,OAAjC,EAAyD;QAChE,EAAEC,OAAF,EAAWC,QAAX,EAAqBzB,SAArB,KAAmCuB,OAAzC;QACMtB,UAAUyB,KAAKC,GAAL,EAAhB;QACM,EAAErB,MAAF,EAAUsB,KAAK,EAAEtR,MAAAA,OAAF,EAAf,KAA4BkR,OAAlC;QACM,EAAE5O,KAAF,EAAS8N,aAAT,KAA2Be,QAAjC;MACI,EAAET,MAAF,KAAaQ,OAAjB;MACI,EAAEf,UAAF,KAAiBgB,QAArB;MACII,WAAJ;;WAESV,aAAaH,MAAb,EAAqB,GAAGM,OAAOlH,MAAP,CAAc4G,MAAtC,CAAT;;MAEIP,cAAc,GAAd,IAAqBA,aAAa,GAAtC,EAA2C;kBAC3B,OAAd;GADF,MAEO;kBACS,KAAd;;;MAGED,WAAWnR,QAAQC,GAAR,CAAYwS,cAAZ,EAAmBD,WAAnB,CAAf;;MAEI,OAAOrB,QAAP,KAAoB,WAAxB,EAAqC;eACvBpK,GAAD,IAAiBA,GAA5B;;;eAGWuI,OAAO8B,UAAP,CAAb;;QAEMsB,eAAe;iBAAA;SAAA;UAAA;UAAA;YAAA;aAAA;WAAA;cAAA;iBAAA;mBAUJ;GAVjB;;MAaIT,OAAOtC,KAAP,KAAiB1B,KAArB,EAA4B;WACnB0E,KAAP,CAAa5B,cAAc2B,YAAd,CAAb;GADF,MAEO;WACEE,IAAP,CAAYf,aAAaa,YAAb,CAAZ;;;;ACtDJ,MAAMG,UAAU,mBAAhB;;;;;AAUA,AAAe,SAASC,OAAT,CAAiBb,MAAjB,EAAiCC,OAAjC,EAAyD;QAChE,EAAEC,OAAF,EAAWC,QAAX,KAAwBF,OAA9B;QACM,EAAEjB,MAAF,EAAU8B,OAAV,EAAmBR,KAAK,EAAEtR,MAAAA,OAAF,EAAxB,KAAqCkR,OAA3C;QACM,EAAEf,YAAY4B,MAAd,KAAyBZ,QAA/B;QACMa,YAAYF,QAAQ9S,GAAR,CAAY,YAAZ,CAAlB;QACMiT,WAAW,UAAjB;;MAEI,EAAEvB,MAAF,KAAaQ,OAAjB;WACSL,aAAaH,MAAb,EAAqB,GAAGM,OAAOlH,MAAP,CAAc4G,MAAtC,CAAT;;SAEOiB,IAAP,CAAY;aACDC,OADC;;UAAA;iBAAA;UAAA;UAAA;YAAA;aAAA;mBASK;GATjB;;;ACXF;;;AAGA,AAAO,SAASM,mBAAT,CAA6BlB,MAA7B,EAA4D;SAC1D,CAACmB,GAAD,EAAMC,GAAN,EAAW,EAAE1C,SAAF,EAAX,KAA6B;QAC9BsB,OAAOzC,MAAP,KAAkB,MAAtB,EAA8B;cACpByC,MAAR,EAAgB;iBAAA;iBAELmB,GAFK;kBAGJC;OAHZ;KADF,MAMO;cACGpB,MAAR,EAAgB;iBAAA;iBAELmB,GAFK;kBAGJC;OAHZ;;GARJ;;;ACjBF,MAAMC,UAAU,0BAAhB;;;;;AAKA,AAAe,SAASC,GAAT,CACbvN,OADa,EAEb,GAAGC,MAFU,EAGL;SACDF,aAAaC,OAAb,EAAsB,GAAGC,MAAzB,EACJxB,KADI,CACE,GADF,EAEJZ,GAFI,CAEAqC,QAAQ;QACPoN,QAAQlP,IAAR,CAAa8B,IAAb,CAAJ,EAAwB;aACfA,IAAP;;;WAGKA,KAAKsN,WAAL,EAAP;GAPG,EASJnN,IATI,CASC,GATD,CAAP;;;ACiBF;;;;AAIA,MAAMoN,MAAN,CAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA6KC,EAAE9D,KAAF,EAASH,MAAT,EAAiBzE,MAAjB,EAAyB2I,OAAzB,EAAZ,EAAwD;QAClD9J,QAAQlL,CAAZ;QACIyT,UAAUzT,CAAd;;QAEI,CAAClB,WAAD,IAAgBkW,OAApB,EAA6B;cACnB3K,eAAayG,MAAb,CAAR;gBACU2D,oBAAoB,IAApB,CAAV;;;WAGKvT,gBAAP,CAAwB,IAAxB,EAA8B;aACrB;eACE+P,KADF;kBAEK,KAFL;oBAGO,IAHP;sBAIS;OALY;cAOpB;eACCH,MADD;kBAEI,KAFJ;oBAGM,IAHN;sBAIQ;OAXY;cAapB;eACCzE,MADD;kBAEI,KAFJ;oBAGM,IAHN;sBAIQ;OAjBY;eAmBnB;eACAtN,QAAQiW,OAAR,CADA;kBAEG,KAFH;oBAGK,IAHL;sBAIO;OAvBY;eAyBnB;eACAvB,OADA;kBAEG,KAFH;oBAGK,KAHL;sBAIO;;KA7BlB;;UAiCMwB,WAAWrF,OAAOrO,GAAP,CAAW0P,KAAX,KAAqB,CAAtC;;WAEOjP,OAAP,CAAe,CAACkT,GAAD,EAAM7T,GAAN,KAAc;aACpB8T,cAAP,CAAsB,IAAtB,EAA4B9T,IAAI+T,WAAJ,EAA5B,EAA+C;eACtCF,OAAOD,QAAP,GAAmBxM,OAAD,IAA4B;gBAC7C;mBAAA;mBAEGpH,GAFH;uBAGO,KAAKgU,YAAL;WAHb;SADK,GAMHrV,CAPyC;kBAQnC,KARmC;oBASjC,KATiC;sBAU/B;OAVhB;KADF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAqBa;WACN,IAAI2T,IAAJ,GAAW2B,WAAX,EAAP;;CAIJ,AACA,AACA;;AChRA;;;AAGA,MAAMC,kBAAN,SAAiCxE,KAAjC,CAAuC;cACzB9C,MAAZ,EAA4B;UACpB7F,IAAK;gCACiBkJ,aAAOrD,MAAP,CAAe;;QAEvCqB,cAAcnK,GAAd,CAAkBkD,OAAOmN,YAAMnN,GAAN,CAAzB,EAAqCV,IAArC,CAA0C,IAA1C,CAAgD;KAHpD;;CAQJ;;AClBA;;;AAGA,MAAM8N,iBAAN,SAAgC1E,KAAhC,CAAsC;cACxBrO,IAAZ,EAA0B;UACjB,oCAAmCA,IAAK,GAA/C;;CAIJ;;ACLA;;;AAGA,MAAMgT,sBAAN,SAAqC3E,KAArC,CAA2C;cAC7B9E,aAA6B,EAAzC,EAA6C;UACrC0J,UAAU1J,WACb9G,GADa,CACTkD,OAAOiJ,aAAOjJ,IAAIpC,MAAJ,CAAW,CAAX,EAAcoC,IAAIxI,MAAJ,GAAa,CAA3B,CAAP,CADE,EAEb8H,IAFa,CAER,IAFQ,CAAhB;;UAIMS,IAAK;6CAC8BuN,OAAQ;mBAClCH,YAAM,gBAAN,CAAwB;KAFvC;;CAOJ;;AChBA;;;AAGA,AAAe,SAASI,iBAAT,CACbC,MADa,EAEbnD,UAFa,EAGU;QACjBoD,SAAS,MAATA,MAAS,SAAcD,MAAd,CAAqB,EAApC;;SAIOV,cAAP,CAAsBW,MAAtB,EAA8B,MAA9B,EAAsC;WAC7BD,OAAOnT;GADhB;;SAIOyS,cAAP,CAAsBW,OAAOC,SAA7B,EAAwC,YAAxC,EAAsD;WAC7CrD;GADT;;;SAKOoD,MAAP;;;ACtBaF,kBACb,MAAMI,qBAAN,SAAoCjF,KAApC,CAA0C,EAD7B,EAEb,GAFa,CAAf;;ACFA,MAAMkF,kBAAN,SAAiClF,KAAjC,CAAuC;cACzB1C,WAAZ,EAAiC;UACxB,6CAA4CA,WAAY,GAA/D;;CAIJ;;ACFA,MAAM6H,mBAAN,SAAkCnF,KAAlC,CAAwC;cAC1B,EAAErO,IAAF,EAAQyT,UAAR,EAAZ,EAAyCC,eAAzC,EAAiE;UAE5D,kBAAiB1T,IAAK,SAAQyT,UAAW,IAAGzF,UAAU0F,eAAV,CAA2B,GAD1E;;;;AAMJ,AAAeR,kBAAkBM,mBAAlB,EAAuC,GAAvC,CAAf;;ACLA;;GAGA;;ACFA;;GAGA,AAAO,AAoFP,AAAO;;AC1DP;;;;;AArCA,AAwCA,AAAO;;;;;AAYP,AAAO;;;;GAWP,AAAO;;AC/DkC;;;;GAKzC,AAQA;;ACVA;;;AAGA,AAAO;;;;GA8BP,AAAO;;AC7BP;;;AAGA,AAAO;;;;;AA0CP,AAAO;;;;GA0CP,AAAO;;AC9FP,gDACA,AAWA,AA2CA,AAuCA,AA4BA;;ACtHA;;GAGA,AAAO;;ACFP;;;AAGA,AAAO;;;;;AAgBP,AAAO;;;;GAwBP,AAAO;;AChDP;;GAGA,AAAO;;ACDP;;;AAIA,AACA,AAEA;;;AAGA,AAAO;;;;;AA8BP,AAAO;;;;;AAeP,AAAO;;;;GAWP,AAAO;;AC/DP;;GAGA,AAAO;;AC4GP;;GAGA;;ACpGA;;wCAKA,AACA,AACA,AACA,AAGA,AAIMG,AAo+CN,AACA;;ACh+CA;;;;AAIA,MAAMC,OAAN,CAAc;;cASA9C,OAAZ,EAA8B;WACrBzP,MAAP,CAAc,IAAd,EAAoByP,OAApB;;CAIJ,AACA;;ACtDA,MAAM+C,MAAM,OAAZ;AACA,MAAMC,MAAM,iCAAZ;AACA,MAAMC,OAAO,QAAb;AACA,MAAMC,OAAO,kBAAb;AACA,MAAMC,OAAO,yDAAb;AACA,MAAMC,OAAO,QAAb;AACA,MAAMC,YAAY,SAAlB;;AAEA,AAAO,SAASjN,UAAT,CAAkBxK,MAAlB,EAA0C;SACxCA,OACJ2G,KADI,CACE8Q,SADF,EAEJ1V,MAFI,CAEG,CAACvB,MAAD,EAAS4H,IAAT,EAAeC,GAAf,KAAuB;QACzBD,KAAK,CAAL,CAAJ,EAAa;YACL,CAACsP,KAAD,IAAUtP,IAAhB;;aAGE5H,UACG6H,QAAQ,CAAR,GAAYqP,MAAM1B,WAAN,EAAZ,GAAkC0B,MAAMhC,WAAN,EADrC,IAEEtN,KAAKW,KAAL,CAAW,CAAX,EAAciN,WAAd,EAHJ;;;WAOKxV,MAAP;GAbG,EAcF,EAdE,CAAP;;;AAiBF,AAAO,SAASmX,UAAT,CAAoB3X,MAApB,EAAyC;MAC1CmX,IAAI7Q,IAAJ,CAAStG,MAAT,CAAJ,EAAsB;WACbvB,OAAOC,QAAP,CAAgBsB,MAAhB,EAAwB,EAAxB,CAAP;GADF,MAEO,IAAIsX,KAAKhR,IAAL,CAAUtG,MAAV,CAAJ,EAAuB;WACrBwX,KAAKlR,IAAL,CAAUtG,MAAV,CAAP;GADK,MAEA,IAAIqX,KAAK/Q,IAAL,CAAUtG,MAAV,CAAJ,EAAuB;WACrB,IAAP;GADK,MAEA,IAAIoX,IAAI9Q,IAAJ,CAAStG,MAAT,CAAJ,EAAsB;WACpBA,OAAO2G,KAAP,CAAa,GAAb,EAAkBZ,GAAlB,CAAsB4R,UAAtB,CAAP;GADK,MAEA,IAAIJ,KAAKjR,IAAL,CAAUtG,MAAV,CAAJ,EAAuB;WACrB,IAAIuU,IAAJ,CAASvU,MAAT,CAAP;;SAEKA,MAAP;;;AAGF,AAAO,SAAS4X,UAAT,CAAoB5X,MAApB,EAA4D;SAC1D0Q,QAAQ1Q,MAAR,EAAgB+B,MAAhB,CAAuB,CAACd,MAAD,EAAS,CAAC4W,CAAD,EAAIC,CAAJ,CAAT,KAAoB;UAC1C7V,MAAMuI,WAASqN,CAAT,CAAZ;QACIvW,QAAQwW,CAAZ;;QAEI,OAAOxW,KAAP,KAAiB,QAArB,EAA+B;cACrBqW,WAAWrW,KAAX,CAAR;KADF,MAEO,IAAID,SAASC,KAAT,CAAJ,EAAqB;cAClBsW,WAAWtW,KAAX,CAAR;;;QAGEW,QAAQ,SAAZ,EAAuB;UACjBX,SAAS,CAACC,MAAMC,OAAN,CAAcF,KAAd,CAAd,EAAoC;gBAC1B,CAACA,KAAD,CAAR;;;cAGMA,MAAMyE,GAAN,CAAUuF,QAAQ;YACpB,OAAOA,IAAP,KAAgB,QAApB,EAA8B;iBACrBd,WAASc,IAAT,CAAP;;eAEKA,IAAP;OAJM,CAAR;KALF,MAWO,IAAIrJ,QAAQ,QAAR,IAAoBZ,SAASC,KAAT,CAAxB,EAAyC;cACtCoP,QAAQpP,KAAR,EAAeS,MAAf,CAAsB,CAACgW,MAAD,EAAS,CAACC,QAAD,EAAWC,KAAX,CAAT,KAA+B;;eAEpDD,QAAP,IAAmB,CACjBzW,MAAMC,OAAN,CAAcyW,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CADd,EAEjBlS,GAFiB,CAEbuF,QAAQ;cACR,OAAOA,IAAP,KAAgB,QAApB,EAA8B;mBACrBd,WAASc,IAAT,CAAP;;iBAEKA,IAAP;SANiB,CAAnB;eAQOyM,MAAP;OAVM,EAWL,EAXK,CAAR;;;;WAeK9V,GAAP,IAAcX,KAAd;;WAEOL,MAAP;GAvCK,EAwCJ,EAxCI,CAAP;;;AC1CK,SAASb,SAAT,CAAiB+S,MAAjB,EAAiC8B,OAAjC,EAA2D;QAC1D3T,QAAQ2T,QAAQ9S,GAAR,CAAY,wBAAZ,KAAyCgR,MAAvD;;UAEQ7R,KAAR;SACO,KAAL;SACK,MAAL;SACK,MAAL;SACK,OAAL;SACK,QAAL;SACK,SAAL;aACSA,KAAP;;;YAGM,IAAIqQ,KAAJ,CAAW,WAAUrQ,KAAM,qBAA3B,CAAN;;;;ACXC,MAAM4W,OAAN,SAAsB5V,aAAtB,CAAoD;cAC7ChB,QAA2B,EAAvC,EAA2C;UACnCoP,QAAQpP,KAAR,CAAN;;;MAGEW,GAAJ,EAAgC;WACvB,MAAME,GAAN,CAAUqP,OAAOvP,GAAP,EAAY+T,WAAZ,EAAV,CAAP;;;MAGE/T,GAAJ,EAA0B;WACjB,MAAMI,GAAN,CAAUmP,OAAOvP,GAAP,EAAY+T,WAAZ,EAAV,CAAP;;;MAGE/T,GAAJ,EAAiBX,KAAjB,EAAsC;UAC9BkB,GAAN,CAAUgP,OAAOvP,GAAP,EAAY+T,WAAZ,EAAV,EAAqC1U,KAArC;WACO,IAAP;;;SAGKW,GAAP,EAA6B;WACpB,MAAMS,MAAN,CAAa8O,OAAOvP,GAAP,EAAY+T,WAAZ,EAAb,CAAP;;;;AAIJ,AAAO,MAAMmC,eAAN,SAA8BD,OAA9B,CAAsC;;cAG/BE,YAAZ,EAAwC;;SAEjCA,YAAL,GAAoBA,YAApB;;;MAGEnW,GAAJ,EAAiBX,KAAjB,EAAsC;SAC/B8W,YAAL,CAAkB,KAAlB,EAAyB,CAACnW,GAAD,EAAMX,KAAN,CAAzB;WACO,MAAMkB,GAAN,CAAUP,GAAV,EAAeX,KAAf,CAAP;;;SAGKW,GAAP,EAA6B;SACtBmW,YAAL,CAAkB,QAAlB,EAA4B,CAACnW,GAAD,EAAM,IAAN,CAA5B;WACO,MAAMS,MAAN,CAAaT,GAAb,CAAP;;;;AChCG,SAASoW,QAAT,CAAgB/C,GAAhB,EAAsCnB,MAAtC,EAAwE;SACtE,IAAIhU,OAAJ,CAAY,CAACC,UAAD,EAAUC,MAAV,KAAqB;UAChCoU,SAAM6D,UAAShD,IAAIb,GAAb,CAAZ;UACMQ,UAAU,IAAIiD,OAAJ,CAAY5C,IAAIL,OAAhB,CAAhB;UACMZ,UAAU,IAAI6C,OAAJ,CAAY;YAAA;aAAA;6BAGhBzC,MAAV,IAAeZ,QAAQ,EAAvB,GAH0B;cAIlB0E,UAAA,CAAiBC,GAAGtM,KAAH,CAASuI,OAAI8D,KAAb,CAAjB,CAJkB;cAKlBpF,SAAA,CAAemC,IAAInC,MAAnB,EAA2B8B,OAA3B,CALkB;;iBAOftV,QAAQ2V,IAAImD,UAAJ,CAAeC,SAAvB,CAPe;qBAQX;KARD,CAAhB;;YAWQjX,MAAR;;QAEI3B,SAASwG,IAAT,CAAc+N,QAAQlB,MAAtB,CAAJ,EAAmC;UAC7BwF,SAAS,CAAb;YACM/P,OAAOmC,OAAO6N,WAAP,CACXna,OAAOC,QAAP,CAAgB2V,QAAQY,OAAR,CAAgB9S,GAAhB,CAAoB,gBAApB,KAAyC,GAAzD,EAA8D,EAA9D,KAAqE,CAD1D,CAAb;;UAKGkC,EADH,CACM,MADN,EACeyG,IAAD,IAAkB;aACvB+N,IAAL,CAAUjQ,IAAV,EAAgB+P,MAAhB;kBACU7N,KAAKrK,MAAf;OAHJ,EAKGqY,IALH,CAKQ,KALR,EAKe,MAAM;YACbC,kBAAJ,CAAuB,KAAvB;YACIA,kBAAJ,CAAuB,MAAvB;YACIA,kBAAJ,CAAuB,OAAvB;;gBAEQlF,MAAR,CAAe/I,IAAf,GAAsBmB,KAAKC,KAAL,CAAWtD,KAAKN,QAAL,EAAX,CAAtB;;mBAEQ+L,OAAR;OAZJ,EAcGyE,IAdH,CAcQ,OAdR,EAckBvY,GAAD,IAAgB;YACzBwY,kBAAJ,CAAuB,KAAvB;YACIA,kBAAJ,CAAuB,MAAvB;YACIA,kBAAJ,CAAuB,OAAvB;;eAEOxY,GAAP;OAnBJ;KANF,MA2BO;iBACG8T,OAAR;;GA5CG,CAAP;;;ACKF;;;;;;AAMA,MAAM2E,QAAN,CAAe;;cAaD5E,OAAZ,EAA8B;WACrBzP,MAAP,CAAc,IAAd,EAAoByP,OAApB;;CApCJ,AAyCA;;ACrCO,SAASiE,QAAT,CAAgB9C,GAAhB,EAAqCpB,MAArC,EAA+D;SAC7D,IAAI6E,QAAJ,CAAa;UAAA;WAEX,EAFW;aAGT,IAAIb,eAAJ,CAAoB,CAAC9U,IAAD,EAAO,CAACpB,GAAD,EAAMX,KAAN,CAAP,KAAwB;UAC/C+B,SAAS,KAAT,IAAkB/B,KAAtB,EAA6B;YACvB2X,SAAJ,CAAchX,GAAd,EAAmBX,KAAnB;OADF,MAEO,IAAI+B,SAAS,QAAb,EAAuB;YACxB6V,YAAJ,CAAiBjX,GAAjB;;KAJK,CAHS;gBAUN,GAVM;mBAWH,IAXG;;QAad2G,IAAJ,EAAwB;UAClB7D,GAAJ,CAAQ6D,IAAR;KAdgB;;SAiBbA,IAAL,EAAyB;WAClB7D,GAAL,CAAS6D,IAAT;KAlBgB;;WAqBXnB,IAAP,EAA+B;UACzB6L,UAAJ,GAAiB7L,IAAjB,CAD6B;WAExB6L,UAAL,GAAkB7L,IAAlB;aACO,IAAP;KAxBgB;;cA2BRxF,GAAV,EAAsC;aAC7B,KAAKgT,OAAL,CAAa9S,GAAb,CAAiBF,GAAjB,CAAP;KA5BgB;;cA+BRA,GAAV,EAAuBX,KAAvB,EAA4C;WACrC2T,OAAL,CAAazS,GAAb,CAAiBP,GAAjB,EAAsBX,KAAtB;KAhCgB;;iBAmCLW,GAAb,EAAgC;WACzBgT,OAAL,CAAavS,MAAb,CAAoBT,GAApB;;GApCG,CAAP;;;ACCF,SAASkX,aAAT,CAAuB,EAAEhF,MAAF,EAAvB,EAAyD;WAC9CiF,OAAT,CAAiB9D,GAAjB,EAAuCC,GAAvC,EAA4D;WACnDpV,QAAQ2F,GAAR,CAAY,CACjBuO,QAAA,CAAeiB,GAAf,EAAoBnB,MAApB,CADiB,EAEjBG,QAAA,CAAgBiB,GAAhB,EAAqBpB,MAArB,CAFiB,CAAZ,CAAP;;;SAMK4B,cAAP,CAAsBqD,OAAtB,EAA+B,MAA/B,EAAuC;WAC9B,MAD8B;cAE3B,KAF2B;gBAGzB,IAHyB;kBAIvB;GAJhB;;SAOOA,OAAP;CAGF,AACA;;ACRO,SAASf,QAAT,CAAgBjE,OAAhB,EAA2C;QAC1CiF,UAAU5E,SAAA,CAAUL,QAAQK,GAAlB,CAAhB;QACMZ,SAAS0E,UAAA,CAAiBC,GAAGtM,KAAH,CAASmN,QAAQd,KAAjB,CAAjB,CAAf;QACMtD,UAAU,IAAIiD,OAAJ,CAAY9D,QAAQa,OAApB,CAAhB;;MAEIb,QAAQxL,IAAZ,EAAkB;WACTjE,MAAP,CAAckP,MAAd,EAAsBO,QAAQxL,IAA9B;;;UAGMnH,MAAR;;SAEO,IAAIyV,OAAJ,CAAY;UAAA;WAAA;2BAGPmC,OAAV,IAAmBxF,QAAQ,EAA3B,GAHiB;YAITO,QAAQD,MAJC;YAKThB,SAAA,CAAeiB,QAAQjB,MAAvB,EAA+B8B,OAA/B,CALS;eAMNoE,QAAQjE,QAAR,KAAqB,QANf;mBAOF;GAPV,CAAP;;;ACpBK,SAASiD,QAAT,CAAgBjE,OAAhB,EAA4C;SAC1C,IAAI4E,QAAJ,CAAa;WACX,EADW;aAET,IAAIb,eAAJ,CAAoB5S,IAApB,CAFS;YAGV6O,QAAQD,MAHE;gBAIN,GAJM;mBAKH,IALG;;QAOdvL,IAAJ,EAAwB;WACjB0Q,IAAL,CAAU1Q,IAAV;KARgB;;SAWbA,IAAL,EAAyB;UACnBwL,QAAQhU,OAAZ,EAAqB;cACb;iBAAA;oBAAA;;YAIF,IAJJ;;gBAMQA,OAAR,CAAgB;cAAA;iBAAA;oBAAA;sBAIFmT;SAJd;;KAnBc;;WA4BX9L,IAAP,EAA+B;WACxB6L,UAAL,GAAkB7L,IAAlB;aACO,IAAP;KA9BgB;;cAiCRxF,GAAV,EAAsC;aAC7B,KAAKgT,OAAL,CAAa9S,GAAb,CAAiBF,GAAjB,CAAP;KAlCgB;;cAqCRA,GAAV,EAAuBX,KAAvB,EAA4C;WACrC2T,OAAL,CAAazS,GAAb,CAAiBP,GAAjB,EAAsBX,KAAtB;KAtCgB;;iBAyCLW,GAAb,EAAgC;WACzBgT,OAAL,CAAavS,MAAb,CAAoBT,GAApB;;GA1CG,CAAP;;;ACIF,SAASkX,eAAT,CAAuB,EAAEhF,MAAF,EAAvB,EAAyD;WAC9CiF,OAAT,CAAiB,EAAE3E,KAAAA,MAAF,EAAO7L,IAAP,EAAauK,MAAb,EAAqB8B,OAArB,EAA8B7U,SAAAA,UAA9B,EAAjB,EAAmE;WAC1DD,QAAQC,OAAR,CAAgB,CACrBiU,QAAA,CAAe;iBAAA;UAAA;YAAA;YAAA;;KAAf,CADqB,EAQrBC,QAAA,CAAgB;YAAA;;KAAhB,CARqB,CAAhB,CAAP;;;SAeKyB,cAAP,CAAsBqD,OAAtB,EAA+B,MAA/B,EAAuC;WAC9B,MAD8B;cAE3B,KAF2B;gBAGzB,IAHyB;kBAIvB;GAJhB;;SAOOA,OAAP;CAGF,AACA;;ACzCA;;;AAcA,AAAO,SAASG,mBAAT,GAAuC;QACtC/K,YAAYhP,aAAa,MAA/B;QACMiP,YAAYjP,aAAa,YAA/B;;SAEO;YACG;YACA;iBACK;;KAHR;aAMIgP,YAAYgL,eAAZ,GAAmBC,aANvB;aAOI;aACAhL,YAAY,MAAZ,GAAqB,OADrB;cAECA,YAAY,MAAZ,GAAqB,MAFtB;eAGE,CAACD,SAHH;cAIC;gBACE;;;GAZd;;;AChBF,SAASkL,gBAAT,CAAwBzY,MAAxB,EAAwCgB,GAAxC,EAA8D;SACrDC,QAAQ5B,KAAR,CAAcuC,OAAO8T,SAAP,CAAiB+C,cAA/B,EAA+CzY,MAA/C,EAAuD,CAACgB,GAAD,CAAvD,CAAP;;;;;;AAMF,AAAe,SAAS0X,KAAT,CAAqCC,IAArC,EAA8C5Z,MAA9C,EAAgE;SACtE8Q,QAAQ,MAAMJ,QAAQ1Q,MAAR,EAAgB+B,MAAhB,CAAuB,CAACvB,MAAD,EAAS,CAACyB,GAAD,EAAMX,KAAN,CAAT,KAA0B;QAChEoY,iBAAelZ,MAAf,EAAuByB,GAAvB,KAA+BZ,SAASC,KAAT,CAAnC,EAAoD;YAC5CuY,eAAe3X,QAAQC,GAAR,CAAY3B,MAAZ,EAAoByB,GAApB,CAArB;;UAEIZ,SAASwY,YAAT,CAAJ,EAA4B;iCAErBrZ,MADL;WAEGyB,GAAD,GAAO0X,MAAME,YAAN,EAAoBvY,KAApB;;;;;6BAMRd,MADL;OAEGyB,GAAD,GAAOX;;GAdU,oBAiBhBsY,IAjBgB,EAAd,CAAP;;;ACPF,MAAME,sBAAsB,MAA5B;;;;;AAKA,AAAe,SAASC,SAAT,CACb9X,GADa,EAEb+X,SAFa,EAGb;SACOvQ,MAAMxH,GAAN,EACJwJ,IADI,CACCxC,OAAO;QACP+Q,SAAJ,EAAe;aACNA,UAAU/Q,GAAV,CAAP;;;WAGKA,GAAP;GANG,EAQJwC,IARI,CAQC5B,YARD,EASJ4B,IATI,CASCwO,oBATD,EAUJxO,IAVI,CAUCxC,OAAOA,IAAI3D,OAAJ,CAAYwU,mBAAZ,EAAiC,GAAjC,CAVR,EAWJxY,KAXI,EAAP;;;ACHF,MAAM4Y,iBAAiB,oCAAvB;;;;;AAKA,SAASC,SAAT,CAAmBC,QAAnB,EAAqC;SAC5B1J,QAAQ0J,QAAR,EAAkBrY,MAAlB,CAAyB,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMX,KAAN,CAAN,KAAuB;QACjD4Y,eAAe5T,IAAf,CAAoBrE,GAApB,CAAJ,EAA8B;YACtBoY,SAASpY,IAAIqD,OAAJ,CAAY4U,cAAZ,EAA4B,IAA5B,CAAf;YACMI,cAActa,UAAUA,OAAOsF,OAAP,CAAe+U,MAAf,EAAuB,EAAvB,CAA9B;;cAEQA,MAAR;aACO,YAAL;cACMvN,WAAJ,CAAgBtK,GAAhB,CAAoBuX,UAAU9X,GAAV,EAAeqY,WAAf,CAApB,EAAiDhZ,KAAjD;;;aAGG,YAAL;cACMyL,WAAJ,CAAgBvK,GAAhB,CAAoBuX,UAAU9X,GAAV,EAAeqY,WAAf,CAApB,EAAiDhZ,KAAjD;;;aAGG,IAAL;aACK,MAAL;cACMuL,UAAJ,CAAerK,GAAf,CACEuX,UAAU9X,GAAV,CADF,EAEEC,QAAQ0H,SAAR,CAAkB2Q,SAAlB,EAA6B,CAACjZ,KAAD,CAA7B,CAFF;;;;;;KAfN,MAwBO;cACGW,GAAR;aACO,aAAL;aACK,QAAL;aACK,MAAL;kBACUO,GAAR,CAAYR,GAAZ,EAAiB+X,UAAU9X,GAAV,CAAjB,EAAiCX,KAAjC;;;aAGG,QAAL;kBACUkB,GAAR,CAAYR,GAAZ,EAAiB,QAAjB,oBACK2X,MAAMJ,qBAAN,oBACEvX,IAAIwY,MADN,EAEElZ,KAFF,EADL;;;aAQG,UAAL;kBACUkB,GAAR,CAAYR,GAAZ,EAAiB,QAAjB,oBACKA,IAAIwY,MADT;sBAEYlZ;;;;;cAKRsL,MAAJ,CAAWpK,GAAX,CAAeuX,UAAU9X,GAAV,CAAf,EAA+BX,KAA/B;;;;;WAKCU,GAAP;GAvDK,EAwDJ;YACO,EADP;iBAEY,IAAIM,aAAJ,EAFZ;gBAGW,IAAIA,aAAJ,EAHX;YAIO,IAAIA,aAAJ,EAJP;iBAKY,IAAIA,aAAJ;GA7DR,CAAP;;;;;;AAoEF,AAAe,SAASmY,SAAT,CAAmBtX,OAAnB,EAA6D;QACpEiX,WAAmBlY,QAAQ5B,KAAR,CAAcoa,OAAd,EAAuB,IAAvB,EAA6B,CACpDhW,UAASvB,OAAT,EAAe,MAAf,EAAuB,QAAvB,CADoD,CAA7B,CAAzB;;SAIOsG,MAAM2Q,QAAN,EACJ3O,IADI,CACC0O,SADD,EAEJ1O,IAFI,CAECiF,OAFD,EAGJ9G,SAHI,CAGMtH,aAHN,EAIJhB,KAJI,GAKJG,MALI,EAAP;;;ACvFF;;GAGA,AAAO,AAqCP,AACA;;ACzCwE;;AAExE,AACA,AAGA;;GAGA,AAAO;;ACTP;;;AAGA,AAAO,SAASkZ,YAAT,CAAsBxX,OAAtB,EAA4C;MAC7CoK,MAAJ;;SAEO,SAASqN,IAAT,CAAcvX,IAAd,EAAoB;QACrB,CAACkK,MAAL,EAAa;eACFkN,UAAUtX,OAAV,CAAT;;;WAGKoK,OAAOpL,GAAP,CAAWkB,IAAX,CAAP;GALF;CASF,AACA;;ACbA;;;AAGA,AAAe,SAASwX,OAAT,CAAiB1X,OAAjB,EAA+BqX,SAAiB,EAAhD,EAA0D;MACnE,EAAEM,IAAF,KAAWN,MAAf;;QAEM;QAAA;UAAA;UAAA;UAAA;YAAA;YAAA;YAAA;QAAA;OAAA;;MAWFA,MAXJ;;MAaItK,cAAcpJ,OAAd,CAAsB+H,MAAtB,IAAgC,CAApC,EAAuC;UAC/B,IAAIsH,kBAAJ,CAAuBtH,MAAvB,CAAN;;;MAGEiM,QAAQ,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;WAC7B;WACAA,OAAO,CAAP,GAAW,CAAX,GAAe,CADf;WAEAA;KAFP;;;QAMIC,OAAoBL,QAAQhW,UAASvB,OAAT,EAAe,cAAf,EAA+B,MAA/B,CAAR,CAA1B;QACM6X,cAAcnM,WAAW,SAA/B;MACIoM,QAAJ;;MAEID,WAAJ,EAAiB;QACXE,MAAJ,EAAY;aACH1V,SAAP;iBACW,UAAX;KAFF,MAGO;iBACMd,UACTvB,OADS,EAET,IAFS,EAGR,GAAEmL,YAAY,SAAU,IAAG9O,QAAS,SAH5B,CAAX;;;;SAQGub,KAAK;QAAA;gBAEEtb,gBAAgBgV,MAAhB,IAAuB;SAAA;UAAA;UAAA;cAAA;cAAA;cAAA;YAO3BzF,QAP2B;kBAQrBmM;KAVJ;WAYH,KAZG;YAaFtM,MAbE;sBAcQmM;GAdb,CAAP;;;ACnDF;;;AAGA;8BAAe,WACbI,MADa,EAEK;UACZC,WAAoB,MAAMD,SAASC,QAAT,CAAkB,YAAlB,CAAhC;;QAEI,CAACA,QAAL,EAAe;YACPD,SAASE,WAAT,CAAqB,YAArB,EAAmC,iBAAS;cAC1CC,MAAN,CAAa,SAAb,EAAwB,EAAxB,EAA4BC,OAA5B;OADI,CAAN;;;WAKK,IAAP;GAXF;;WAA8BC,gBAA9B;;;;SAA8BA,gBAA9B;;;ACHA;;;AAGA;8BAAe,WACbhX,OADa,EAEbiX,KAFa,EAGW;UAClB7O,aAA4B,MAAMhH,UAAS,GAAEpB,OAAQ,aAAnB,CAAxC;UACMkX,WAA0B,MAAMD,QACjCE,MADiC,GAEjCrV,IAFiC,CAE5B;aAAQuE,KAAK/E,GAAL,CAAS,UAAC,EAAEoJ,OAAF,EAAD;eAAiBA,OAAjB;OAAT,CAAR;KAF4B,CAAtC;;WAIOtC,WAAWI,MAAX,CAAkB;aAAa0O,SAAS7U,OAAT,CACpC+U,UAAUvW,OAAV,CAAkB,gBAAlB,EAAoC,IAApC,CADoC,IAElC,CAFqB;KAAlB,CAAP;GATF;;WAA8BwW,iBAA9B;;;;SAA8BA,iBAA9B;;;ACMA;;;;;;AAMA;8BAAe,WACb5Y,QADa,EAEboJ,IAFa,EAGD;UACN,EAAEnJ,MAAAA,OAAF,EAAQyJ,MAAR,EAAgBuH,MAAhB,EAAwB4H,eAAxB,KAA4CzP,IAAlD;QACI,EAAEkO,MAAF,KAAalO,IAAjB;;aAESpK,QAAQC,GAAR,CAAYqY,MAAZ,EAAoBhb,QAApB,CAAT;;QAEI,CAACgb,MAAL,EAAa;YACL,IAAI3D,kBAAJ,CAAuBrX,QAAvB,CAAN;;;UAGI;cACKA,aAAa;QAGpBgb,MAJJ;;WAMO1Y,gBAAP,CAAwBoB,QAAxB,EAAkC;YAC1B;eACGC,OADH;kBAEM,KAFN;oBAGQ,KAHR;sBAIU;OALgB;aAOzB;eACE0R,KADF;kBAEK,KAFL;oBAGO,KAHP;sBAIS;OAXgB;cAaxB;eACCjI,MADD;kBAEI,KAFJ;oBAGM,KAHN;sBAIQ;OAjBgB;cAmBxB;eACCuH,MADD;kBAEI,KAFJ;oBAGM,KAHN;sBAIQ;OAvBgB;cAyBxB;eACCqG,MADD;kBAEI,KAFJ;oBAGM,IAHN;sBAIQ;OA7BgB;cA+BxB;eACC;iBAAMtX,SAASuV,UAAT,CAAoB2C,MAA1B;SADD;kBAEI,KAFJ;oBAGM,KAHN;sBAIQ;OAnCgB;kBAqCpB;eACHP,QAAQ1X,OAAR,EAAcqX,MAAd,CADG;kBAEA,KAFA;oBAGE,KAHF;sBAII;;KAzClB;;QA6CIA,OAAOU,MAAP,IAAiBV,OAAO3L,MAAP,KAAkB,SAAvC,EAAkD;YAC1C+L,OAAOD,aAAaxX,OAAb,CAAb;YACM6Y,OAAOpB,KAAK,MAAL,CAAb;YACM/N,aAAa+N,KAAK,YAAL,CAAnB;;YAEMa,iBAAiBvY,SAASkY,MAA1B,CAAN;;YAEM7E,UAAU,MAAMuF,kBAAkB3Y,OAAlB,EAAwB;eAC5CD,SAASuV,UAAT,CAAoB,YAApB,CAD4C;OAAxB,CAAtB;;YAIMwD,UAAU1F,QACbxQ,GADa,CACT,gBAAQ;cACLoJ,UAAU7L,KAAKgC,OAAL,CAAa,gBAAb,EAA+B,IAA/B,CAAhB;cACMrD,MAAMqB,KAAKgC,OAAL,CAAa,IAAIH,MAAJ,CAAY,GAAEgK,OAAQ,YAAtB,CAAb,EAAiD,IAAjD,CAAZ;;eAEO,CAACA,OAAD,EAAUtC,WAAW1K,GAAX,CAAgB,GAAEF,GAAI,KAAtB,CAAV,CAAP;OALY,EAObgL,MAPa,CAON,UAAC,GAAG4O,SAAH,CAAD;eAAmBlc,QAAQkc,SAAR,CAAnB;OAPM,EAQbK,OARa,GASbnW,GATa,CAST,UAAC,CAACoJ,OAAD,EAAU0M,SAAV,CAAD;eAA0B,YAAM;gBAC7BtD,QAAQsD,UAAUM,GAAV,CAAcjZ,SAASkY,MAAT,EAAd,CAAd;;iBAEO7C,MAAMhS,IAAN,CAAW;mBAChBrD,SAASuV,UAAT,CAAoB,YAApB,EAAkC2D,MAAlC,CAAyC;;aAAzC,CADgB;WAAX,CAAP;SAHG;OATS,CAAhB;;YAmBM/R,aAAa,GAAG4R,OAAhB,GAAN;YACM/Y,SAASuV,UAAT,CAAoB4D,WAApB,CAAgC;eACpCL,KAAKM,GAAL,EAAUpZ,SAASuV,UAAnB,CADoC;OAAhC,CAAN;KA/BF,MAkCO,IAAI8D,oBAAapd,kBAAUA,eAAOoK,EAAP,KAAc,CAAzC,EAA6C;YAC5CkS,iBAAiBvY,SAASkY,MAA1B,CAAN;;UAEIW,eAAJ,EAAqB;cACbxF,UAAU,MAAMuF,kBAAkB3Y,OAAlB,EAAwB;iBAC5CD,SAASuV,UAAT,CAAoB,YAApB,CAD4C;SAAxB,CAAtB;;YAIIlC,QAAQ9V,MAAZ,EAAoB;gBACZ,IAAI6V,sBAAJ,CAA2BC,OAA3B,CAAN;;;;;UAKApW,QAAQ2F,GAAR,CACJvE,MACGyJ,IADH,CACQ4B,OAAOzE,MAAP,EADR,EAEGpC,GAFH,CAEO;aACHyW,MAAM5X,UAAN,CAAiB1B,QAAjB,EAA2B;eAAMA,SAASuV,UAAT,CAAoB+D,MAAMC,SAA1B,CAAN;OAA3B,CADG;KAFP,CADI,CAAN;;WAQOvZ,QAAP;GAxHF;;WAA8B0B,UAA9B;;;;SAA8BA,UAA9B;;;ACZA;;;AAGA,yBAAeoF,QAAQ0S,sBAAR,EAAqBzC,oBAArB,EAAgCpQ,YAAhC,CAAf;;ACRA,SAAS8S,SAAT,CAAmBC,GAAnB,EAAwC;SAC/B,CAACA,MAAM,EAAP,EAAWtU,QAAX,GAAsBhD,OAAtB,CAA8B,GAA9B,EAAmC,EAAnC,EAAuCuB,MAAvC,CAA8C,CAA9C,EAAiD,CAAjD,CAAP;;;AAGF,AAAO,UAAUgW,OAAV,CACLC,IADK,EAELnO,MAFK,EAG0B;OAC1B,IAAIoO,IAAI,CAAb,EAAgBA,IAAIpO,MAApB,EAA4BoO,KAAK,CAAjC,EAAoC;UAC5BD,IAAN;;;;AAIJ,AAAe,SAASE,iBAAT,GAAqC;QAC5CxI,MAAM,IAAID,IAAJ,EAAZ;QACMzC,YAAY0C,IAAI0B,WAAJ,GACfrP,MADe,CACR,CADQ,EACL,EADK,EAEfF,KAFe,CAET,GAFS,EAGf4B,IAHe,CAGV,EAHU,IAIdoU,UAAUnI,IAAIyI,QAAJ,EAAV,CAJc,GAKdN,UAAUnI,IAAI0I,UAAJ,EAAV,CALc,GAMdP,UAAUnI,IAAI2I,UAAJ,EAAV,CANc,GAOdR,UAAUnI,IAAI4I,eAAJ,EAAV,CAPJ;;SASOtL,YAAY,CAAC,GAAG+K,QAAQ,GAAR,EAAa,KAAK/K,UAAUrR,MAA5B,CAAJ,EAAyC8H,IAAzC,CAA8C,EAA9C,CAAnB;;;ACtBF;;;AAGA,MAAMgS,SAAN,CAA2B;;cAGb1Z,EAAZ,EAAiC;SAC1BA,EAAL,GAAUA,EAAV;;;MAGEua,MAAJ,EAAkB;WACT,KAAKva,EAAL,CAAQua,MAAR,CAAP;;CAIJ,AACA;;ACRA;;;AAGA,MAAMiC,QAAN,CAAe;;cAeD;iBAAA;UAAA;UAAA;UAAA;;GAAZ,EAMqC;WAC5BzY,aAAW,IAAX,EAAiB;mBAAA;YAAA;YAAA;YAAA;;KAAjB,CAAP;;;;;;;;;;;MAiBE0Y,OAAJ,GAAuB;WACd3d,QAAQ,KAAK6a,MAAL,CAAYM,IAApB,CAAP;;;WAGOzX,IAAT,EAAqC;UAC7BmZ,QAAQ,KAAK5P,MAAL,CAAYzK,GAAZ,CAAgBob,mBAAmBla,IAAnB,CAAhB,CAAd;;QAEI,CAACmZ,KAAL,EAAY;YACJ,IAAInG,iBAAJ,CAAsBhT,IAAtB,CAAN;;;WAGKmZ,KAAP;;CAIJ,AACA,AACA,AACA,AACA,AACA,AACA,AACA;;AChEA,MAAMgB,aAAa,mBAAnB;AACA,MAAMC,eAAe,6BAArB;;;;;AAKA,qBAAe,CAACna,IAAD,EAAeoa,KAAf,KAAwC;QAC/C7S,aAAapB,MAAMnG,IAAN,EAChBmI,IADgB,CACX5B,YADW,EAEhB4B,IAFgB,CAEX8C,mBAFW,EAGhBjN,KAHgB,EAAnB;;SAKOoH,QAAS;;;YAGNmC,UAAW;MACjB6F,QAAQ,CAACgN,SAAS,EAAV,EACPzQ,MADO,CACA0Q,QAAQH,WAAWlX,IAAX,CAAgBqX,IAAhB,CADR,EAEP5X,GAFO,CAEH4X,QAAQA,KAAKhX,KAAL,CAAW,GAAX,CAFL,EAGPsG,MAHO,CAGA,CAAC,GAAG5J,IAAH,CAAD,KAAcoa,aAAanX,IAAb,CAAkBjD,IAAlB,CAHd,EAIPtB,MAJO,CAIA,CAACiL,KAAD,EAAQ,CAAC4Q,OAAD,EAAUva,IAAV,CAAR,KAA4B;UAC5BpB,MAAMwH,MAAMpG,IAAN,EACToI,IADS,CACJ5B,YADI,EAET4B,IAFS,CAEJxC,OAAOuB,oBAASvB,GAAT,EAAc,IAAd,CAFH,EAGT3H,KAHS,EAAZ;;UAKMA,QAAQY,QAAQC,GAAR,CAAY6K,KAAZ,EAAmB/K,GAAnB,CAAd;;QAEIX,KAAJ,EAAW;YACHuc,UAAUrT,oBAASK,UAAT,EAAqB,IAArB,CAAhB;YACMiT,aAAarU,MAAMmU,OAAN,EAChBnS,IADgB,CACX5B,YADW,EAEhB4B,IAFgB,CAEXxC,OAAOuB,oBAASvB,GAAT,EAAc,IAAd,CAFI,EAGhB3H,KAHgB,EAAnB;;+BAMK0L,KADL;SAEG/K,GAAD,GAAO,CACL,GAAGX,KADE,EAEJ,GAAEoN,OAAO,CAAP,CAAU,GAAEoP,UAAW,MAAKC,MAAI,EAAnC,GACG,GAAErP,OAAO,EAAP,CAAW,aAAYmP,OAAQ,IAAGE,MAAI,EAD3C,GAEG,GAAErP,OAAO,CAAP,CAAU,GAJV;;;;WASJ1B,KAAP;GA9BM,EA+BL;YACO,EADP;aAEQ,EAFR;eAGU;GAlCL,CAAR,EAoCCC,MApCD,CAoCQ,CAAC,GAAG3L,KAAH,CAAD,KAAeA,MAAMb,MApC7B,EAqCCsB,MArCD,CAqCQ,CAACvB,MAAD,EAAS,CAACyB,GAAD,EAAMX,KAAN,CAAT,EAAuB0c,KAAvB,KACNvU,MAAMjJ,MAAN,EACGiL,IADH,CACQxC,OAAO;QACP+U,SAAS/U,IAAIxI,MAAjB,EAAyB;aACf,GAAEwI,GAAI,GAAE8U,OAAInP,MAAJ,CAAW,CAAX,CAAc,EAA9B;;;WAGK3F,GAAP;GANJ,EAQGwC,IARH,CAQQxC,OACJA;IACG,GAAEyF,OAAOsP,UAAU,CAAV,GAAc,CAAd,GAAkB,CAAzB,CAA4B,UAAS/b,GAAI,OAAM8b,MAAI,EADxD,GAEG,GAAEzc,MAAMiH,IAAN,CAAY,IAAGwV,OAAInP,MAAJ,CAAW,CAAX,CAAc,EAA7B,CAAgC,GAAEmP,MAAI,EAF3C;IAGG,GAAErP,OAAO,CAAP,CAAU,IAZnB,EAcGpN,KAdH,EAtCF,EAqDG,EArDH,CAqDO;;;qBAGQuJ,UAAW;GA5D9B;CANF;;ACRA;;;AAGA,0BAAe,CAACvH,IAAD,EAAeoa,KAAf,KAAgD;MACzD7S,aAAapB,MAAMnG,IAAN,EACdmI,IADc,CACT5B,YADS,EAEd4B,IAFc,CAET8C,mBAFS,EAGdjN,KAHc,EAAjB;;MAKI,CAACuJ,WAAWrB,QAAX,CAAoB,aAApB,CAAL,EAAyC;iBAC1B+B,qBAAUV,UAAV,CAAb;;;QAGIjC,OAAO8H,QACXgN,MACGzQ,MADH,CACU0Q,QAAQ,qBAAqBrX,IAArB,CAA0BqX,IAA1B,CADlB,EAEG5X,GAFH,CAEO4X,QAAQA,KAAKhX,KAAL,CAAW,GAAX,CAFf,EAGG5E,MAHH,CAGU,CAACC,GAAD,EAAMic,KAAN,KAAgB;UAChB,GAAG5a,IAAH,IAAW4a,KAAjB;QACI,CAACN,IAAD,IAASM,KAAb;QACI;YAAA;aAAA;;QAIAjc,GAJJ;;WAMQ,GAAE0M,OAAO,CAAP,CAAU,IAAGlE,oBAASX,aAAW8T,IAAX,CAAT,EAA2B,IAA3B,CAAiC,GAAxD;;YAEQta,IAAR;WACO,YAAL;WACK,SAAL;iBACW,CAAC,GAAG6a,MAAJ,EAAYP,IAAZ,CAAT;;;WAGG,UAAL;kBACY,CAAC,GAAGQ,OAAJ,EAAaR,IAAb,CAAV;;;;qBAIa,CAAC,GAAGS,UAAJ,EAAgBT,IAAhB,CAAb;;;WAGG;gBAAA;YAAA;;KAAP;GA5BJ,EAiCK;gBACW,EADX;eAEU,EAFV;YAGO,EAHP;aAIQ;GArCb,CADW,EAwCX5b,MAxCW,CAwCJ,CAACvB,MAAD,EAAS6d,KAAT,EAAgBL,KAAhB,KAA0B;UAC3B,CAAC/b,GAAD,IAAQoc,KAAd;QACI,GAAG/c,KAAH,IAAY+c,KAAhB;QACIpV,MAAMzI,MAAV;;QAEIc,MAAMb,MAAV,EAAkB;cACRa,MAAMiH,IAAN,CAAW,KAAX,CAAR;;UAEIyV,SAAS/U,IAAIxI,MAAjB,EAAyB;eAChB,MAAP;;;aAGM,GAAEiO,OAAOsP,UAAU,CAAV,GAAc,CAAd,GAAkB,CAAzB,CAA4B,GAAE/b,GAAI,KAArC,GACJ,MAAKX,KAAM,KAAIoN,OAAO,CAAP,CAAU,IAD5B;;;WAIKzF,GAAP;GAxDW,EAyDV,EAzDU,CAAb;;SA2DOP,QAAS;;;YAGNmC,UAAW;MACjBjC,IAAK;;;qBAGUiC,UAAW;GAP9B;CArEF;;ACHA;;;AAGA,0BAAe,CAACvH,IAAD,EAAeoa,KAAf,KAAgD;MACzD7S,aAAapB,MAAMnG,IAAN,EACdmI,IADc,CACT5B,YADS,EAEd4B,IAFc,CAET8C,mBAFS,EAGdjN,KAHc,EAAjB;;MAKI,CAACuJ,WAAWrB,QAAX,CAAoB,aAApB,CAAL,EAAyC;iBAC1B+B,qBAAUV,UAAV,CAAb;;;QAGIjC,OAAO8H,QACXgN,MACGzQ,MADH,CACU0Q,QAAQ,qBAAqBrX,IAArB,CAA0BqX,IAA1B,CADlB,EAEG5X,GAFH,CAEO4X,QAAQA,KAAKhX,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAFf,EAGG5E,MAHH,CAGU,CAACC,GAAD,EAAM2b,IAAN,uBACH3b,GADG;YAEE,CACN,GAAGA,IAAI6R,MADD,EAEL,GAAEnF,OAAO,CAAP,CAAU,IAAGlE,oBAASX,aAAW8T,IAAX,CAAT,EAA2B,IAA3B,CAAiC,GAF3C;IALZ,EASM,EAAE9J,QAAQ,EAAV,EATN,CADW,EAWX9R,MAXW,CAWJ,CAACvB,MAAD,EAAS6d,KAAT,EAAgBL,KAAhB,KAA0B;UAC3B,CAAC/b,GAAD,IAAQoc,KAAd;QACI,GAAG/c,KAAH,IAAY+c,KAAhB;QACIpV,MAAMzI,MAAV;;QAEIc,MAAMb,MAAV,EAAkB;cACRa,MAAMiH,IAAN,CAAW,KAAX,CAAR;;UAEIyV,SAAS/U,IAAIxI,MAAjB,EAAyB;eAChB,MAAP;;;aAGM,GAAEiO,OAAOsP,UAAU,CAAV,GAAc,CAAd,GAAkB,CAAzB,CAA4B,GAAE/b,GAAI,KAArC,GACJ,MAAKX,KAAM,KAAIoN,OAAO,CAAP,CAAU,IAD5B;;;WAIKzF,GAAP;GA3BW,EA4BV,EA5BU,CAAb;;SA8BOP,QAAS;;;YAGNmC,UAAW;MACjBjC,IAAK;;;qBAGUiC,UAAW;GAP9B;CAxCF;;ACTA;;;AAGA,8BAAe,MAAcnC,QAAS;;;;;;;;CAAtC;;ACEA;;;AAGA,8BAAe,CAACpF,IAAD,EAAeoa,KAAf,KAAyD;QAChEY,UAAU,CAAC,IAAD,CAAhB;QACM5C,QAAQjS,MAAMnG,IAAN,EACXmI,IADW,CACNxC,OAAOA,IAAIpC,MAAJ,CAAW,EAAX,CADD,EAEX4E,IAFW,CAEN5B,YAFM,EAGX4B,IAHW,CAGNF,oBAHM,EAIXjK,KAJW,EAAd;;MAMIsH,OAAO,EAAX;;MAEIrH,MAAMC,OAAN,CAAckc,KAAd,CAAJ,EAA0B;WACjBA,MACJzQ,MADI,CACG0Q,QAAQ,qBAAqBrX,IAArB,CAA0BqX,IAA1B,CADX,EAEJ5X,GAFI,CAEA4X,QAAQA,KAAKhX,KAAL,CAAW,GAAX,CAFR,EAGJsG,MAHI,CAGG,CAAC,GAAG5J,IAAH,CAAD,KAAc,CAAC,oBAAoBiD,IAApB,CAAyBjD,IAAzB,CAHlB,EAIJ0C,GAJI,CAIA4X,QAAQ;UACP,CAACY,MAAD,EAASlb,IAAT,IAAiBsa,IAArB;;eAES9T,aAAW0U,MAAX,CAAT;;UAEIlb,SAAS,YAAb,EAA2B;eAClB,SAAP;iBACU,GAAEkb,MAAO,KAAnB;;YAEIhd,MAAMC,OAAN,CAAc8c,OAAd,CAAJ,EAA4B;kBAClBE,IAAR,CAAaD,MAAb;;;;aAIG,CAACA,MAAD,EAASlb,IAAT,CAAP;KAlBG,EAoBJ0C,GApBI,CAoBA,CAAC4X,IAAD,EAAOK,KAAP,KAAiB;UAChB,CAACO,MAAD,IAAWZ,IAAf;YACM,GAAGta,IAAH,IAAWsa,IAAjB;YACMc,cAAcH,QAAQxX,OAAR,CAAgByX,MAAhB,KAA2B,CAA/C;;eAEU,GAAE7P,OAAOsP,QAAQ,CAAR,GAAY,CAAZ,GAAgB,CAAvB,CAA0B,SAAQ3a,IAAK,KAAIkb,MAAO,IAA9D;aACOE,cAAe,GAAEF,MAAO,WAAxB,GAAsC,GAAEA,MAAO,GAAtD;KA1BG,EA4BJhW,IA5BI,CA4BC,IA5BD,CAAP;;;SA+BKG,QAAS;;mCAEiBgT,KAAM;;UAE/B9S,IAAK;;;;;;;;;iCASkB8S,KAAM;;GAbrC;CA1CF;;ACJA;;;AAGA,0BAAgBpY,IAAD,IAA0B;QACjCuH,aAAapB,MAAMnG,IAAN,EAChBmI,IADgB,CACX5B,YADW,EAEhB4B,IAFgB,CAEXxC,OAAOuB,oBAASvB,GAAT,EAAc,IAAd,CAFI,EAGhB3H,KAHgB,EAAnB;;SAKOoH,QAAS;8BACYmC,UAAW;;;GADvC;CANF;;ACHA;;;AAGA,oBAAgBvH,IAAD,IAA0B;QACjCuH,aAAapB,MAAMnG,IAAN,EAChBmI,IADgB,CACX5B,YADW,EAEhB4B,IAFgB,CAEXxC,OAAOuB,oBAASvB,GAAT,EAAc,IAAd,CAFI,EAGhB3H,KAHgB,EAAnB;;SAKOoH,QAAS;8BACYmC,UAAW;;;GADvC;CANF;;ACTA;;;AAGA,AAAe,SAAS6T,GAAT,CAAa5T,IAAb,EAAyC;MAClDA,gBAAgB6G,KAApB,EAA2B;YACjBhC,MAAR,CAAe7D,KAAf,CAAsB,GAAEhB,KAAK8G,KAAL,IAAc9G,KAAKzB,OAAQ,IAAnD;GADF,MAEO;YACG+I,MAAR,CAAetG,KAAf,CAAsB,GAAEhB,IAAK,IAA7B;;;;ACEJ,MAAM6T,gBAAgB,KAAtB;;;;;AAKA,AAAe,SAASC,eAAT,CAAyB;KAAA;UAAA;gBAGxBpY;CAHD,EAQD;;iCACL,iBAA+C;UAAxC,EAAEnH,GAAF,EAAOqe,KAAP,EAAcmB,UAAd,EAAwC;UAAXvS,IAAW;;YAC9CnJ,UAAOsD,UAAUpH,GAAV,EAAe+G,GAAf,EAAqB,GAAEkG,KAAKhJ,IAAK,KAAjC,CAAb;YACMA,OAAOgJ,KAAKhJ,IAAL,CAAUgC,OAAV,CAAkBqZ,aAAlB,EAAiC,GAAjC,CAAb;UACIhL,SAASyC,YAAM,QAAN,CAAb;;YAEM/O,SAASlE,QAAKiD,GAAd,CAAN;;UAEI,MAAM0Y,YAAY3b,QAAK4b,QAAjB,CAAV,EAAsC;cAC9BC,iBAAiB,MAAMH,WAAW1b,QAAK8b,QAAhB,CAA7B;;YAEID,kBAAkB,OAAOA,cAAP,KAA0B,QAAhD,EAA0D;gBAClDhZ,QAAKtB,UAASvB,QAAKiD,GAAd,EAAmB4Y,cAAnB,CAAL,CAAN;cACK,GAAE7M,UAAI,QAAJ,CAAc,IAAGzN,UAAS0B,GAAT,EAAc4Y,cAAd,CAA8B,EAAtD;SAFF,MAGO,IAAIA,kBAAkB,OAAOA,cAAP,KAA0B,SAAhD,EAA2D;mBACvD9M,aAAO,WAAP,CAAT;gBACMlM,QAAK7C,QAAK4b,QAAV,CAAN;SAFK,MAGA;cACA,GAAE7M,aAAO,MAAP,CAAe,IAAG/O,QAAK8b,QAAS,EAAvC;;;;;YAKE/X,YAAU/D,QAAK4b,QAAf,EAAyBhU,OAAOC,IAAP,CAAYtC,SAASpF,IAAT,EAAeoa,KAAf,CAAZ,CAAzB,CAAN;UACK,GAAE/J,MAAO,IAAGxQ,QAAK8b,QAAS,EAA/B;KAvBF;;;;;;;;ACpBK,SAASC,cAAT,CAAwB/b,OAAxB,EAAwD;QACvD,EAAEiD,GAAF,EAAOQ,IAAP,KAAgBH,UAAUtD,OAAV,CAAtB;QACM+B,UAAU,IAAIC,MAAJ,CAAY,SAAQyB,KAAKC,MAAL,CAAY,EAAZ,CAAgB,GAApC,CAAhB;;SAEOL,UAAOtB,OAAP,EAAgBkB,GAAhB,CAAP;;;AAGF,AAAO,SAAS+Y,sBAAT,CAAgC,EAAE9f,GAAF,EAAOwf,UAAP,EAAhC,EAGyC;;gCACvC,WAAM1b,OAAN,EAAc;UACf,MAAM0b,WAAW1b,OAAX,CAAV,EAA4B;cACpBuD,SAASD,UAAUpH,GAAV,EAAe8D,OAAf,CAAf;cACM0J,aAAa,MAAMhH,UAAQa,OAAON,GAAf,CAAzB;;eAEOyG,WAAWuS,IAAX,CACL;iBAAQnZ,KAAKY,MAAL,CAAY,EAAZ,MAAoBH,OAAOE,IAAP,CAAYC,MAAZ,CAAmB,EAAnB,CAA5B;SADK,KAEF,KAFL;;;aAKK,KAAP;KAVF;;;;;;;;ACQF;;;AAGA;8BAAO,WAA0ByF,IAA1B,EAA+D;UAC9D,EAAEjN,GAAF,KAAUiN,IAAhB;QACI,EAAEhJ,IAAF,KAAWgJ,IAAf;;UAEMlG,MAAM1B,UAAS,KAAT,EAAgB,aAAhB,CAAZ;UACM2a,WAAWT,gBAAgB;SAAA;gBAErBU;KAFK,CAAjB;;QAKI,CAAChc,KAAKkG,QAAL,CAAc,aAAd,CAAL,EAAmC;aAC1B+B,qBAAUjI,IAAV,CAAP;;;UAGI+b,2BACD/S,IADC;SAAA;;OAAN;;UAMMiT,YAAY9U,WAAMC,OAAN,CAAcpH,IAAd,CAAlB;;QAEIic,cAAc,GAAlB,EAAuB;YACfC,YAAY,MAAMhZ,UACtB9B,UAASrF,GAAT,EAAc+G,GAAd,EAAmB,GAAG,CAAC,GAAGmZ,UAAU5Y,KAAV,CAAgB,GAAhB,CAAJ,EAA0B,gBAA1B,CAAtB,CADsB,CAAxB;;UAII,CAAC6Y,SAAL,EAAgB;cACR/L,6BACDnH,IADC;aAAA;gBAGG,GAAEiT,SAAU,cAHf;iBAIG;WAJT;;;GA5BN;;kBAAsB9L,UAAtB;;;;;;;;AAyCA;+BAAO,WAA0BnH,IAA1B,EAA+D;UAC9D,EAAEjN,GAAF,KAAUiN,IAAhB;QACI,EAAEhJ,IAAF,KAAWgJ,IAAf;;UAEMlG,MAAM1B,UAAS,KAAT,EAAgB,aAAhB,CAAZ;UACM2a,WAAWT,gBAAgB;SAAA;gBAErBa;KAFK,CAAjB;;QAKI,CAACnc,KAAKkG,QAAL,CAAc,aAAd,CAAL,EAAmC;aAC1B+B,qBAAUjI,IAAV,CAAP;;;UAGI+b,2BACD/S,IADC;SAAA;;OAAN;;UAMMiT,YAAY9U,WAAMC,OAAN,CAAcpH,IAAd,CAAlB;;QAEIic,cAAc,GAAlB,EAAuB;YACfC,YAAY,MAAMhZ,UACtB9B,UAASrF,GAAT,EAAc+G,GAAd,EAAmB,GAAG,CAAC,GAAGmZ,UAAU5Y,KAAV,CAAgB,GAAhB,CAAJ,EAA0B,gBAA1B,CAAtB,CADsB,CAAxB;;UAII,CAAC6Y,SAAL,EAAgB;cACRE,6BACDpT,IADC;aAAA;gBAGG,GAAEiT,SAAU,cAHf;iBAIG;WAJT;;;GA5BN;;kBAAsBG,UAAtB;;;;;;;;AAyCA,AAAO,SAAS7D,SAAT,CAAmBvP,IAAnB,EAAyC;QACxC,EAAEjN,GAAF,EAAOwf,UAAP,KAAsBvS,IAA5B;MACI,EAAEhJ,IAAF,KAAWgJ,IAAf;;QAEMlG,MAAM1B,UAAS,IAAT,EAAe,SAAf,CAAZ;QACM2a,WAAWT,gBAAgB;OAAA;cAErBe,sBAFqB;iBAGlBT;GAHE,CAAjB;;SAMOzV,MAAMnG,IAAN,EACJmI,IADI,CACChB,WAAM1C,QADP,EAEJ0D,IAFI,CAECxC,OAAQ,GAAE+T,mBAAoB,IAAG/T,GAAI,EAFtC,EAGJ3H,KAHI,EAAP;;SAKO+d,2BACF/S,IADE;OAAA;QAAA;gBAIO6S,uBAAuB;SAAA;;KAAvB;KAJd;;;;;;AAcF,AAAO,SAASS,cAAT,CAAwBtT,IAAxB,EAA8C;QAC7C,EAAEjN,GAAF,EAAOwf,UAAP,KAAsBvS,IAA5B;MACI,EAAEhJ,IAAF,KAAWgJ,IAAf;;QAEMlG,MAAM1B,UAAS,IAAT,EAAe,SAAf,CAAZ;QACM2a,WAAWT,gBAAgB;OAAA;cAErBiB,sBAFqB;iBAGlBX;GAHE,CAAjB;;SAMOzV,MAAMnG,IAAN,EACJmI,IADI,CACChB,WAAM1C,QADP,EAEJ0D,IAFI,CAECF,oBAFD,EAGJE,IAHI,CAGCxC,OAAQ,GAAE+T,mBAAoB,WAAU/T,GAAI,EAH7C,EAIJ3H,KAJI,EAAP;;SAMO+d,2BACF/S,IADE;OAAA;QAAA;gBAIO6S,uBAAuB;SAAA;;KAAvB;KAJd;;;;;;AAcF;+BAAO,WAAqB7S,IAArB,EAA0D;QAC3D,EAAEhJ,IAAF,KAAWgJ,IAAf;UACM+S,WAAWT,gBAAgB;WAC1Bla,UAAS,KAAT,EAAgB,QAAhB,CAD0B;gBAErBob;KAFK,CAAjB;;UAKMF,+BAAiBtc,IAAjB,IAA0BgJ,IAA1B,EAAN;;WAEO7C,MAAMnG,IAAN,EACJmI,IADI,CACChB,WAAM1C,QADP,EAEJ0D,IAFI,CAECiR,sBAFD,EAGJpb,KAHI,EAAP;;WAKO+d,2BACF/S,IADE;;OAAP;GAdF;;kBAAsBkQ,KAAtB;;;;;;;;AAuBA,AAAO,SAASuD,UAAT,CAAoBzT,IAApB,EAA0C;MAC3C,EAAEhJ,IAAF,KAAWgJ,IAAf;QACM2R,QAAQ3a,KAAKqD,KAAL,CAAW,GAAX,CAAd;;SAEOsX,MAAM+B,GAAN,MAAe1c,IAAtB;;QAEM+b,WAAWT,gBAAgB;SAC1Bla,UAAS,KAAT,EAAgB,YAAhB,EAA8B,GAAGuZ,KAAjC,CAD0B;cAErBgC;GAFK,CAAjB;;SAKOZ,2BACF/S,IADE;;KAAP;;;;;;AASF,AAAO,SAAS4T,IAAT,CAAc5T,IAAd,EAAoC;MACrC,EAAEhJ,IAAF,KAAWgJ,IAAf;QACM2R,QAAQ3a,KAAKqD,KAAL,CAAW,GAAX,CAAd;;SAEOsX,MAAM+B,GAAN,MAAe1c,IAAtB;;QAEM+b,WAAWT,gBAAgB;SAC1Bla,UAAS,KAAT,EAAgB,OAAhB,EAAyB,GAAGuZ,KAA5B,CAD0B;cAErBkC;GAFK,CAAjB;;SAKOd,2BACF/S,IADE;;KAAP;;;;;;AASF;+BAAO,WAAwBA,IAAxB,EAA8C;UAC7CkQ,MAAMlQ,IAAN,CAAN;UACMmH,WAAWnH,IAAX,CAAN;UACMoT,WAAWpT,IAAX,CAAN;;QAEI7B,WAAMC,OAAN,CAAc4B,KAAKhJ,IAAnB,MAA6B,GAAjC,EAAsC;UAChC0M,2BAAJ;;;;UAII7M,UAAOuB,UAAS4H,KAAKjN,GAAd,EAAmB,KAAnB,EAA0B,WAA1B,CAAb;UACM+gB,SAAS3W,OAAM,MAAMxC,WAAS9D,OAAT,CAAZ,GACZsI,IADY,CACP;aAAO4U,IAAI/X,QAAJ,CAAa,MAAb,CAAP;KADO,EAEZmD,IAFY,CAEP;aAAOxC,IAAItC,KAAJ,CAAU,IAAV,CAAP;KAFO,EAGZ8E,IAHY,CAGP;aAAS6U,MAAMve,MAAN,CAAa,UAACvB,MAAD,EAASwI,IAAT,EAAegV,KAAf,EAAsBnW,GAAtB,EAA8B;cAClD0Y,aAAa1Y,IAAI2Y,WAAJ,CAAgB,GAAhB,CAAnB;YACIvX,MAAMzI,MAAV;;YAEIwI,QAAQgV,SAASuC,UAArB,EAAiC;iBACvB,GAAEvX,IAAK,IAAf;;;YAGEgV,QAAQ,CAAR,KAAcuC,UAAlB,EAA8B;iBACpB,oBAAmBhV,qBAAUe,KAAKhJ,IAAf,CAAqB,OAAhD;;;eAGK2F,GAAP;OAZa,EAaZ,EAbY,CAAT;KAHO,EAiBZ3H,KAjBY,EAAf;;UAmBM4F,YAAU/D,OAAV,EAAgB4H,OAAOC,IAAP,CAAYoV,MAAZ,CAAhB,CAAN;QACK,GAAEhK,YAAM,QAAN,CAAgB,gBAAvB;GA/BF;;kBAAsB4B,QAAtB;;;;;;;;;;;;;;;;;;ACnOe,SAASyI,YAAT,CAAsBpd,IAAtB,EAA+C;QACtDwH,aAAaxH,KAAK2S,WAAL,EAAnB;QACM0K,YAA8Bxe,QAAQC,GAAR,CAAYwe,UAAZ,EAAwB9V,UAAxB,CAApC;;MAEI,CAAC6V,SAAL,EAAgB;UACR,IAAI/O,KAAJ,CAAW,mCAAkCtO,IAAK,IAAlD,CAAN;;;SAGKqd,SAAP;;;ACLF;;;AAGA;8BAAO,WAA4B,EAAErhB,GAAF,EAAOgE,IAAP,EAAaC,IAAb,EAAmBoa,KAAnB,EAA5B,EAKW;UACVgD,YAAYD,aAAapd,IAAb,CAAlB;UACMmM,SAASD,cAAf;;UAEMmR,UAAU;SAAA;UAAA;UAAA;WAAA;kBAKF;eAAQlR,OAAOM,QAAP,CACjB,GAAEsG,YAAM,GAAN,CAAW,IAAGjE,UAAI,WAAJ,CAAiB,IAAGhP,OAAK,WADxB,CAAR;;KALR,CAAN;;WAUO6B,KAAP;GAnBF;;kBAAsB4b,YAAtB;;;;;ACRmD;;;;;AAKnD,AAAO,SAASvB,QAAT,CAAkB;QACjBjgB,GADiB;MAAA;MAAA;UAIf;CAJH,EAK2B;SACzBwhB,aAAa;OAAA;QAAA;QAAA;;GAAb,CAAP;;;ACSF;;;AAGA;8BAAO,WAAsBtd,IAAtB,EAA4BgL,QAA5B,EAAsC;UACrCO,SAASR,UAAUC,QAAV,CAAf;UACMuS,UAAW,GAAEzhB,GAAI,IAAGkE,IAAK,EAA/B;;UAEM0D,QAAM6Z,OAAN,CAAN;;UAEM1gB,QAAQ2F,GAAR,CAAY,CAChBkB,QAAO,GAAE6Z,OAAQ,MAAjB,CADgB,EAEhB7Z,QAAO,GAAE6Z,OAAQ,SAAjB,CAFgB,EAGhB7Z,QAAO,GAAE6Z,OAAQ,KAAjB,CAHgB,CAAZ,CAAN;;UAMM1gB,QAAQ2F,GAAR,CAAY,CAChBkB,QAAO,GAAE6Z,OAAQ,aAAjB,CADgB,EAEhB7Z,QAAO,GAAE6Z,OAAQ,kBAAjB,CAFgB,EAGhB7Z,QAAO,GAAE6Z,OAAQ,kBAAjB,CAHgB,EAIhB7Z,QAAO,GAAE6Z,OAAQ,iBAAjB,CAJgB,EAKhB7Z,QAAO,GAAE6Z,OAAQ,YAAjB,CALgB,EAMhB7Z,QAAO,GAAE6Z,OAAQ,sBAAjB,CANgB,EAOhB7Z,QAAO,GAAE6Z,OAAQ,aAAjB,CAPgB,CAAZ,CAAN;;UAUM1gB,QAAQ2F,GAAR,CAAY,CAChBoB,YACG,GAAE2Z,OAAQ,eADb,EAEEC,YAAYxd,IAAZ,CAFF,CADgB,EAMhB4D,YACG,GAAE2Z,OAAQ,gBADb,EAEEE,gBAFF,CANgB,EAWhB7Z,YACG,GAAE2Z,OAAQ,qCADb,EAEEG,eAAe1d,IAAf,EAAqB,aAArB,CAFF,CAXgB,EAgBhB4D,YACG,GAAE2Z,OAAQ,8BADb,EAEEG,eAAe1d,IAAf,EAAqB,MAArB,CAFF,CAhBgB,EAqBhB4D,YACG,GAAE2Z,OAAQ,oCADb,EAEEG,eAAe1d,IAAf,EAAqB,YAArB,CAFF,CArBgB,EA0BhB4D,YACG,GAAE2Z,OAAQ,qBADb,EAEEI,WAAW3d,IAAX,EAAiBuL,MAAjB,CAFF,CA1BgB,EA+BhB3H,YACG,GAAE2Z,OAAQ,aADb,EAEEK,cAFF,CA/BgB,EAoChBha,YACG,GAAE2Z,OAAQ,YADb,EAEEM,eAAe7d,IAAf,CAFF,CApCgB,EAyChB4D,YACG,GAAE2Z,OAAQ,UADb,EAEEO,iBAFF,CAzCgB,EA8ChBla,YACG,GAAE2Z,OAAQ,eADb,EAEEQ,gBAAgB/d,IAAhB,EAAsBgL,QAAtB,CAFF,CA9CgB,EAmDhBpH,YACG,GAAE2Z,OAAQ,WADb,EAEES,iBAFF,CAnDgB,EAwDhBpa,YACG,GAAE2Z,OAAQ,iBADb,EAEEU,kBAFF,CAxDgB,EA6DhBra,YACG,GAAE2Z,OAAQ,aADb,EAEEW,mBAFF,CA7DgB,CAAZ,CAAN;;UAmEMC,YAAY/Y,QAAS;MACvB0N,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;MAChBA,YAAM,QAAN,CAAgB;GAfpB;;YAkBQzG,MAAR,CAAe7D,KAAf,CAAqB2V,UAAU5a,MAAV,CAAiB,CAAjB,EAAoB4a,UAAUhhB,MAAV,GAAmB,CAAvC,CAArB;YACQkP,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;;UAEM5d,QAAQ2F,GAAR,CAAY,CAChBuZ,SAAS;WACFwB,OADE;YAED,YAFC;YAGD;KAHR,CADgB,EAOhBxB,SAAS;WACFwB,OADE;YAED,YAFC;YAGD;KAHR,CAPgB,CAAZ,CAAN;;UAcMngB,OAAK,uBAAL,EAA8B;WAC7BmgB;KADD,CAAN;;YAIQlR,MAAR,CAAe7D,KAAf,CAAsB,GAAEsK,YAAM,YAAN,CAAoB,MAA5C;YACQzG,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;;UAEMhQ,UAAU,IAAIC,GAAJ,CAAQ;YAChB,qCADgB;eAEb;KAFK,CAAhB;;YAKQC,KAAR;;UAEMvN,OAAK,aAAL,EAAoB;WACnBmgB;KADD,CAAN;;UAIMngB,OAAM,mCAAkCmO,MAAO,EAA/C,EAAkD;WACjDgS;KADD,CAAN;;YAIQ3S,IAAR;GAlJF;;kBAAsBmK,MAAtB;;;;;ACzBA,MAAMqJ,aAAa,kCAAnB;;;;;AAUA,AAAO,SAASC,QAAT,CAAkBxe,OAAlB,EAAgCmJ,OAAgB,EAAhD,EAA4D;QAC3D,EAAEtD,IAAF,EAAQ4Y,SAAS,QAAjB,KAA8BtV,IAApC;MACIuV,OAAQ,GAAEH,UAAW,SAAQE,MAAO,IAAGze,OAAK,EAAhD;;MAEI6F,QAAQA,QAAQ,CAApB,EAAuB;YACZ,IAAGA,IAAK,EAAjB;;;SAGK6Y,IAAP;;;ACPF,MAAMC,mBAAmBH,SAAS,qCAAT,EAAgD;QACjE;CADiB,CAAzB;;AAIA,AAAO,MAAMI,4BAA4BrZ,QAAS;;;;;;;;;MAS5CoZ,gBAAiB;CAThB;;ACfP,MAAME,0BAAN,SAAyCC,cAAzC,CAAwD;cAC1ChT,WAAZ,EAAiC;UACxB,mDAAkDA,WAAY,IAArE;;CAIJ;;ACGA;;;AAGA,AAAO,SAASiT,QAAT,GAAoB;QACnBtH,OAAOD,aAAavb,GAAb,CAAb;QACMob,SAAStY,QAAQC,GAAR,CAAYyY,KAAK,QAAL,EAAetM,QAA3B,EAAqC9O,QAArC,CAAf;;MAEI,CAACgb,MAAL,EAAa;UACL,IAAIwH,0BAAJ,CAA+BxiB,QAA/B,CAAN;;;MAGEgb,OAAO3L,MAAP,KAAkB,SAAtB,EAAiC;WACxB3H,YACJ,GAAE9H,GAAI,OAAMob,OAAOlM,QAAS,IAAG9O,QAAS,SADpC,EAELuL,OAAOC,IAAP,CAAY,EAAZ,CAFK,CAAP;;;MAMEvL,gBAAgB+a,OAAO/F,GAA3B,EAAgC;YACtBrC,MAAR,CAAetG,KAAf,CAAqBiW,yBAArB;YACQ3P,MAAR,CAAetG,KAAf,CAAqBiS,MAArB;WACO5d,QAAQC,OAAR,EAAP;;;QAGI,EAAEgb,MAAF,KAAaP,QAAQzb,GAAR,EAAaob,MAAb,CAAnB;QACMjC,QAAS,mBAAkBiC,OAAOlM,QAAS,EAAjD;;SAEO8M,OAAO+G,GAAP,CAAW5J,KAAX,EAAkBO,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;YACnCnJ,MAAR,CAAe7D,KAAf,CAAqByM,KAArB;YACQ5I,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;GAFK,CAAP;;;AC3BF;;;AAGA,AAAO,SAASqE,MAAT,GAAkB;QACjBxH,OAAOD,aAAavb,GAAb,CAAb;QACMob,SAAStY,QAAQC,GAAR,CAAYyY,KAAK,QAAL,EAAetM,QAA3B,EAAqC9O,QAArC,CAAf;;MAEI,CAACgb,MAAL,EAAa;UACL,IAAIwH,0BAAJ,CAA+BxiB,QAA/B,CAAN;;;MAGEgb,OAAO3L,MAAP,KAAkB,SAAtB,EAAiC;WACxB7I,QAAM,GAAE5G,GAAI,OAAMob,OAAOlM,QAAS,IAAG9O,QAAS,SAA9C,CAAP;;;MAGEC,gBAAgB+a,OAAO/F,GAA3B,EAAgC;YACtBrC,MAAR,CAAetG,KAAf,CAAqBiW,yBAArB;YACQ3P,MAAR,CAAetG,KAAf,CAAqBiS,MAArB;WACO5d,QAAQC,OAAR,EAAP;;;QAGI,EAAEgb,MAAF,KAAaP,QAAQzb,GAAR,EAAaob,MAAb,CAAnB;QACMjC,QAAS,2BAA0BiC,OAAOlM,QAAS,EAAzD;;SAEO8M,OAAO+G,GAAP,CAAW5J,KAAX,EAAkBO,IAAlB,CAAuB,OAAvB,EAAgC,MAAM;YACnCnJ,MAAR,CAAe7D,KAAf,CAAqByM,KAArB;YACQ5I,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;GAFK,CAAP;;;AC3BF;;;AAGA;8BAAO,aAA2B;UAC1BnD,OAAOD,aAAavb,GAAb,CAAb;;UAEM,EAAEkP,UAAUkM,MAAZ,KAAuBI,KAAK,QAAL,CAA7B;UACMhO,SAASgO,KAAK,QAAL,CAAf;UACM/N,aAAa+N,KAAK,YAAL,CAAnB;;UAEM,EAAEnC,UAAF,EAAc2C,MAAd,KAAyB,MAAM,IAAIiC,QAAJ,CAAa;YAAA;YAAA;YAG1Cje,GAH0C;uBAI/B,KAJ+B;;cAMxC,IAAIuW,MAAJ,CAAW;iBACR;OADH;KAN2B,CAArC;;UAWMY,UAAU,MAAMuF,kBAAkB1c,GAAlB,EAAuB;aAAMqZ,WAAW,YAAX,CAAN;KAAvB,CAAtB;;QAEIlC,QAAQ9V,MAAZ,EAAoB;YACZwb,UAAU1F,QACbxQ,GADa,CACT,gBAAQ;cACLoJ,UAAU7L,KAAKgC,OAAL,CAAa,gBAAb,EAA+B,IAA/B,CAAhB;cACMrD,MAAMqB,KAAKgC,OAAL,CAAa,IAAIH,MAAJ,CAAY,GAAEgK,OAAQ,YAAtB,CAAb,EAAiD,IAAjD,CAAZ;;eAEO,CAACA,OAAD,EAAUtC,WAAW1K,GAAX,CAAgB,GAAEF,GAAI,KAAtB,CAAV,CAAP;OALY,EAObgL,MAPa,CAON,UAAC,GAAG4O,SAAH,CAAD;eAAmBlc,QAAQkc,SAAR,CAAnB;OAPM,EAQbK,OARa,GASbnW,GATa,CAST,UAAC,CAACoJ,OAAD,EAAU0M,SAAV,CAAD;eAA0B,YAAM;gBAC7BtD,QAAQsD,UAAUM,GAAV,CAAcf,QAAd,CAAd;;iBAEO7C,MACJlU,EADI,CACD,OADC,EACQ,YAAM;oBACTsL,MAAR,CAAe7D,KAAf,CAAqB2J,GAAI,GAAE8C,MAAMjQ,QAAN,EAAiB,EAA5C;oBACQqH,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;WAHG,EAKJxX,IALI,CAKC;mBACJkS,WAAW,YAAX,EAAyB2D,MAAzB,CAAgC;;aAAhC,CADI;WALD,CAAP;SAHG;OATS,CAAhB;;YAwBM/R,aAAa,GAAG4R,OAAhB,GAAN;;;WAGK,IAAP;GAhDF;;kBAAsBoG,SAAtB;;;;;ACHA;;;AAGA;8BAAO,aAA4B;UAC3BzH,OAAOD,aAAavb,GAAb,CAAb;;UAEM,EAAEkP,UAAUkM,MAAZ,KAAuBI,KAAK,QAAL,CAA7B;UACMhO,SAASgO,KAAK,QAAL,CAAf;UACM/N,aAAa+N,KAAK,YAAL,CAAnB;;UAEM,EAAEnC,UAAF,EAAc2C,MAAd,KAAyB,MAAM,IAAIiC,QAAJ,CAAa;YAAA;YAAA;YAG1Cje,GAH0C;uBAI/B,KAJ+B;;cAMxC,IAAIuW,MAAJ,CAAW;iBACR;OADH;KAN2B,CAArC;;UAWM2M,iBAAiB,MAAMzc,UAAS,GAAEzG,GAAI,aAAf,CAA7B;;QAEIkjB,eAAe7hB,MAAnB,EAA2B;UACrBob,SAAJ;UACI1M,UAAU,MAAMsJ,WAAW,YAAX,EACjB8J,OADiB,CACT,SADS,EACE,MADF,EAEjB7K,KAFiB,EAApB;;UAIIvI,WAAWA,QAAQA,OAAvB,EAAgC;kBACpBA,QAAQA,OAAlB;;;YAGIlO,SAASqhB,eAAelD,IAAf,CAAoB;eAAKoD,EAAE1b,OAAF,CAAUqI,OAAV,MAAuB,CAA5B;OAApB,CAAf;;UAEIlO,MAAJ,EAAY;oBACEA,OAAOqE,OAAP,CAAe,IAAIH,MAAJ,CAAY,GAAEgK,OAAQ,YAAtB,CAAf,EAAmD,IAAnD,CAAZ;oBACYtC,WAAW1K,GAAX,CAAgB,GAAE0Z,SAAU,OAA5B,CAAZ;;YAEIA,SAAJ,EAAe;gBACPtD,QAAQsD,UAAUM,GAAV,CAAcf,QAAd,CAAd;;gBAEM7C,MAAMlU,EAAN,CAAS,OAAT,EAAkB,YAAM;oBACpBsL,MAAR,CAAe7D,KAAf,CAAqB2J,GAAI,GAAE8C,MAAMjQ,QAAN,EAAiB,EAA5C;oBACQqH,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;WAFI,CAAN;;gBAKMtF,WAAW,YAAX,EAAyBgK,KAAzB,CAA+B;;WAA/B,EAEHC,GAFG,EAAN;;;;GA5CR;;kBAAsBC,UAAtB;;;;;ACNA;;;AAGA,AAAO,SAASC,MAAT,GAAkB;QACjBhI,OAAOD,aAAavb,GAAb,CAAb;QACM,EAAEkP,UAAUkM,MAAZ,KAAuBI,KAAK,QAAL,CAA7B;QACMoB,OAAOpB,KAAK,MAAL,CAAb;QACMhO,SAASgO,KAAK,QAAL,CAAf;;SAEO,IAAIyC,QAAJ,CAAa;UAAA;UAAA;UAGZje,GAHY;YAIV,IAAIuW,MAAJ,CAAW;eACR;KADH;GAJH,EAOJpP,IAPI,CAOCsc,SACNA,MAAMpK,UAAN,CAAiB4D,WAAjB,CAA6BC,OAAON,KAAKM,GAAL,EAAUuG,MAAMpK,UAAhB,CAApC,CARK,CAAP;;;ACNF;;;AAGA;8BAAO,WAA2BpV,IAA3B,EAAiCC,IAAjC,EAAuC;UACtCwf,iBAAiBzf,KAAK2S,WAAL,EAAvB;QACI+M,iBAAiBzf,IAArB;QACIH,OAAJ;QACI0J,UAAJ;;YAEQiW,cAAR;WACO,OAAL;yBACmBpG,uBAAYqG,cAAZ,CAAjB;kBACQ,OAAMxX,qBAAUuX,cAAV,CAA0B,IAAGC,cAAe,KAA1D;;;WAGG,WAAL;qBACe,MAAMld,UAAS,GAAEzG,GAAI,aAAf,CAAnB;;yBAEiByN,WAAWuS,IAAX,CACf;iBAAS,GAAE2D,cAAe,KAAlB,KAA2B9c,KAAKY,MAAL,CAAY,EAAZ,CAAnC;SADe,CAAjB;;kBAIQ,cAAakc,cAAe,EAApC;;;WAGG,YAAL;WACK,YAAL;yBACmBxX,qBAAUwX,cAAV,CAAjB;kBACQ,OAAMxX,qBAAUuX,cAAV,CAA0B,IAAGC,cAAe,KAA1D;;;WAGG,YAAL;kBACU,OAAMD,cAAe,IAAGC,cAAe,KAA/C;;;WAGG,MAAL;kBACU,OAAMxX,qBAAUuX,cAAV,CAA0B,IAAGC,cAAe,KAA1D;;;;;;;QAOA,MAAMvc,UAAQ,GAAEpH,GAAI,IAAG+D,OAAK,EAAtB,CAAV,EAAoC;YAC5B6C,QAAM,GAAE5G,GAAI,IAAG+D,OAAK,EAApB,CAAN;;cAEQwM,MAAR,CAAe7D,KAAf,CAAsB,GAAEqG,UAAI,QAAJ,CAAc,IAAGhP,OAAK,EAA9C;cACQwM,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;;GA5CJ;;kBAAsBiF,WAAtB;;;;;;;;AAmDA;+BAAO,WAAuB,EAAE3f,IAAF,EAAQC,IAAR,EAAvB,EAGJ;QACGD,SAAS,UAAb,EAAyB;YACjB+c,SAAS,CAAC,MAAMnZ,WAAU,GAAE7H,GAAI,gBAAhB,CAAP,EACZkJ,QADY,CACH,MADG,EAEZ3B,KAFY,CAEN,IAFM,EAGZ5E,MAHY,CAGL,UAACue,KAAD,EAAQtX,IAAR,EAAiB;cACjB9D,UAAU,IAAIC,MAAJ,CACb,+BAA8BoG,qBAAUjI,IAAV,CAAgB,eADjC,CAAhB;;eAIO4B,QAAQoB,IAAR,CAAa0C,IAAb,IAAqBsX,KAArB,GAA6B,CAAC,GAAGA,KAAJ,EAAWtX,IAAX,CAApC;OARW,EASV,EATU,EAUZT,IAVY,CAUP,IAVO,CAAf;;YAYMpI,QAAQ2F,GAAR,CAAY,CAChBkd,YAAY,OAAZ,EAAqB1f,IAArB,CADgB,EAEhB0f,YAAY,WAAZ,EAA0B,UAASzX,qBAAUjI,IAAV,CAAgB,EAAnD,CAFgB,EAGhB0f,YAAY,YAAZ,EAA0B1f,IAA1B,CAHgB,EAIhB0f,YAAY,YAAZ,EAA0B1f,IAA1B,CAJgB,CAAZ,CAAN;;YAOM4D,YAAW,GAAE9H,GAAI,gBAAjB,EAAkCghB,MAAlC,CAAN;;cAEQzQ,MAAR,CAAe7D,KAAf,CAAsB,GAAEsK,YAAM,QAAN,CAAgB,gBAAxC;cACQzG,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;KAvBF,MAwBO,IAAI1a,SAAS,OAAb,EAAsB;YACrBlD,QAAQ2F,GAAR,CAAY,CAChBkd,YAAY3f,IAAZ,EAAkBC,IAAlB,CADgB,EAEhB0f,YAAY,WAAZ,EAA0B,UAASzX,qBAAUjI,IAAV,CAAgB,EAAnD,CAFgB,CAAZ,CAAN;KADK,MAKA;YACC0f,YAAY3f,IAAZ,EAAkBC,IAAlB,CAAN;;GAlCJ;;kBAAsB2f,OAAtB;;;;;ACtDO,SAASC,MAAT,GAA+B;SAC7B,IAAI/iB,OAAJ;gCAAY,WAAOC,UAAP,EAAmB;YAC9BiN,MAAmB,MAAMnL,QAAQ5B,KAAR,CAAcoa,OAAd,EAAuB,IAAvB,EAA6B,CAC1DvX,SAAA,CAAU/D,GAAV,EAAe,MAAf,EAAuB,MAAvB,CAD0D,CAA7B,CAA/B;;YAIM8D,WAAWigB,WAAU;gBACjB;OADO,CAAjB;;eAISrK,IAAT,CAAc,MAAd,EAAsB1Y,UAAtB;;aAEOuE,MAAP,CAAczB,SAASjD,OAAvB;WAAA;gBAEUoN,IAAI8G,MAFd;gBAGU9G,IAAI+V,MAHd;SAIG/V,IAAI1D,WAAJ,CAAgBrG,IAAjB,GAAwB+J;;SAErB9L,MACAyJ,IADA,CACKqC,IAAIT,MADT,EAEA7K,MAFA,CAEO,UAAC9B,OAAD,EAAU,GAAGuc,KAAH,CAAV;iCACHvc,OADG;WAELuc,MAAMlZ,IAAP,GAAckZ;;OAJf,EAKG,EALH,CANL,EAaKjb,MACAyJ,IADA,CACKqC,IAAIP,WADT,EAEA/K,MAFA,CAEO,UAAC9B,OAAD,EAAU,GAAGwT,UAAH,CAAV;iCACHxT,OADG;WAELwT,WAAW9J,WAAX,CAAuBrG,IAAxB,GAA+BmQ;;OAJhC,EAKG,EALH,CAbL,EAoBKlS,MACAyJ,IADA,CACKqC,IAAIN,WADT,EAEAhL,MAFA,CAEO,UAAC9B,OAAD,EAAU,GAAGyf,UAAH,CAAV;iCACHzf,OADG;WAELyf,WAAW/V,WAAX,CAAuBrG,IAAxB,GAA+Boc;;OAJhC,EAKG,EALH,CApBL;KAXK;;;;;OAAP;;;ACPF;;;AAGA,AAAe,UAAU2D,KAAV,CACbpV,QADa,EAEblJ,GAFa,EAGkB;OAC1B,IAAIgY,IAAI9O,QAAb,EAAoB8O,KAAKhY,GAAzB,EAA8BgY,KAAK,CAAnC,EAAsC;UAC9BA,CAAN;;;;ACIJ;;;;;;AAsBA,MAAMuG,OAAN,SAAsBxe,YAAtB,CAAmC;;cAWrBsP,OAAZ,EAA8B;;;WAGrBtS,gBAAP,CAAwB,IAAxB,EAA8B;YACtB;eACGsS,QAAQjR,IADX;kBAEM,KAFN;oBAGQ,IAHR;sBAIU;OALY;YAOtB;eACGiR,QAAQ5V,IADX;kBAEM,KAFN;oBAGQ,IAHR;sBAIU;OAXY;cAapB;eACC4V,QAAQD,MADT;kBAEI,KAFJ;oBAGM,IAHN;sBAIQ;OAjBY;eAmBnB;eACA,IAAIpR,GAAJ,EADA;kBAEG,KAFH;oBAGK,IAHL;sBAIO;OAvBY;kBAyBhB;eACHqR,QAAQmP,UAAR,IAAsB1jB,OAAA,GAAUY,MAD7B;kBAEA,KAFA;oBAGE,IAHF;sBAII;;KA7BlB;;uBAiCA,CAAoB;YACZ0C,SAAA,CAAUiR,QAAQjR,IAAlB,EAAwB,MAAxB,EAAgC,SAAhC;KADR;;YAIQkB,EAAR,CAAW,QAAX,EAAsBmf,OAAD,IAAa;cACxB5gB,OAAR,CAAgB,CAAC,EAAEU,MAAM2X,QAAR,EAAD,KAAwB;gBAC9B9G,MAAR,CAAeW,IAAf,CAAqB,GAAEsB,YAAM,QAAN,CAAgB,IAAG6E,QAAS,EAAnD;OADF;;WAIKwI,MAAL;KALF;;SAQKC,OAAL,GAAend,IAAf,CAAoB,MAAM,KAAKhD,IAAL,CAAU,OAAV,CAA1B;;;OAGGogB,QAAiB,IAAtB,EAA4B;WACnB,IAAIxjB,OAAJ,CAAYC,cAAW;UACxB,KAAKwjB,OAAL,CAAaC,IAAb,GAAoB,KAAKN,UAA7B,EAAyC;;cAEjCpkB,YAAiB2kB,YAAA,CAAa;kBAAA;gBAE5B,KAAKtlB;SAFU,CAAvB;;cAKMulB,UAAUC,WAAW,MAAM;eAC1B7P,MAAL,CAAYW,IAAZ,CAAiB9L,IAAK;uCACOmJ,UAAK,GAAEhT,UAAOJ,OAAP,CAAeE,GAAI,EAA1B,CAA6B;WAD1D;;uBAIa8kB,OAAb;;oBAEOhL,kBAAP;oBACOkL,IAAP;;eAEKL,OAAL,CAAalhB,MAAb,CAAoBvD,SAApB;;qBAEQA,SAAR;;cAEIwkB,KAAJ,EAAW;iBACJO,IAAL,CAAU,KAAV;;SAfY,EAiBb,KAjBa,CAAhB;;cAmBMC,cAAe5jB,GAAD,IAAkB;cAChCA,GAAJ,EAAS;iBACF4T,MAAL,CAAYiQ,KAAZ,CAAkB7jB,GAAlB;;;eAGG4T,MAAL,CAAYW,IAAZ,CAAiB9L,IAAK;uCACOmJ,UAAK,GAAEhT,UAAOJ,OAAP,CAAeE,GAAI,EAA1B,CAA6B;WAD1D;;uBAIa8kB,OAAb;;oBAEOhL,kBAAP;oBACOkL,IAAP;;eAEKL,OAAL,CAAalhB,MAAb,CAAoBvD,SAApB;;qBAEQA,SAAR;SAhBF;;kBAmBOkF,EAAP,CAAU,SAAV,EAAsBggB,GAAD,IAA0B;cACzCvZ,OAAO,EAAX;cACIzB,UAAUgb,GAAd;;cAEI,OAAOhb,OAAP,KAAmB,QAAvB,EAAiC;mBACxB0H,KAAK1H,OAAL,EAAc,SAAd,CAAP;sBACUA,QAAQA,OAAlB;;;kBAGMA,OAAR;iBACO,OAAL;mBACO8K,MAAL,CAAYW,IAAZ,CAAiB9L,IAAK;yCACKoN,YAAO,GAAEjX,UAAOJ,OAAP,CAAeE,GAAI,EAA5B,CAA+B;eAD1D;;mBAIK2kB,OAAL,CAAaliB,GAAb,CAAiBvC,SAAjB;;2BAEa4kB,OAAb;wBACOO,cAAP,CAAsB,OAAtB,EAA+BH,WAA/B;;yBAEQhlB,SAAR;;;iBAGG,OAAL;0BACc2L,KAAKsZ,KAAjB;;;;;;SAxBN;;kBAgCOtL,IAAP,CAAY,OAAZ,EAAqBqL,WAArB;kBACOrL,IAAP,CAAY,MAAZ,EAAqBrR,IAAD,IAAmB;gBAC/B,EAAE1I,SAAS,EAAEE,GAAF,EAAX,KAAuBE,SAA7B;;cAEI,OAAOsI,IAAP,KAAgB,QAApB,EAA8B;iBACvB0M,MAAL,CAAYW,IAAZ,CAAiB9L,IAAK;gCACFmJ,UAAK,GAAElT,GAAI,EAAX,CAAc,qBAAoBwI,IAAK;aAD3D;;;eAKG0M,MAAL,CAAYW,IAAZ,CAAkB,4BAA2B3C,UAAK,GAAElT,GAAI,EAAX,CAAc,EAA3D;;uBAEa8kB,OAAb;;oBAEOhL,kBAAP;eACK6K,OAAL,CAAalhB,MAAb,CAAoBvD,SAApB;;eAEK+kB,IAAL;SAhBF;;KA/EG,CAAP;;;WAqGkB/kB,SAApB,EAA2C;WAClC,IAAIgB,OAAJ,CAAYC,cAAW;WACvBwjB,OAAL,CAAalhB,MAAb,CAAoBvD,SAApB;;YAEM4kB,UAAUC,WAAW,MAAM7kB,UAAO8kB,IAAP,EAAjB,EAAgC,IAAhC,CAAhB;;gBAEOnL,IAAP,CAAY,YAAZ,EAA0B,MAAM;kBACvBmL,IAAP;OADF;;gBAIOnL,IAAP,CAAY,MAAZ,EAAoB,MAAM;mBAChB3Z,SAAR;qBACa4kB,OAAb;OAFF;;gBAKOzK,IAAP,CAAY,UAAZ;gBACOiL,UAAP;KAfK,CAAP;;;WAmBO;QACH,KAAKX,OAAL,CAAaC,IAAjB,EAAuB;YACfW,SAASjjB,MACZyJ,IADY,CACP,KAAK4Y,OADE,EAEZ7hB,MAFY,CAEL,CAAC8F,GAAD,EAAMyD,IAAN,EAAYjD,GAAZ,EAAiB2I,GAAjB,KAAyB;YAC3B,CAAC3I,MAAM,CAAP,IAAY,CAAhB,EAAmB;gBACXgW,QAAQrN,IAAIjI,KAAJ,CAAUV,GAAV,EAAeA,MAAM,CAArB,CAAd;;iBAEO,CACL,GAAGR,GADE,EAEL,MAAM1H,QAAQ2F,GAAR,CAAYuY,MAAMtY,GAAN,CAAU5G,aAAU,KAAKslB,QAAL,CAActlB,SAAd,CAApB,CAAZ,CAFD,CAAP;;;eAMK0I,GAAP;OAZW,EAaV,EAbU,CAAf;;;aAgBOwC,aAAa,GAAGma,MAAhB,GAAP;;;WAGK,KAAKN,IAAL,EAAP;;;YAGQ;WACD/jB,QAAQukB,IAAR,CAAa,CAAC,GAAGrB,MAAM,CAAN,EAAS,KAAKE,UAAd,CAAJ,EAA+Bxd,GAA/B,CAAmC,MAAM,KAAKme,IAAL,EAAzC,CAAb,CAAP;;CAIJ;;ACtPA;;;;;;AAMA,AAAO,SAASS,aAAT,CAAuBvQ,OAAvB,EAAyC;SACvC,IAAIkP,OAAJ,CAAYlP,OAAZ,CAAP;;;ACEF;;;AAGA;8BAAO,WAAqB;UACnB5U,aAAa,aADM;0BAEhB,KAFgB;gBAGd;GAHP,EAQW;UACVob,OAAOD,aAAavb,GAAb,CAAb;UACM,EAAEwlB,OAAF,KAAchK,KAAK,QAAL,CAApB;UACMzG,SAAS,IAAIwB,MAAJ,CAAWiP,OAAX,CAAf;;QAEIC,GAAJ,EAAS;YACDC,UAAU,MAAM9gB,QAAM5E,GAAN,CAAtB;;cAEQiF,EAAR,CAAW,QAAX;qCAAqB,WAAOmf,OAAP,EAAmB;gBAChCrV,MAAMxC,SAAN,CAAN;kBACQpI,IAAR,CAAa,QAAb,EAAuBigB,OAAvB;SAFF;;;;;;;;kBAMY;YAAA;YAENpkB,GAFM;YAGNG,IAHM;kBAIAukB,aAAUte,SAAV,GAAsB;KAJpC,EAKGsT,IALH,CAKQ,OALR,EAKiB,YAAM;aACdhE,IAAP,CAAa,iCAAgC5B,WAAM,GAAE3T,IAAK,EAAb,CAAgB,EAA7D;KANF;GAtBF;;kBAAsBwlB,KAAtB;;;;;ACXA;;;AAGA,AAAO,SAASze,IAAT,GAA+B;UAC5BqJ,MAAR,CAAe7D,KAAf,CAAqB,cAArB;UACQ6D,MAAR,CAAe7D,KAAf,CAAqBiS,MAArB;;SAEO5d,QAAQC,OAAR,EAAP;;;;;;;;;;;;;;"}